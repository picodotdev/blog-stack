<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-09-28T01:02:26Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-09-28T01:02:26Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Desplegar aplicaciones Nodejs a Azure desde GIT automáticamente</title>
    <link rel="alternate" href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/desplegar-aplicaciones-nodejs-a-azure-desde-git-automaticamente" />
    <category term="javascript" />
    <category term="nodejs" />
    <category term="azure" />
    <author>
      <name>leonardo</name>
    </author>
    <updated>2015-09-28T01:46:00Z</updated>
    <published>2015-09-28T01:46:00Z</published>
    <content type="html">&lt;p&gt;En un post anterior vimos cómo desplegar aplicaciones .net en Azure. Bien, Azure Web sites también tiene la capacidad de ejecutar aplicaciones hechas con NodeJs y por supuesto soporta el mismo esquema de despliegue automático. ¿Cómo hacerlo paso a paso? Para este post me basé en este ejemplo de MSDN, a diferencia de mi post anterior ahora estoy usando la versión más actual del portal de Azure. Aplicación de Nodejs sencilla var http = require('http')
var port = process.env.PORT || 1337;
http.createServer(function(req, res) {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello World\n');
}).listen(port); Simplemente nos retorna un string "Hello World" como texto antes un request HTTP Una vez que subimos a GIT nuestro código (en mi caso un repositorio en Bitcucket) no nos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/desplegar-aplicaciones-nodejs-a-azure-desde-git-automaticamente"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>leonardo</dc:creator>
    <dc:date>2015-09-28T01:46:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño Builder</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-del-patron-de-diseno-builder" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-09-27T14:00:00Z</updated>
    <published>2015-09-27T10:00:00Z</published>
    <content type="html">&lt;p&gt;Construir objetos es una tarea básica en los lenguajes orientados a objetos. En Java, las instancias de una clase se crean con la palabra clave reservada new y un método especial llamado constructor. Al diseñar una clase debemos tener algunas cuestiones para evitar varios constructores telescópicos, evitar constructores que son combinación de varios argumentos opcionales y permitir obtener instancias de objetos con estado válido. Si se nos presentan estas situaciones podemos usar el patrón de diseño Builder que consiste en básicamente en una clase especializada en construir instancias de otra clase que podemos hacer usable con una API fluida y alguna cosa más deseable que explico en el artículo. Al escribir los métodos constructores de instancias de una clase puede ocurrirnos que algunos de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-del-patron-de-diseno-builder"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-09-27T10:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Plataro, el tema de iconos inspirado en FaenzaFlattr</title>
    <link rel="alternate" href="http://www.blogstack.info/post/kdeblog/2015/09/plataro-el-tema-de-iconos-inspirado-en-faenzaflattr" />
    <category term="iconos" />
    <category term="diseno" />
    <author>
      <name>baltolkien</name>
    </author>
    <updated>2015-09-27T05:58:38Z</updated>
    <published>2015-09-27T05:58:38Z</published>
    <content type="html">&lt;p&gt;Hace mucho tiempo que no aparece un tema de iconos en el blog. Así que me complace presentar Plataro, un tema de iconos inspirado en FaenzaFlattr, que nos ofrece un colección de iconos planos y coloridos. Plataro, el tema de iconos inspirado en FaenzaFlattr Los iconos es una parte fundamental de cualquier escritorio y la Comunidad KDE lo sabe. No por nada se ha invertido mucho esfuerzo en crear Breeze, el tema oficial de iconos de Plasma 5, que recientemente ha sido finalizado (al menos en su primera versión definitiva). No obstante eso no significa que otros diseñadores o equipos de artistas no aporten su granito de arena y ofrezcan sus creaciones para decorar nuestros escritorios. Es el caso de Plataro, el tema de iconos inspirado en FaenzaFlattr, que nos ofrece una maravillosa colección[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/kdeblog/2015/09/plataro-el-tema-de-iconos-inspirado-en-faenzaflattr"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>baltolkien</dc:creator>
    <dc:date>2015-09-27T05:58:38Z</dc:date>
  </entry>
  <entry>
    <title>Mi escritorio Plasma KDE de septiembre 2015</title>
    <link rel="alternate" href="http://www.blogstack.info/post/kdeblog/2015/09/mi-escritorio-plasma-kde-de-septiembre-2-15" />
    <category term="mi-escritorio" />
    <category term="diseno" />
    <author>
      <name>baltolkien</name>
    </author>
    <updated>2015-09-26T17:29:30Z</updated>
    <published>2015-09-26T17:29:30Z</published>
    <content type="html">&lt;p&gt;Hace mucho tiempo tenía la costumbre de mostrar en el blog como tenía organizado mi escritorio KDE, una forma de mostrar como quedan los plasmoides integrados en Plasma. Por diversos motivos, la sección desapareció ( tiene ni categoría específica) pero ahora tengo uno que me gustaría compartir. Bienvenidos pues a a un vistazo a mi escritorio KDE de septiembre 2015. Mi escritorio Plasma KDE de septiembre 2015 Hace poco, navegando por la red, encontré un fondo de pantalla que hizo que me vinieran algunos recuerdos que tenía enterrados desde hacía mucho tiempo. Resulta que este fondo de pantalla en particular lo vi en una modificación de escritorio de una aplicación para Windows cuyo nombre no recuerdo. Por aquel entonces yo usaba Windows y me gustó como quedaba, tanto la imagen (muy seductora[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/kdeblog/2015/09/mi-escritorio-plasma-kde-de-septiembre-2-15"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>baltolkien</dc:creator>
    <dc:date>2015-09-26T17:29:30Z</dc:date>
  </entry>
  <entry>
    <title>El archivo _ViewImports en MVC 6</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/09/el-archivo-viewimports-en-mvc-6" />
    <category term="desarrollo" />
    <category term="novedades" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-09-25T19:00:25Z</updated>
    <published>2015-09-22T07:10:00Z</published>
    <content type="html">&lt;p&gt;Desde la llegada de Razor, hace ya bastante tiempo, usamos en MVC el archivo _ViewStart.cshtml de las carpetas de vistas de nuestra aplicación para introducir código de inicialización de éstas. Era un buen lugar para establecer propiedades como el Layout de forma genérica, sin tener que hacerlo en cada una de las vistas que se encontraran por debajo en el árbol de directorios en el que se definía. En MVC 6 se le ha unido un compañero llamado _ViewImports.cshtml, cuya finalidad y funcionamiento es parecido al tradicional ViewStart, porque se procesa antes de ejecutar una vista e igualmente afecta a todas las vistas que se encuentren por debajo de este archivo en el árbol de directorios, aunque aporta algunas diferencias bastante interesantes. Comentamos a continuación los aspectos más destacables.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/09/el-archivo-viewimports-en-mvc-6"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-09-22T07:10:00Z</dc:date>
  </entry>
  <entry>
    <title>Generar recursos estáticos con wro4j</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/09/generar-recursos-estaticos-con-wro4j" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-09-25T15:00:00Z</updated>
    <published>2015-09-25T15:00:00Z</published>
    <content type="html">&lt;p&gt;Con nuevas tecnologías como less, Sass o CoffeeScript el desarrollo y mantenimiento de una página web medianamente compleja mejora notablemente. Con la librería wro4j en una aplicación Java podemos procesar este tipo de recursos y convertirlos a los equivalentes que saben interpretar los navegadores de forma nativa CSS y JavaScript además de optimizar su tamaño u ofuscarlos. El desarrollo y las tecnologías de las páginas web sigue evolucionando, HTML 5, JavaScript, CSS 3, diseño adaptable (responsive), … Y también surgen nuevas herramientas que hacen el desarrollo más simple o hace que las aplicaciones sean más eficientes. Algunas de estas nuevas tecnologías son less o Sass que permiten producir hojas de estilo CSS utilizando una mejor notación, si la hoja de estilos es grande usar una tecnología[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/09/generar-recursos-estaticos-con-wro4j"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-09-25T15:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Disponible la segunda beta de Kubuntu 15.10</title>
    <link rel="alternate" href="http://www.blogstack.info/post/kdeblog/2015/09/disponible-la-segunda-beta-de-kubuntu-15-1" />
    <category term="kubuntu" />
    <author>
      <name>baltolkien</name>
    </author>
    <updated>2015-09-25T12:26:28Z</updated>
    <published>2015-09-25T12:26:28Z</published>
    <content type="html">&lt;p&gt;Estamos en pleno periodo pre-lanzamiento de distribuciones. A lo largo de la semana hemos hablado de las betas de Fedora 23 y de openSUSE Leap 42.1, y hoy viernes toca hablar de que ya tenemos disponible la segunda beta de Kubuntu 15.10. Veamos las pequeñas novedades que nos ofrecer esta segunda versión de desarrollo. Disponible la segunda beta de Kubuntu 15.10 Este viernes 25 de septiembre la Comunidad de Kubuntu ha anunciado que ya está disponible la segunda beta de Kubuntu 15.10 en sus servidores, lo cual es siempre una buena noticia ya que demuestra que la distribución sigue teniendo una buena salud y que quiere convertirse en el abanderado de la Comunidad KDE al seguir apoyando Plasma 5. Esta beta añade unas cuantas grandes novedades en cuanto a software. De esta forma las grandes aplicaciones[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/kdeblog/2015/09/disponible-la-segunda-beta-de-kubuntu-15-1"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>baltolkien</dc:creator>
    <dc:date>2015-09-25T12:26:28Z</dc:date>
  </entry>
</feed>

