<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-09-29T08:02:11Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-09-29T08:02:11Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Tag helpers en MVC 6: Introducción</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/09/tag-helpers-en-mvc-6-introduccion" />
    <category term="novedades" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-09-29T07:10:00Z</updated>
    <published>2015-09-29T07:10:00Z</published>
    <content type="html">&lt;p&gt;Desde la creación de MVC, los helpers han sido piezas fundamentales en la composición de nuestras vistas. Llamadas como las habituales Html.ActionLink() o Html.TextBoxFor() nos han permitido durante años crear interfaces de forma sencilla y productiva, pues se trataba de métodos muy reutilizables capaces de ejecutar lógica de presentación y generar bloques de HTML por nosotros (o CSS, o incluso Javascript). De hecho, los helpers han sido la fórmula recomendada para crear componentes reutilizables de generación de código de marcas en las páginas de nuestras aplicaciones MVC y son muy utilizados tanto por el propio framework como por componentes visuales de terceros. Pero esto no implica que fuera una solución perfecta o exenta de problemas… Aunque en la mayoría de ocasiones daba la talla, había[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/09/tag-helpers-en-mvc-6-introduccion"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-09-29T07:10:00Z</dc:date>
  </entry>
  <entry>
    <title>Monitorizar nuestro sistema desde una aplicación en C++11</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/09/monitorizar-nuestro-sistema-desde-una-aplicacion-en-c-11" />
    <category term="procesos" />
    <category term="consumo" />
    <category term="buffer" />
    <category term="unidades" />
    <category term="salud" />
    <category term="tiempo" />
    <category term="swap" />
    <category term="online" />
    <category term="cpu" />
    <category term="sistema" />
    <category term="uptime" />
    <category term="disco" />
    <category term="github" />
    <category term="monitor" />
    <category term="linux" />
    <category term="monitorizar" />
    <category term="ram" />
    <category term="c-11" />
    <category term="generar" />
    <category term="estadisticas" />
    <category term="programas" />
    <category term="montaje" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-09-28T08:40:43Z</updated>
    <published>2015-09-28T08:40:43Z</published>
    <content type="html">&lt;p&gt;Nuestros programas, muchas veces necesitan conocer información sobre el ordenador donde se están ejecutando. Una característica muy interasante y útil (para mi gusto) es que los sistemas Unix nos proporcionan una interfaz para conocer muchas cosas a través del sistema de archivos, de esta forma podemos conocer la información estemos donde estemos y usemos en lenguaje que usemos (no tenemos que tener una API en nuestro lenguaje que pida al sistema la información ni nada). Bueno, muchas veces, sí que tenemos una API que nos mastica un poco la información para no trabajar tanto… Eso sí, esta información en bruto, tendremos que transformarla y tratarla de alguna forma para que se ajuste a nuestras necesidades. Por ejemplo, si entramos en /proc, podemos ver multitud de ficheros con mucha información.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/09/monitorizar-nuestro-sistema-desde-una-aplicacion-en-c-11"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-09-28T08:40:43Z</dc:date>
  </entry>
  <entry>
    <title>Enlaces interesantes 212</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/09/enlaces-interesantes-212" />
    <category term="enlaces" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-09-28T06:55:00Z</updated>
    <published>2015-09-28T06:55:00Z</published>
    <content type="html">&lt;p&gt;Ahí van los enlaces recopilados durante la semana pasada, espero que os resulten interesantes :-) .Net Exceptional Edge Cases Bill Wagner Some Useful Debugging attributes in Dotnet Sivaraman Dhamodharan Regular Expression Anchors Richard Carr How to work with generics in C# Joydip Kanjilal Enabling source code debugging for your NuGet packages with GitLink Oren Novotny Virtual, Override, new and Abstract keywords DotNetForAll Roslyn in MonoDevelop/XamarinStudio Miguel de Icaza ASP.NET A Summer of ASP.NET: Catching up with .NET Web Developments Jeffrey T. Fritz Creating Your Own ASP.NET MVC Authorization Attribute Peter Vogel ASP.NET Community Standup - September 15, 2015 Jeffrey T. Fritz Integrating with Instagram using ASP.NET WebHooks Preview Henrik F Nielsen CRUD Operation in ASP.NET MVC[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/09/enlaces-interesantes-212"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-09-28T06:55:00Z</dc:date>
  </entry>
  <entry>
    <title>Day of the Week – Plasmoides de KDE (54)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/kdeblog/2015/09/day-of-the-week-plasmoides-de-kde-54" />
    <category term="day-of-the-week" />
    <category term="software" />
    <category term="plasmoides" />
    <author>
      <name>baltolkien</name>
    </author>
    <updated>2015-09-28T06:29:08Z</updated>
    <published>2015-09-28T06:29:08Z</published>
    <content type="html">&lt;p&gt;Parece que el lunes se está convirtiendo en el día de los plasmoides en el blog. La semana pasada hablé de Day of the Month, un simple plasmoide que te muestra justamente eso, el día del mes en el que nos encontramos, hoy toca hablar de Day of the Week, otro simple plasmoide que te muestra el nombre del día, ideal para completar el reloj digital de la barra de tareas. Day of the Week – Plasmoides de KDE (54) Ya he comentado que con el lanzamiento de Plasma 5 perdimos muchos plasmoides y que poco a poco vamos recuperándolos para el nuevo escritorio, con lo que podemos personalizar a la perfección nuestro espacio de trabajo. Day of the Week es un plasmoide extremadamente simple que muestra el nombre del día en el que estamos. Igual que Day of the Month del que hablé la semana pasada, se trata[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/kdeblog/2015/09/day-of-the-week-plasmoides-de-kde-54"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>baltolkien</dc:creator>
    <dc:date>2015-09-28T06:29:08Z</dc:date>
  </entry>
  <entry>
    <title>Los mejores libros sobre desarrollo de software</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/09/los-mejores-libros-sobre-desarrollo-de-software" />
    <category term="software-development" />
    <category term="development" />
    <category term="books" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-09-28T05:06:40Z</updated>
    <published>2015-09-28T05:06:40Z</published>
    <content type="html">&lt;p&gt;En realidad el post debería titularse unos cuantos libros que me han gustado, pero bueno, todos sabemos cómo funciona eso de conseguir visitas poniendo títulos grandilocuentes. Me han pedido unas cuantas veces que recomiende libros sobre desarrollo y, aunque suelo adecuar la recomendación al que me la pide, creo que no está de más hacer una pequeña lista con los libros que más me han gustado, influenciado o enseñado algo en determinados momentos. Es ésta una lista completamente subjetiva, así que no te sientas mal si alguno te parece horrible o tu libro favorito no aparece. Estaré encantado de recibir sugerencias en los comentarios. Si estás esperando libros sobre una tecnología concreta, lo siento, son todos libros genéricos que tratan más de explicar principios que de proporcionar recetas[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/09/los-mejores-libros-sobre-desarrollo-de-software"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-09-28T05:06:40Z</dc:date>
  </entry>
  <entry>
    <title>Desplegar aplicaciones Nodejs a Azure desde GIT automáticamente</title>
    <link rel="alternate" href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/desplegar-aplicaciones-nodejs-a-azure-desde-git-automaticamente" />
    <category term="javascript" />
    <category term="nodejs" />
    <category term="azure" />
    <author>
      <name>leonardo</name>
    </author>
    <updated>2015-09-28T01:46:00Z</updated>
    <published>2015-09-28T01:46:00Z</published>
    <content type="html">&lt;p&gt;En un post anterior vimos cómo desplegar aplicaciones .net en Azure. Bien, Azure Web sites también tiene la capacidad de ejecutar aplicaciones hechas con NodeJs y por supuesto soporta el mismo esquema de despliegue automático. ¿Cómo hacerlo paso a paso? Para este post me basé en este ejemplo de MSDN, a diferencia de mi post anterior ahora estoy usando la versión más actual del portal de Azure. Aplicación de Nodejs sencilla var http = require('http')
var port = process.env.PORT || 1337;
http.createServer(function(req, res) {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello World\n');
}).listen(port); Simplemente nos retorna un string "Hello World" como texto antes un request HTTP Una vez que subimos a GIT nuestro código (en mi caso un repositorio en Bitcucket) no nos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/desplegar-aplicaciones-nodejs-a-azure-desde-git-automaticamente"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>leonardo</dc:creator>
    <dc:date>2015-09-28T01:46:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño Builder</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-del-patron-de-diseno-builder" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-09-27T14:00:00Z</updated>
    <published>2015-09-27T10:00:00Z</published>
    <content type="html">&lt;p&gt;Construir objetos es una tarea básica en los lenguajes orientados a objetos. En Java, las instancias de una clase se crean con la palabra clave reservada new y un método especial llamado constructor. Al diseñar una clase debemos tener algunas cuestiones para evitar varios constructores telescópicos, evitar constructores que son combinación de varios argumentos opcionales y permitir obtener instancias de objetos con estado válido. Si se nos presentan estas situaciones podemos usar el patrón de diseño Builder que consiste en básicamente en una clase especializada en construir instancias de otra clase que podemos hacer usable con una API fluida y alguna cosa más deseable que explico en el artículo. Al escribir los métodos constructores de instancias de una clase puede ocurrirnos que algunos de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-del-patron-de-diseno-builder"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-09-27T10:00:00Z</dc:date>
  </entry>
</feed>

