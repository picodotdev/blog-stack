<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2016-02-15T19:02:20Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2016-02-15T19:02:20Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Dockerfile: Creación de imágenes docker</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2016/02/dockerfile-creacion-de-imagenes-docker" />
    <category term="virtualizacion" />
    <category term="general" />
    <category term="docker" />
    <author>
      <name>admin</name>
    </author>
    <updated>2016-02-15T18:10:48Z</updated>
    <published>2016-02-15T18:10:48Z</published>
    <content type="html">&lt;p&gt;En la entrada anterior, estudiamos un método para crear nuevas imágenes a partir de contenedores que anteriormente habíamos configurado. En esta entrada vamos a presentar la forma más usual de crear nuevas imágenes: usando el comando docker buid y definiendo las características que queremos que tenga la imagen en un fichero Dockerfile. ¿Cómo funciona docker build? Un Dockerfile es un fichero de texto donde indicamos los comandos que queremos ejecutar sobre una imagen base para crear una nueva imagen. El comando docker build construye la nueva imagen leyendo las instrucciones del fichero Dockerfile y la información de un entorno, que para nosotros va a ser un directorio (aunque también podemos guardar información, por ejemplo, en un repositorio git). La creación de la imagen es ejecutada por[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2016/02/dockerfile-creacion-de-imagenes-docker"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2016-02-15T18:10:48Z</dc:date>
  </entry>
  <entry>
    <title>Manjaro para principiantes en 2016</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2016/02/manjaro-para-principiantes-en-2-16" />
    <category term="aur" />
    <category term="blog-stack" />
    <category term="linux" />
    <category term="sysadmin" />
    <category term="pacman" />
    <category term="gnu" />
    <category term="arch" />
    <category term="manjaro" />
    <author>
      <name>davidochobits</name>
    </author>
    <updated>2016-02-15T16:50:02Z</updated>
    <published>2016-02-15T16:50:02Z</published>
    <content type="html">&lt;p&gt;La distribución de la que voy a hablar hoy, está enfocada a la facilidad de uso y, al ser Rolling release, incorpora las últimas versiones del software, su nombre es Manjaro Linux. Está basada... La entrada Manjaro para principiantes en 2016 aparece primero en ochobitshacenunbyte.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2016/02/manjaro-para-principiantes-en-2-16"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>davidochobits</dc:creator>
    <dc:date>2016-02-15T16:50:02Z</dc:date>
  </entry>
  <entry>
    <title>#ilovefs – I love Software Libre</title>
    <link rel="alternate" href="http://www.blogstack.info/post/kdeblog/2016/02/ilovefs-i-love-software-libre" />
    <category term="kde" />
    <author>
      <name>baltolkien</name>
    </author>
    <updated>2016-02-15T14:47:56Z</updated>
    <published>2016-02-15T14:47:56Z</published>
    <content type="html">&lt;p&gt;En realidad el día oficial fue ayer pero mandaba la actualidad de la Comunidad KDE con el lanzamiento de KDE Frameworks 19. Es es que el día de los enamorados es también el día de mostrar el amor por el Software Libre realizando cualquier tipo de acción con la etiqueta #ilovefs. Yo, por mi parte, he realizado un tweet y quiero dedicar un artículo hpy lunes inspirado por otro del gran Victorhck. #ilovefs – I love Software Libre Como casi todo en esta vida, mi amor por el Software Libre llegó por casualidad y sin que yo me percatara de ello. Fue un enamoramiento lento, de los que calan, y que estoy seguro durarán toda la vida. Y es que como he comentado a lo largo del blog, hace falta muy poco para entender que el movimiento del Software Libre es mucho más que Software. Es un movimiento que lucha[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/kdeblog/2016/02/ilovefs-i-love-software-libre"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>baltolkien</dc:creator>
    <dc:date>2016-02-15T14:47:56Z</dc:date>
  </entry>
  <entry>
    <title>¿ Por qué debemos trabajar en la seguridad hasta de un servidor de pruebas ?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2016/02/por-que-debemos-trabajar-en-la-seguridad-hasta-de-un-servidor-de-pruebas" />
    <category term="contrasena" />
    <category term="endurecer" />
    <category term="interneteando" />
    <category term="servicios" />
    <category term="phising" />
    <category term="seguridad" />
    <category term="whois" />
    <category term="servidor" />
    <category term="proveedor" />
    <category term="banco" />
    <category term="archvios" />
    <category term="conexion" />
    <category term="ssh" />
    <category term="servidores" />
    <category term="ataque" />
    <category term="italiano" />
    <category term="cifrado" />
    <category term="proteger" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-02-15T09:27:45Z</updated>
    <published>2016-02-15T09:27:45Z</published>
    <content type="html">&lt;p&gt;Esta historia sucedió a finales de 2014, mientras probaba la estabilidad y configuración de algunos programas en un servidor antes de llevarlos al servidor de producción. Como era un servidor de pruebas, y los datos que manejaba no eran privados, decidí no hacer nada para su seguridad. Es decir, usé contraseñas muy sencillas, firewall desactivado y todo con la configuración por defecto. Pruebas antes de utilizar en producción En general, esto es lo recomendable. Es decir, aunque tengamos un servidor de test para probar los últimos cambios en nuestras plataformas y un servidor de producción en el que nada puede fallar ya; en ocasiones cuando necesitamos un software nuevo y podemos meter la pata está bien hacer pruebas en otro servidor externo, sin relación con los anteriores, para ver cómo va.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2016/02/por-que-debemos-trabajar-en-la-seguridad-hasta-de-un-servidor-de-pruebas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-02-15T09:27:45Z</dc:date>
  </entry>
  <entry>
    <title>Enlaces interesantes 228</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2016/02/enlaces-interesantes-228" />
    <category term="enlaces" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2016-02-15T08:16:42Z</updated>
    <published>2016-02-15T07:55:00Z</published>
    <content type="html">&lt;p&gt;Ahí van los enlaces recopilados durante la semana pasada. Espero que os resulten interesantes. :-) .Net The week in .NET – 2/11/2016 Bertrand Le Roy Concise Binary Object Representation (CBOR) in C# Peter Occil A (Hitchhiker's) Guide To The .NET Core Projects on GitHub Mark Rendle Generic Mapper written in TDD Manfred Zik A Single SignOn Implementation Chihwei Chang NamingFormatter - String Interpolation in runtime solution Kouji Matsui C# 7 Feature Proposal: Slicing Bill Wagner C#Lectures - Lecture 1: Primitive Types Sergey Kizyan Liskov Substitution Principle in C# Amir Ahani Testing That Your Public APIs Have Not Changed Unexpectedly with PublicApiGenerator and Approval Tests Jason Roberts Dynamic code generation in C# Ayende Rahien ASP.NET [ASPNET Web API] Web API y OWIN desde 0 Julio Avellaneda[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2016/02/enlaces-interesantes-228"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2016-02-15T07:55:00Z</dc:date>
  </entry>
  <entry>
    <title>Las ventajas de NO usar inyección de dependencias</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2016/02/las-ventajas-de-no-usar-inyeccion-de-dependencias" />
    <category term="ioc" />
    <category term="development" />
    <category term="dependency-injection" />
    <category term="design-patterns" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2016-02-15T05:06:03Z</updated>
    <published>2016-02-15T05:06:03Z</published>
    <content type="html">&lt;p&gt;La semana pasada escribía en twitter: Acabo de escribir un constructor que hace new’s de sus dependencias. Ahí, como los antiguos. Tampoco es tan terrible. Aparte de por trollear discutir un poco y aprender de la gente tan lista que conozco en twitter, realmente lo escribí porque últimamente empiezo a pensar que la inyección de dependencias está sobrevalorada, especialmente eso en lo que se ha convertido la inyección de dependencias en lenguajes como C#. Y si hablamos de los contenedores de inversión de control, aún peor. Por eso quiero escribir este post, para reflexionar un poco sobre lo que ganamos al no utilizar inyección de dependencias. Por supuesto, también perdemos cosas y tenemos que ver cómo de terribles son y si podemos hacer algo al respecto. Como siempre, vamos a intentar analizar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2016/02/las-ventajas-de-no-usar-inyeccion-de-dependencias"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2016-02-15T05:06:03Z</dc:date>
  </entry>
  <entry>
    <title>PosoMAS: Ingeniería del Software para Scrum</title>
    <link rel="alternate" href="http://www.blogstack.info/post/navegapolis/2016/02/posomas-ingenieria-del-software-para-scrum" />
    <category term="blog" />
    <author>
      <name>juan.palacio@gmail.com (Juan Palacio)</name>
    </author>
    <updated>2016-02-14T18:34:08Z</updated>
    <published>2016-02-14T18:34:08Z</published>
    <content type="html">&lt;p&gt;PosoMAS (Process for Open Self-Organising Multi-Agent Systems) es un método de desarrollo de software que facilita el intercambio de información entre los equipos y mantiene el entendimiento compartido del proyecto, de sus objetivos, alcance y avances. Recientemente ha presentado una versión para Scrum. Lo desarrolla el Instituto de ingeniería del software y sistemas de la Universidad de Augsburgo, con la licencia abierta: Creative-Commons Reconocimiento-Compartir-Igual 3.0 y ofrece una completa documentación en fomrto Eclipse Process Framework.   Sólo he podido hacer una lectura rápida y superficial, así que no me atrevo a valorarlo pero me ha parecido que puede ser interesante conocerlo si se anda buscando cómo usar Scrum con un marco metodológico. Cualquier información adicional o valoración[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/navegapolis/2016/02/posomas-ingenieria-del-software-para-scrum"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>juan.palacio@gmail.com (Juan Palacio)</dc:creator>
    <dc:date>2016-02-14T18:34:08Z</dc:date>
  </entry>
</feed>

