<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-10-26T20:02:47Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-10-26T20:02:47Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>El patrón de diseño Observer y una forma de implementarlo en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/10/el-patron-de-diseno-observer-y-una-forma-de-implementarlo-en-java" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-10-26T21:00:00Z</updated>
    <published>2015-10-24T10:00:00Z</published>
    <content type="html">&lt;p&gt;Otro de los patrones de diseño que en algún momento nos puede ser útil es el patrón Observer. Podemos usar este patrón si tenemos la necesidad de realizar acciones como consecuencia del cambio de estado o cierta circunstancia de un objeto. El patrón Observer nos permite mantener desacoplados el objeto que emite el evento y el objeto que recibe el evento e independizar al objeto observable del número de observadores que tenga. En Java este patrón podemos implementarlo usando una clase, la clase Observable, y una interfaz, la interfaz Observer proporcionadas en el propio JDK. La clase que queremos que reciba los eventos deberá implementar la interfaz Observer y el objeto que queremos que produzca los eventos debe extender o contener una propiedad de tipo Observable. La interfaz Observer contiene[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/10/el-patron-de-diseno-observer-y-una-forma-de-implementarlo-en-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-10-24T10:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Análisis de red con Wireshark sin ser usuario ROOT.</title>
    <link rel="alternate" href="http://www.blogstack.info/post/jsitech/2015/10/analisis-de-red-con-wireshark-sin-ser-usuario-root" />
    <category term="ethical-hacking" />
    <category term="seguridad" />
    <category term="wireshark" />
    <author>
      <name>Michael Cruz Sanchez</name>
    </author>
    <updated>2015-10-26T18:57:01Z</updated>
    <published>2015-10-26T18:57:01Z</published>
    <content type="html">&lt;p&gt;Muchos ingenieros de redes se consternan la primera vez que ejecutan el analizador de trafico Wireshark en GNU/Linux al ver que no tienen acceso a las interfaces de red. Esto se debe a que, por defecto, el acceso a las interfaces de red (por ejemplo, wlan0) requiere privilegios de root (administrador). Lamentablemente, esto crea una mala practica en los administradores a correr Wireshark todo el tiempo como root. Esto conlleva a serios riesgos de seguridad. De hecho, debido a la complejidad de su protocolo, Wireshark es vulnerable al tráfico mal formado “malformed traffic“(accidental o de otro tipo), lo que puede provocar condiciones de denegación de servicio o la ejecución de código arbitrario posiblemente. Pero si no deberíamos ejecutar Wireshark con privilegios de root, ¿cómo vamos a capturar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/jsitech/2015/10/analisis-de-red-con-wireshark-sin-ser-usuario-root"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Michael Cruz Sanchez</dc:creator>
    <dc:date>2015-10-26T18:57:01Z</dc:date>
  </entry>
  <entry>
    <title>Probando Plasma 5 en Kubuntu y KaOS</title>
    <link rel="alternate" href="http://www.blogstack.info/post/lasombradelhelicoptero/2015/10/probando-plasma-5-en-kubuntu-y-kaos" />
    <category term="kubuntu" />
    <category term="kde" />
    <category term="plasma5" />
    <category term="kaos" />
    <author>
      <name>Enrique Bravo</name>
    </author>
    <updated>2015-10-26T17:20:51Z</updated>
    <published>2015-10-26T17:20:51Z</published>
    <content type="html">&lt;p&gt;Dicen por ahí que Plasma 5 ya es lo suficientemente estable para ser usado como sistema de escritorio principal. Es una afirmación que he leído en varios frentes y a varias personas, siendo el administrador de Muy Linux una de ellas. Uno, que es perro viejo, recuerda experiencias frustrantes con escritorios recién implementados: las primeras versiones de Unity en 2011, por ejemplo, que eran lamentables en casi todos los sentidos, o los primitivos KDE 4, de evidente relación con el tema que tratamos hoy. Puesto que el equipo de Chakra sigue trabajando en el limado de asperezas y puesta a punto de la nueva “iso” Fermi, a la espera de la “Release Candidate 3” me he decidido a comprobar por mí mismo el estado de madurez de Plasma 5. Lo hago, además de por la razón habitual, que no es otra que la[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/lasombradelhelicoptero/2015/10/probando-plasma-5-en-kubuntu-y-kaos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Enrique Bravo</dc:creator>
    <dc:date>2015-10-26T17:20:51Z</dc:date>
  </entry>
  <entry>
    <title>¡Mamá, salgo en Killall Radio!</title>
    <link rel="alternate" href="http://www.blogstack.info/post/kdeblog/2015/10/mama-salgo-en-killall-radio" />
    <category term="kde" />
    <category term="killall-radio" />
    <author>
      <name>baltolkien</name>
    </author>
    <updated>2015-10-26T15:07:26Z</updated>
    <published>2015-10-26T15:07:26Z</published>
    <content type="html">&lt;p&gt;“¡Mamá, salgo en Killall Radio!”. No he podido resitirme y no se me ha ocurrido nada mejor que coger prestada la frase de Victorhck dice cuando aparece mencionado en este blog. Hace uno días realicé mi segunda entrevista radiofónica ¡Mamá, salgo en Killall Radio! Y es que después de mucho tiempo detrás de mi, al final Yoyo me pilló un día tonto y nos pusimos a charlar de KDE para su magnífica emisora libre: Killall Radio. Fue el pasado domingo 11 de octubre en le que Yoyo y un servidor compartimos casi una hora hablando de Software Libre, de KDE y de KDE España. Realmente me lo pasé muy bien y espero poder repetir la experiencia pronto, y eso que tuvimos unos problemas técnicos al principio que me hicieron temer por el resultado final y de que fui “atacado” por mi hijo a mitad de grabación.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/kdeblog/2015/10/mama-salgo-en-killall-radio"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>baltolkien</dc:creator>
    <dc:date>2015-10-26T15:07:26Z</dc:date>
  </entry>
  <entry>
    <title>Implementar OpenStack con DevStack</title>
    <link rel="alternate" href="http://www.blogstack.info/post/jsitech/2015/10/implementar-openstack-con-devstack" />
    <category term="devstack" />
    <category term="openstack" />
    <author>
      <name>Jason Soto</name>
    </author>
    <updated>2015-10-26T10:00:37Z</updated>
    <published>2015-10-26T10:00:37Z</published>
    <content type="html">&lt;p&gt;Como saben estábamos siguiendo una serie de entradas donde instalabamos y configurábamos cada servicio de OpenStack manualmente, con el objetivo de conocer realmente como funciona OpenStack y como se relacionan sus componentes. Dado que me tope con un Bug en neutron tuve que detener la serie ahí hasta determinar que pasaba o esperar que el equipo detrás de OpenStack lo revise. Así que saltamos al uso de los Deployers automatizados y hoy veremos a DevStack. Luego de que veamos DevStack veremos otros deployers. Recuerden que ya tenemos un Ambiente preparado para la serie que estamos siguiendo, les recomiendo que dejen esas Vm’s por ahí ya que la idea es que continuemos con la serie hasta tener una implementación de OpenStack Funcional, y configurado Manualmente por nosotros. Con DevStack veremos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/jsitech/2015/10/implementar-openstack-con-devstack"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Jason Soto</dc:creator>
    <dc:date>2015-10-26T10:00:37Z</dc:date>
  </entry>
  <entry>
    <title>Callbacks en C++11 nuevas posibilidades para un software más potente (I)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/10/callbacks-en-c-11-nuevas-posibilidades-para-un-software-mas-potente-i" />
    <category term="metodo" />
    <category term="asignacion" />
    <category term="flexibilidad" />
    <category term="abstraccion" />
    <category term="ordenacion" />
    <category term="retrollamadas" />
    <category term="algorithm" />
    <category term="funciones" />
    <category term="cosas-que-damos-por-hechas" />
    <category term="tipo" />
    <category term="variable" />
    <category term="functional" />
    <category term="c-c" />
    <category term="function" />
    <category term="c-11" />
    <category term="c" />
    <category term="callbacks" />
    <category term="anonimas" />
    <category term="general" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-10-26T09:56:33Z</updated>
    <published>2015-10-26T09:56:33Z</published>
    <content type="html">&lt;p&gt;My beautiful picture Hace tiempo, hice una serie de posts sobre callbacks: Callbacks, retrollamadas o delegados o cómo crear código más flexible en C C++ Punteros a función miembro (pointer-to-member function) o callbacks con clase Callbacks en C++ con boost Hay algunos posts más, pero se salen del tema (y seguro que salen sugeridos más abajo). El caso es que dejé un poco el tema de lado y me gustaría retomarlo con los cambios de la especificación C++11 (vale, tenemos C++14 lista, pero la versión de 2011 es una de las que más cambios introdujeron (y que también valen para C++14). Aunque se ha escrito mucho sobre el tema, pero desde aquí quiero dar a conocer mi humilde visión. Serán una serie de posts ya que es un tema muy amplio y me gusta poner gran cantidad de ejemplos. Una variable que contiene[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/10/callbacks-en-c-11-nuevas-posibilidades-para-un-software-mas-potente-i"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-10-26T09:56:33Z</dc:date>
  </entry>
  <entry>
    <title>Enlaces interesantes 216</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/10/enlaces-interesantes-216" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-10-26T08:00:00Z</updated>
    <published>2015-10-26T08:00:00Z</published>
    <content type="html">&lt;p&gt;Ahí van los enlaces recopilados durante la semana pasada, espero que os resulten interesantes :-) .Net Inferring from “is”, part one and part two Eric Lippert Serilog - An Excellent Logging Framework Integrated With .NET Applications Andy Feng .NET Core and ASP.NET Launches a Beta Bug Bounty Program Jeffrey T. Fritz Learn Roslyn Now: Part 14 Intro to the Scripting API Josh Varty ASP.NET ASP.NET 5 MVC 6 Localization Damienbod Tag helpers in ASP.NET MVC 6 David Hayden Aurelia + VS2015: Next gen JS framework in ASP.NET 5 Nathan Allen-Wagner Integrating Visual Studio Code with dnx-watch to develop ASP.NET 5 applications Scott Hanselman OWASP #6 Preventing Sensitive Data Exposure in ASP.NET – Part 1 Max R McCarty dnx-watch - A no-compile Developer Experience Anuraj Parameswaran ASP.NET 5 updating[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/10/enlaces-interesantes-216"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-10-26T08:00:00Z</dc:date>
  </entry>
</feed>

