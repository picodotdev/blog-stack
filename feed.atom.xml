<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-10-26T16:02:46Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-10-26T16:02:46Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>¡Mamá, salgo en Killall Radio!</title>
    <link rel="alternate" href="http://www.blogstack.info/post/kdeblog/2015/10/mama-salgo-en-killall-radio" />
    <category term="kde" />
    <category term="killall-radio" />
    <author>
      <name>baltolkien</name>
    </author>
    <updated>2015-10-26T15:07:26Z</updated>
    <published>2015-10-26T15:07:26Z</published>
    <content type="html">&lt;p&gt;“¡Mamá, salgo en Killall Radio!”. No he podido resitirme y no se me ha ocurrido nada mejor que coger prestada la frase de Victorhck dice cuando aparece mencionado en este blog. Hace uno días realicé mi segunda entrevista radiofónica ¡Mamá, salgo en Killall Radio! Y es que después de mucho tiempo detrás de mi, al final Yoyo me pilló un día tonto y nos pusimos a charlar de KDE para su magnífica emisora libre: Killall Radio. Fue el pasado domingo 11 de octubre en le que Yoyo y un servidor compartimos casi una hora hablando de Software Libre, de KDE y de KDE España. Realmente me lo pasé muy bien y espero poder repetir la experiencia pronto, y eso que tuvimos unos problemas técnicos al principio que me hicieron temer por el resultado final y de que fui “atacado” por mi hijo a mitad de grabación.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/kdeblog/2015/10/mama-salgo-en-killall-radio"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>baltolkien</dc:creator>
    <dc:date>2015-10-26T15:07:26Z</dc:date>
  </entry>
  <entry>
    <title>Implementar OpenStack con DevStack</title>
    <link rel="alternate" href="http://www.blogstack.info/post/jsitech/2015/10/implementar-openstack-con-devstack" />
    <category term="devstack" />
    <category term="openstack" />
    <author>
      <name>Jason Soto</name>
    </author>
    <updated>2015-10-26T10:00:37Z</updated>
    <published>2015-10-26T10:00:37Z</published>
    <content type="html">&lt;p&gt;Como saben estábamos siguiendo una serie de entradas donde instalabamos y configurábamos cada servicio de OpenStack manualmente, con el objetivo de conocer realmente como funciona OpenStack y como se relacionan sus componentes. Dado que me tope con un Bug en neutron tuve que detener la serie ahí hasta determinar que pasaba o esperar que el equipo detrás de OpenStack lo revise. Así que saltamos al uso de los Deployers automatizados y hoy veremos a DevStack. Luego de que veamos DevStack veremos otros deployers. Recuerden que ya tenemos un Ambiente preparado para la serie que estamos siguiendo, les recomiendo que dejen esas Vm’s por ahí ya que la idea es que continuemos con la serie hasta tener una implementación de OpenStack Funcional, y configurado Manualmente por nosotros. Con DevStack veremos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/jsitech/2015/10/implementar-openstack-con-devstack"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Jason Soto</dc:creator>
    <dc:date>2015-10-26T10:00:37Z</dc:date>
  </entry>
  <entry>
    <title>Callbacks en C++11 nuevas posibilidades para un software más potente (I)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/10/callbacks-en-c-11-nuevas-posibilidades-para-un-software-mas-potente-i" />
    <category term="metodo" />
    <category term="asignacion" />
    <category term="flexibilidad" />
    <category term="abstraccion" />
    <category term="ordenacion" />
    <category term="retrollamadas" />
    <category term="algorithm" />
    <category term="funciones" />
    <category term="cosas-que-damos-por-hechas" />
    <category term="tipo" />
    <category term="variable" />
    <category term="functional" />
    <category term="c-c" />
    <category term="function" />
    <category term="c-11" />
    <category term="c" />
    <category term="callbacks" />
    <category term="anonimas" />
    <category term="general" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-10-26T09:56:33Z</updated>
    <published>2015-10-26T09:56:33Z</published>
    <content type="html">&lt;p&gt;My beautiful picture Hace tiempo, hice una serie de posts sobre callbacks: Callbacks, retrollamadas o delegados o cómo crear código más flexible en C C++ Punteros a función miembro (pointer-to-member function) o callbacks con clase Callbacks en C++ con boost Hay algunos posts más, pero se salen del tema (y seguro que salen sugeridos más abajo). El caso es que dejé un poco el tema de lado y me gustaría retomarlo con los cambios de la especificación C++11 (vale, tenemos C++14 lista, pero la versión de 2011 es una de las que más cambios introdujeron (y que también valen para C++14). Aunque se ha escrito mucho sobre el tema, pero desde aquí quiero dar a conocer mi humilde visión. Serán una serie de posts ya que es un tema muy amplio y me gusta poner gran cantidad de ejemplos. Una variable que contiene[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/10/callbacks-en-c-11-nuevas-posibilidades-para-un-software-mas-potente-i"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-10-26T09:56:33Z</dc:date>
  </entry>
  <entry>
    <title>Enlaces interesantes 216</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/10/enlaces-interesantes-216" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-10-26T08:00:00Z</updated>
    <published>2015-10-26T08:00:00Z</published>
    <content type="html">&lt;p&gt;Ahí van los enlaces recopilados durante la semana pasada, espero que os resulten interesantes :-) .Net Inferring from “is”, part one and part two Eric Lippert Serilog - An Excellent Logging Framework Integrated With .NET Applications Andy Feng .NET Core and ASP.NET Launches a Beta Bug Bounty Program Jeffrey T. Fritz Learn Roslyn Now: Part 14 Intro to the Scripting API Josh Varty ASP.NET ASP.NET 5 MVC 6 Localization Damienbod Tag helpers in ASP.NET MVC 6 David Hayden Aurelia + VS2015: Next gen JS framework in ASP.NET 5 Nathan Allen-Wagner Integrating Visual Studio Code with dnx-watch to develop ASP.NET 5 applications Scott Hanselman OWASP #6 Preventing Sensitive Data Exposure in ASP.NET – Part 1 Max R McCarty dnx-watch - A no-compile Developer Experience Anuraj Parameswaran ASP.NET 5 updating[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/10/enlaces-interesantes-216"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-10-26T08:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Todo está bajo control… ¿o no?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/victorhckinthefreeworld/2015/10/todo-esta-bajo-control-o-no" />
    <category term="artwork" />
    <category term="software-libre" />
    <author>
      <name>victorhck</name>
    </author>
    <updated>2015-10-25T12:01:41Z</updated>
    <published>2015-10-25T12:01:41Z</published>
    <content type="html">&lt;p&gt;Queridos amiguitos, en internet todo está bajo control… ¿Todo? ¡No! Una comunidad poblada por ireductibles hackers, resiste ahora y siempre al invasor, con una poción mágica que les hace invencibles… ¡El Software Libre! Haz click sobre la imagen para ampliar Bueno, pues aqui una imagen que se me ha ocurrido y que gracias a Gimp, la he podido llevar a cabo. La original como habéis adivinado pertenece a las historias de Asterix y Obelix, los irreductibles galos, creados por René Goscinny (guion) y Albert Uderzo (dibujo), a ellos pertenecen los créditos de la imagen original. Esta que he hecho yo es libre, para utilizarla o descargarla si te apetece y te gusta, con licencia copyleft. Comparte y difunde!! Cosas que se le ocurren a uno en un domingo matinal, pensando en que realmente el software[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/victorhckinthefreeworld/2015/10/todo-esta-bajo-control-o-no"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>victorhck</dc:creator>
    <dc:date>2015-10-25T12:01:41Z</dc:date>
  </entry>
  <entry>
    <title>Abridged Icon Theme, una alternativa a Breeze</title>
    <link rel="alternate" href="http://www.blogstack.info/post/kdeblog/2015/10/abridged-icon-theme-una-alternativa-a-breeze" />
    <category term="diseno" />
    <category term="abridged-icon-theme" />
    <author>
      <name>baltolkien</name>
    </author>
    <updated>2015-10-25T08:25:29Z</updated>
    <published>2015-10-25T08:25:29Z</published>
    <content type="html">&lt;p&gt;Hoy os presento Abridged Icon Theme, un tena de iconos alternativa a la colección de iconos oficial Breeze, para aquellos que no les guste el mismo o se hayan cansado ya de utilizarlo. Abridged Icon Theme, una alternativa a la colección de iconos oficial Breeze Como todo el mundo sabe, los iconos es una parte fundamental de cualquier escritorio. La Comunidad KDE es muy consciente de ello y por ello cada poco tiempo nos ofrece nuevas colecciones que espera que sea adapten a nuestros gustos. En esta ocasión la nueva colección nos llega de la mano de gnastyle2, el cual ha creado un magnífico tema de iconos para competir con los otros muchos que existen para Plasma. Básicamente se trata Abridge Icon Theme, una colección de iconos planos, lisos, sencillos y colorido, que mantienen alto el nivel[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/kdeblog/2015/10/abridged-icon-theme-una-alternativa-a-breeze"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>baltolkien</dc:creator>
    <dc:date>2015-10-25T08:25:29Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño Observer y una forma de implementarlo en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/10/ejemplo-del-patron-de-diseno-observer-y-una-forma-de-implementarlo-en-java" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-10-24T21:00:00Z</updated>
    <published>2015-10-24T10:00:00Z</published>
    <content type="html">&lt;p&gt;Otro de los patrones de diseño que en algún momento nos puede ser útil es el patrón Observer. Podemos usar este patrón si tenemos la necesidad de realizar acciones como consecuencia del cambio de estado o cierta circunstancia de un objeto. El patrón Observer nos permite mantener desacoplados el objeto que emite el evento y el objeto que recibe el evento e independizar al objeto observable del número de observadores que tenga. En Java este patrón podemos implementarlo usando una clase, la clase Observable, y una interfaz, la interfaz Observer proporcionadas en el propio JDK. La clase que queremos que reciba los eventos deberá implementar la interfaz Observer y el objeto que queremos que produzca los eventos debe extender o contener una propiedad de tipo Observable. La interfaz Observer contiene[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/10/ejemplo-del-patron-de-diseno-observer-y-una-forma-de-implementarlo-en-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-10-24T10:00:00Z</dc:date>
  </entry>
</feed>

