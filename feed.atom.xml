<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2016-01-24T18:02:17Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2016-01-24T18:02:17Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Añadir o eliminar encabezados de respuesta en ASP.NET Core y Core MVC</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/12/anadir-o-eliminar-encabezados-de-respuesta-en-asp-net-core-y-core-mvc" />
    <category term="aspnetcore" />
    <category term="aspnetcore-mvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2016-01-24T17:53:47Z</updated>
    <published>2015-12-22T08:00:00Z</published>
    <content type="html">&lt;p&gt;A veces, en nuestras aplicaciones ASP.NET Core y MVC puede ser interesante manipular los encabezados retornados desde el servidor al cliente en todas las peticiones, ya sea añadiendo información personalizada o eliminando encabezados generados por otros componentes o middlewares que participan en el proceso de la petición. Un ejemplo muy típico puede ser la eliminación del header "Server" para no dar pistas sobre el software usado en el servidor, que, como se comentaba en la propia RFC del protocolo, " podría hacer nuestro servidor más vulnerable a ataques". Obviamente, el tratarse de una tarea absolutamente transversal e independiente de las aplicaciones en las que vayamos a aplicar esta técnica, es la misión ideal para un middleware personalizado. Así pues, crearemos un componente de este[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/12/anadir-o-eliminar-encabezados-de-respuesta-en-asp-net-core-y-core-mvc"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-12-22T08:00:00Z</dc:date>
  </entry>
  <entry>
    <title>AngularJs paso a paso en 10 videos cortos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/unasinfoniadecsharp/2016/01/angularjs-paso-a-paso-en-1-videos-cortos" />
    <category term="channel9" />
    <category term="javascript" />
    <category term="angujarjs" />
    <author>
      <name>leonardo</name>
    </author>
    <updated>2016-01-24T15:01:00Z</updated>
    <published>2016-01-24T15:01:00Z</published>
    <content type="html">&lt;p&gt;Alentado por la posibilidad con la que contamos ahora los MVPs, hice una serie de videos sobre AngularJs de corta duración (entre 3  y 7 minutos) sobre los temás que considero más importantes. Acá van los links: Introducción a AngularJs Inicialización Modelo Controller Iteraciones Eventos Filtros Servicios Rutas Directivas AJAX y promesas Nos leemos![...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/unasinfoniadecsharp/2016/01/angularjs-paso-a-paso-en-1-videos-cortos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>leonardo</dc:creator>
    <dc:date>2016-01-24T15:01:00Z</dc:date>
  </entry>
  <entry>
    <title>Creación de enlaces con tag helpers de Core MVC</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/10/creacion-de-enlaces-con-tag-helpers-de-core-mvc" />
    <category term="aspnetcoremvc" />
    <category term="aspnetcore" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2016-01-24T13:33:54Z</updated>
    <published>2015-10-14T06:45:00Z</published>
    <content type="html">&lt;p&gt;Hace unos días hablamos de los tag helpers, esa interesante novedad de Core MVC  destinada a mejorar la legibilidad de nuestras vistas. Comentamos los que traía de serie el framework, y vimos por encima algunos ejemplos para hacernos una idea. Hoy vamos a ver en profundidad uno de estos helpers, AnchorTagHelper, cuya misión es facilitarnos la creación de enlaces a controladores/acciones de nuestra aplicación. Para hacer más sencilla su comprensión, lo haremos mediante casos prácticos, y comparando cada ejemplo con la fórmulas que hemos usado tradicionalmente y que seguro conocéis, los helpers HTML. &lt;warning&gt;ASP.NET aún se encuentra en desarrollo, por lo que detalles de lo que contemos por aquí aún podrían variar en la versión final&lt;/warning&gt; 1. Enlace especificando controlador y acciónLa sintaxis[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/10/creacion-de-enlaces-con-tag-helpers-de-core-mvc"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-10-14T06:45:00Z</dc:date>
  </entry>
  <entry>
    <title>ASP.NET Core ¿dónde está mi &lt;customErrors&gt;?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/11/asp-net-core-donde-esta-mi-customerrors" />
    <category term="aspnetcore" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2016-01-24T13:32:14Z</updated>
    <published>2015-11-17T07:55:00Z</published>
    <content type="html">&lt;p&gt;Seguro que ya conocéis la respuesta: no está. Desapareció. Kaput. Es simplemente otro de los efectos colaterales derivados de los cambios en ASP.NET Core, y más concretamente, de la sustitución del archivo web.config por otros mecanismos de configuración. Sin embargo, seguro que también estaréis de acuerdo en que era una característica sumamente interesante porque nos permitía configurar el comportamiento de nuestra aplicación cuando se producía un error inesperado. Jugando un poco con la configuración podíamos optar por mostrar valiosa información de depuración, como datos sobre la excepción lanzada, el punto exacto donde se produjo o la pila de ejecución, o bien páginas de error personalizadas con mensajes aptos para todos los públicos (como la ballenita voladora de Twitter u otras creativas[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/11/asp-net-core-donde-esta-mi-customerrors"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-11-17T07:55:00Z</dc:date>
  </entry>
  <entry>
    <title>Cacheo de porciones de vistas en ASP.NET Core MVC</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/10/cacheo-de-porciones-de-vistas-en-asp-net-core-mvc" />
    <category term="aspnetcore" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2016-01-24T13:31:27Z</updated>
    <published>2015-10-20T07:00:00Z</published>
    <content type="html">&lt;p&gt;Está claro que uno de los secretos para la creación de aplicaciones web de alto rendimiento es el uso apropiado del caché, y por esta razón todos los frameworks incorporan herramientas que hacen posible almacenar información que pueda ser reutilizadas para acelerar la respuesta de peticiones posteriores, como porciones de página o resultados de procesos costosos. En ASP.NET 4.x y anteriores, siempre podíamos acceder a objeto Cache disponible en el contexto de la petición, o a los componentes presentes en System.Web.Caching y crear nuestras soluciones personalizadas, pero realmente MVC no aportaba más ayudas de serie que el filtro [OutputCache]. Su objetivo era cachear el resultado de acciones durante un tiempo determinado y reutilizarlo en peticiones siguientes, lo que era suficiente para muchos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/10/cacheo-de-porciones-de-vistas-en-asp-net-core-mvc"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-10-20T07:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Obtener la última excepción producida en ASP.NET Core</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/11/obtener-la-ultima-excepcion-producida-en-asp-net-core" />
    <category term="trucos" />
    <category term="aspnetcoremvc" />
    <category term="aspnetcore" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2016-01-24T13:29:46Z</updated>
    <published>2015-11-24T14:05:00Z</published>
    <content type="html">&lt;p&gt;Hace unos días comentábamos la desaparición de la sección &lt;customErrors&gt; en ASP.NET Core, y la forma de implementar páginas de error personalizadas en esta nueva versión del framework. Sin embargo, hay una cosa que dejé en el tintero y que el amigo Max resaltó en los comentarios del post: "[…] Cuando se hace la petición interna a la acción HomeController.Error ¿como puedo saber exactamente el error que se ha producido si quiero mostrar un mensaje de error concreto para cada caso? Por ejemplo imagínate que quiero mostrar vistas diferentes para cada tipo de excepción o que aparezca sólo el texto de la excepción pero sin mostrar más datos" En otras palabras, cuando el middleware ExceptionHandlerMiddleware pasa el control a la acción que procesará el error, ¿cómo podemos obtener información sobre[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/11/obtener-la-ultima-excepcion-producida-en-asp-net-core"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-11-24T14:05:00Z</dc:date>
  </entry>
  <entry>
    <title>Slides sobre ASP.NET Core y ASP.NET Core MVC de Reconnect()</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/12/slides-sobre-asp-net-core-y-asp-net-core-mvc-de-reconnect" />
    <category term="aspnetcoremvc" />
    <category term="aspnetcore" />
    <category term="eventos" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2016-01-24T13:28:39Z</updated>
    <published>2015-12-16T08:10:00Z</published>
    <content type="html">&lt;p&gt;El pasado jueves, el grupo de usuarios Cartuja.NET organizamos en Sevilla el evento Reconnect(), una mañana completa durante la cual vimos las últimas novedades de tecnologías y herramientas relacionadas con .NET. Lo primero, agradecer a los numerosos asistentes que aparcaron sus quehaceres diarios para pasar la jornada con nosotros; espero que os haya resultado interesante. Muchas gracias también a los amigos de Plain Concepts por patrocinar el evento, y a mi inigualable compañero de escenario, Javier Suárez, por gestionarlo todo tan bien y, por supuesto, por sus interesantes presentaciones. En mi sesión, cerca de hora y media que los asistentes aguantaron como jabatos, tratamos primero los motivos que han llevado a la construcción del nuevo stack de desarrollo para la web de Microsoft. Tras[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/12/slides-sobre-asp-net-core-y-asp-net-core-mvc-de-reconnect"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-12-16T08:10:00Z</dc:date>
  </entry>
</feed>

