/**
 * This class is generated by jOOQ
 */
package info.blogstack.persistence.jooq.tables;


import info.blogstack.persistence.jooq.Blogstack;
import info.blogstack.persistence.jooq.Keys;
import info.blogstack.persistence.jooq.tables.records.SourceRecord;
import info.blogstack.persistence.records.DateTimeConverter;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.joda.time.DateTime;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Source extends TableImpl<SourceRecord> {

	private static final long serialVersionUID = 1329258863;

	/**
	 * The reference instance of <code>BLOGSTACK.SOURCE</code>
	 */
	public static final Source SOURCE = new Source();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SourceRecord> getRecordType() {
		return SourceRecord.class;
	}

	/**
	 * The column <code>BLOGSTACK.SOURCE.ID</code>.
	 */
	public final TableField<SourceRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.CREATIONDATE</code>.
	 */
	public final TableField<SourceRecord, DateTime> CREATIONDATE = createField("CREATIONDATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateTimeConverter());

	/**
	 * The column <code>BLOGSTACK.SOURCE.UPDATEDATE</code>.
	 */
	public final TableField<SourceRecord, DateTime> UPDATEDATE = createField("UPDATEDATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateTimeConverter());

	/**
	 * The column <code>BLOGSTACK.SOURCE.NAME</code>.
	 */
	public final TableField<SourceRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.ALIAS</code>.
	 */
	public final TableField<SourceRecord, String> ALIAS = createField("ALIAS", org.jooq.impl.SQLDataType.VARCHAR.length(32), this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.PAGEURL</code>.
	 */
	public final TableField<SourceRecord, String> PAGEURL = createField("PAGEURL", org.jooq.impl.SQLDataType.VARCHAR.length(2048), this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.URL</code>.
	 */
	public final TableField<SourceRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR.length(2048), this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.AUTHOR</code>.
	 */
	public final TableField<SourceRecord, String> AUTHOR = createField("AUTHOR", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.EMAIL</code>.
	 */
	public final TableField<SourceRecord, String> EMAIL = createField("EMAIL", org.jooq.impl.SQLDataType.VARCHAR.length(128), this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.DISQUSSHORTNAME</code>.
	 */
	public final TableField<SourceRecord, String> DISQUSSHORTNAME = createField("DISQUSSHORTNAME", org.jooq.impl.SQLDataType.VARCHAR.length(32), this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.ADSENSE_ID</code>.
	 */
	public final TableField<SourceRecord, Long> ADSENSE_ID = createField("ADSENSE_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.IMPORTSOURCE_ID</code>.
	 */
	public final TableField<SourceRecord, Long> IMPORTSOURCE_ID = createField("IMPORTSOURCE_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>BLOGSTACK.SOURCE.ENABLED</code>.
	 */
	public final TableField<SourceRecord, Boolean> ENABLED = createField("ENABLED", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

	/**
	 * Create a <code>BLOGSTACK.SOURCE</code> table reference
	 */
	public Source() {
		this("SOURCE", null);
	}

	/**
	 * Create an aliased <code>BLOGSTACK.SOURCE</code> table reference
	 */
	public Source(String alias) {
		this(alias, SOURCE);
	}

	private Source(String alias, Table<SourceRecord> aliased) {
		this(alias, aliased, null);
	}

	private Source(String alias, Table<SourceRecord> aliased, Field<?>[] parameters) {
		super(alias, Blogstack.BLOGSTACK, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SourceRecord, Long> getIdentity() {
		return Keys.IDENTITY_SOURCE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SourceRecord> getPrimaryKey() {
		return Keys.PK_SOURCE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SourceRecord>> getKeys() {
		return Arrays.<UniqueKey<SourceRecord>>asList(Keys.PK_SOURCE, Keys.CONSTRAINT_9, Keys.CONSTRAINT_92);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<SourceRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<SourceRecord, ?>>asList(Keys.SOURCE_ADSENSE_ID, Keys.SOURCE_IMPORTSOURCE_ID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Source as(String alias) {
		return new Source(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Source rename(String name) {
		return new Source(name, null);
	}
}
