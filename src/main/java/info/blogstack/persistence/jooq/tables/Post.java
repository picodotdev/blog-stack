/**
 * This class is generated by jOOQ
 */
package info.blogstack.persistence.jooq.tables;


import info.blogstack.persistence.jooq.Blogstack;
import info.blogstack.persistence.jooq.Keys;
import info.blogstack.persistence.jooq.tables.records.PostRecord;
import info.blogstack.persistence.records.DateTimeConverter;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.joda.time.DateTime;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Post extends TableImpl<PostRecord> {

	private static final long serialVersionUID = 1917316692;

	/**
	 * The reference instance of <code>BLOGSTACK.POST</code>
	 */
	public static final Post POST = new Post();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PostRecord> getRecordType() {
		return PostRecord.class;
	}

	/**
	 * The column <code>BLOGSTACK.POST.ID</code>.
	 */
	public final TableField<PostRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>BLOGSTACK.POST.CREATIONDATE</code>.
	 */
	public final TableField<PostRecord, DateTime> CREATIONDATE = createField("CREATIONDATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateTimeConverter());

	/**
	 * The column <code>BLOGSTACK.POST.UPDATEDATE</code>.
	 */
	public final TableField<PostRecord, DateTime> UPDATEDATE = createField("UPDATEDATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateTimeConverter());

	/**
	 * The column <code>BLOGSTACK.POST.PUBLISHDATE</code>.
	 */
	public final TableField<PostRecord, DateTime> PUBLISHDATE = createField("PUBLISHDATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateTimeConverter());

	/**
	 * The column <code>BLOGSTACK.POST.DATE</code>.
	 */
	public final TableField<PostRecord, DateTime> DATE = createField("DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateTimeConverter());

	/**
	 * The column <code>BLOGSTACK.POST.URL</code>.
	 */
	public final TableField<PostRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR.length(2048), this, "");

	/**
	 * The column <code>BLOGSTACK.POST.HASH</code>.
	 */
	public final TableField<PostRecord, String> HASH = createField("HASH", org.jooq.impl.SQLDataType.VARCHAR.length(24), this, "");

	/**
	 * The column <code>BLOGSTACK.POST.TITLE</code>.
	 */
	public final TableField<PostRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

	/**
	 * The column <code>BLOGSTACK.POST.AUTHOR</code>.
	 */
	public final TableField<PostRecord, String> AUTHOR = createField("AUTHOR", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

	/**
	 * The column <code>BLOGSTACK.POST.CONTENTCOMPRESSED</code>.
	 */
	public final TableField<PostRecord, byte[]> CONTENTCOMPRESSED = createField("CONTENTCOMPRESSED", org.jooq.impl.SQLDataType.BLOB, this, "");

	/**
	 * The column <code>BLOGSTACK.POST.INDEXATION_ID</code>.
	 */
	public final TableField<PostRecord, Long> INDEXATION_ID = createField("INDEXATION_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>BLOGSTACK.POST.SOURCE_ID</code>.
	 */
	public final TableField<PostRecord, Long> SOURCE_ID = createField("SOURCE_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>BLOGSTACK.POST.VISIBLE</code>.
	 */
	public final TableField<PostRecord, Boolean> VISIBLE = createField("VISIBLE", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

	/**
	 * The column <code>BLOGSTACK.POST.SHARED</code>.
	 */
	public final TableField<PostRecord, Boolean> SHARED = createField("SHARED", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

	/**
	 * The column <code>BLOGSTACK.POST.NEWSLETTER_ID</code>.
	 */
	public final TableField<PostRecord, Long> NEWSLETTER_ID = createField("NEWSLETTER_ID", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>BLOGSTACK.POST</code> table reference
	 */
	public Post() {
		this("POST", null);
	}

	/**
	 * Create an aliased <code>BLOGSTACK.POST</code> table reference
	 */
	public Post(String alias) {
		this(alias, POST);
	}

	private Post(String alias, Table<PostRecord> aliased) {
		this(alias, aliased, null);
	}

	private Post(String alias, Table<PostRecord> aliased, Field<?>[] parameters) {
		super(alias, Blogstack.BLOGSTACK, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PostRecord, Long> getIdentity() {
		return Keys.IDENTITY_POST;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PostRecord> getPrimaryKey() {
		return Keys.PK_POST;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PostRecord>> getKeys() {
		return Arrays.<UniqueKey<PostRecord>>asList(Keys.PK_POST, Keys.CONSTRAINT_2);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<PostRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<PostRecord, ?>>asList(Keys.POST_INDEXATION_ID, Keys.POST_SOURCE_ID, Keys.POST_NEWSLETTER_ID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Post as(String alias) {
		return new Post(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Post rename(String name) {
		return new Post(name, null);
	}
}
