<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-04-21T10:02:30Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-04-21T10:02:30Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Creando un modelo sencillo en Magento (paso a paso y con ejemplos)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/04/creando-un-modelo-sencillo-en-magento-paso-a-paso-y-con-ejemplos" />
    <category term="upgrade" />
    <category term="install" />
    <category term="php" />
    <category term="utilizacion" />
    <category term="recursos" />
    <category term="mysql" />
    <category term="datos" />
    <category term="sql" />
    <category term="sistema" />
    <category term="conexion" />
    <category term="creacion" />
    <category term="mvc" />
    <category term="base" />
    <category term="colecciones" />
    <category term="instalacion" />
    <category term="orm" />
    <category term="actualizacion" />
    <category term="general" />
    <category term="modelo" />
    <category term="magento" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-04-21T08:51:50Z</updated>
    <published>2015-04-21T08:51:50Z</published>
    <content type="html">&lt;p&gt;Anteriormente vimos cómo crear un plugin para Magento y cómo crear un controlador para Magento. Ahora le toca el turno al modelo. Intentaré poner con todo detalle todo el proceso. Por eso, vamos a editar app/code/local/NuestraEmpresa/nuestroPlugin/etc/config.xml, en nuestro ejemplo app/code/local/Poesia/HolaMundo/etc/config.xml para indicar que vamos a crear modelos y las conexiones de base de datos que se deben utilizar para el acceso. He pegado el archivo entero, pero indico con un comentario las novedades: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 &lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!-- Opcionalmente podemos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/04/creando-un-modelo-sencillo-en-magento-paso-a-paso-y-con-ejemplos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-04-21T08:51:50Z</dc:date>
  </entry>
  <entry>
    <title>Creando un controlador en Magento (paso a paso)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/04/creando-un-controlador-en-magento-paso-a-paso" />
    <category term="vista" />
    <category term="crear" />
    <category term="php" />
    <category term="acciones" />
    <category term="online" />
    <category term="plantilla" />
    <category term="xml" />
    <category term="empresa" />
    <category term="mvc" />
    <category term="action" />
    <category term="controller" />
    <category term="general" />
    <category term="modelo" />
    <category term="tienda" />
    <category term="renderlayout" />
    <category term="disposicion" />
    <category term="layout" />
    <category term="opciones" />
    <category term="configurar" />
    <category term="loadlayout" />
    <category term="controlador" />
    <category term="modulo" />
    <category term="camelcase" />
    <category term="nombres" />
    <category term="frontend" />
    <category term="minusculas" />
    <category term="magento" />
    <category term="plugin" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-04-13T08:05:40Z</updated>
    <published>2015-04-13T08:05:40Z</published>
    <content type="html">&lt;p&gt;Hace un tiempo comentábamos cómo crear un plugin para Magento. Ahora, vamos a completar ese plugin creando un controlador (y nos metermos ligeramente con las plantillas) para crear algo funcional dentro de nuestra instalación de Magento. Antes de nada, advertir que el tema de las mayúsculas y minúsculas tanto en nombres de archivos como nombres de módulos es un poco delicado, por lo que si queremos curarnos en salud, debemos elegir un nombre lo más sencillo posible. Y, sobre todo, mientras estés trabajando desactiva cachés o, al menos, bórralos a menudo. Vamos a estar haciendo cambios constantemente y tal vez no aparezcan por eso. Creando un controlador Esta es la parte más sencilla. Sólo tenemos que crear en el directorio de nuestro plugin el directorio “controllers” en minúscula. Si en el[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/04/creando-un-controlador-en-magento-paso-a-paso"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-04-13T08:05:40Z</dc:date>
  </entry>
  <entry>
    <title>Borrar la caché de Magento desde la línea de comandos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/borrar-la-cache-de-magento-desde-la-linea-de-comandos" />
    <category term="linea" />
    <category term="borrar" />
    <category term="comandos" />
    <category term="consola" />
    <category term="php" />
    <category term="programar" />
    <category term="productos" />
    <category term="actualizar" />
    <category term="cron" />
    <category term="script" />
    <category term="terminal" />
    <category term="magento" />
    <category term="cache" />
    <category term="cli" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-20T09:19:18Z</updated>
    <published>2015-03-20T09:19:18Z</published>
    <content type="html">&lt;p&gt;Foto: Steve Jurvetson (Flickr CC) Cuando estás haciendo muchos cambios en una instalación de Magento, debes borrar la caché a menudo. Un caso especial es si utilizas scripts periódicos para actualizar listas de precios o stock, en ese caso debes programar también el borrado de cachés. Este pequeño script ha sido visto en muchas webs por lo que no me extenderé mucho y mencionaré dos fuentes donde podéis consultarlo (os invito a visitar estas páginas porque amplían la información que veis aquí). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &lt;?php echo "Start Cleaning all caches at ... " . date("Y-m-d H:i:s") . "\n\n"; ini_set("display_errors", 1); require '../app/Mage.php'; Mage::app('admin')-&gt;setUseSessionInUrl(false); Mage::getConfig()-&gt;init(); $types = Mage::app()-&gt;getCacheInstance()-&gt;getTypes();[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/borrar-la-cache-de-magento-desde-la-linea-de-comandos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-20T09:19:18Z</dc:date>
  </entry>
  <entry>
    <title>Cómo encontrar la ruta de un elemento dentro de una jerarquía en PHP</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/como-encontrar-la-ruta-de-un-elemento-dentro-de-una-jerarquia-en-php" />
    <category term="ruta" />
    <category term="php" />
    <category term="nusqueda" />
    <category term="arriba" />
    <category term="padre" />
    <category term="buscar" />
    <category term="linares" />
    <category term="breadcrumb" />
    <category term="jerarquia" />
    <category term="findpath" />
    <category term="hijo" />
    <category term="provincias" />
    <category term="malaga" />
    <category term="encontrar" />
    <category term="jaen" />
    <category term="pagina" />
    <category term="buildtree" />
    <category term="camino" />
    <category term="arbol" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-16T09:31:53Z</updated>
    <published>2015-03-16T09:31:53Z</published>
    <content type="html">&lt;p&gt;Hace poco, hablábamos de cómo generar un array que contuviera una jerarquía de elementos, vimos cómo podíamos generarlo de forma muy rápida una vez tenemos todos los elementos en una lista en la que previamente indicamos el padre de cada uno de ellos. El problema hoy es algo distinto, tenemos esa jerarquía o árbol, y queremos encontrar la ruta hacia arriba, es decir, todos los elementos por los que tenemos que pasar para llegar hasta un elemento dado. Puede ser útil cuando estén visitando nuestra página y accedan a algún elemento interior tras el cual queremos mostrar unas migas de pan o breadcrumbs (para ello tenemos que saber todo lo que hay por encima de la categoría actual). Como ejemplo, vamos a hacer una jerarquía con paises / comunidades autónomas / provincias / ciudades y vamos a buscar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/como-encontrar-la-ruta-de-un-elemento-dentro-de-una-jerarquia-en-php"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-16T09:31:53Z</dc:date>
  </entry>
  <entry>
    <title>Magento: insertar bloques CMS dentro de nuestras plantillas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/magento-insertar-bloques-cms-dentro-de-nuestras-plantillas" />
    <category term="usuarios" />
    <category term="flexibilidad" />
    <category term="php" />
    <category term="cms" />
    <category term="plantilla" />
    <category term="magento" />
    <category term="bloque" />
    <category term="empotrar" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-09T09:28:36Z</updated>
    <published>2015-03-09T09:28:36Z</published>
    <content type="html">&lt;p&gt;Para dar flexibilidad a nuestros desarrollos con Magento y con el fin de permitir a los usuarios administradores cambiar fácilmente el contenido de su tienda hecha con Magento. Una buena opción es facilitar bloques estáticos de CMS dentro de nuestras plantillas. Por ejemplo, podemos empotrar un texto dedicado a la manipulación y al envío dentro de cada producto; o, es más, podemos tener varios modelos de bloques de manipulación y envío y que sea un atributo del artículo el que decida qué bloque mostrar. Para introducir un bloque MS dentro de nuestra plantilla tendremos que hacer: 1 echo $this-&gt;getLayout()-&gt;createBlock('cms/block')-&gt;setBlockId('identificador-de-bloque')-&gt;toHtml() La entrada Magento: insertar bloques CMS dentro de nuestras plantillas aparece primero en Poesía Binaria.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/magento-insertar-bloques-cms-dentro-de-nuestras-plantillas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-09T09:28:36Z</dc:date>
  </entry>
  <entry>
    <title>Magento: Conocer qué página de CMS se está visualizando ahora mismo</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/magento-conocer-que-pagina-de-cms-se-esta-visualizando-ahora-mismo" />
    <category term="controlador" />
    <category term="principal" />
    <category term="identificador" />
    <category term="php" />
    <category term="pagina" />
    <category term="cms" />
    <category term="plantilla" />
    <category term="magento" />
    <category term="template" />
    <category term="home" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-02T10:14:42Z</updated>
    <published>2015-03-02T10:14:42Z</published>
    <content type="html">&lt;p&gt;Puede ser muy útil, sobre todo cuando estamos creando o modificando las plantillas principales de nuestro tema en Magento saber si la página actual se trata de una página de CMS. Esto lo podemos saber muy fácilmente con: 1 $route = Mage:app()-&gt;getRequest()-&gt;getRouteName(); La variable route tendrá el valor “cms” si se trata de una página CMS, o podrá obtener el valor de la ruta del controlador actual (dependiendo de si estamos en el carrito, página de categoría, producto, dentro de un plugin, etc). En el caso que sea una página CMS podremos preguntar también el identificador que se está visualizando con: 1 $ident = Mage::getSingleton('cms/page')-&gt;getIdentifier(); Dependiendo de la ruta donde estemos, podremos llamar a un método o a otro. Ahora, juntándolo todo: 1 2 if (Mage:app()-&gt;getRequest()-&gt;getRouteName()[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/magento-conocer-que-pagina-de-cms-se-esta-visualizando-ahora-mismo"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-02T10:14:42Z</dc:date>
  </entry>
  <entry>
    <title>Magento: Saber si estamos en la página principal (home page)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/02/magento-saber-si-estamos-en-la-pagina-principal-home-page" />
    <category term="html" />
    <category term="conocer" />
    <category term="principal" />
    <category term="php" />
    <category term="pagina" />
    <category term="getishomepage" />
    <category term="plantilla" />
    <category term="inicio" />
    <category term="magento" />
    <category term="bloque" />
    <category term="home" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-02-23T09:57:34Z</updated>
    <published>2015-02-23T09:57:34Z</published>
    <content type="html">&lt;p&gt;Cuando estamos trabajando con Magento, en ocasiones necesitamos conocer si actualmente nos encontramos en la home de nuestro sitio o en cualquier otra página. Normalmente, la home, tendrá un diseño diferente y por eso debemos diferenciarla de las demás. Para ello, desde Magento 1.5+ tenemos una función que nos puede ayudar mucho en esta misión. Si nos encontramos en el header.phtml podemos comprobarlo llamando a: GeSHi Error: GeSHi could not find the language cc (using path /home/gaspy/www/totaki.com/www/poesiabinaria/wp-content/plugins/codecolorer/lib/geshi/) (code 2) Pero si nos encontramos en cualquier otra plantilla, tenemos que llamar a esa misma función que se encuentra en el header, para ello obtenemos el singleton del header y se lo preguntamos: GeSHi Error: GeSHi could not find the[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/02/magento-saber-si-estamos-en-la-pagina-principal-home-page"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-02-23T09:57:34Z</dc:date>
  </entry>
</feed>

