<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-03-30T18:00:37Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-03-30T18:00:37Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Borrar la caché de Magento desde la línea de comandos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/borrar-la-cache-de-magento-desde-la-linea-de-comandos" />
    <category term="linea" />
    <category term="borrar" />
    <category term="comandos" />
    <category term="consola" />
    <category term="php" />
    <category term="programar" />
    <category term="productos" />
    <category term="actualizar" />
    <category term="cron" />
    <category term="script" />
    <category term="terminal" />
    <category term="magento" />
    <category term="cache" />
    <category term="cli" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-20T09:19:18Z</updated>
    <published>2015-03-20T09:19:18Z</published>
    <content type="html">&lt;p&gt;Foto: Steve Jurvetson (Flickr CC) Cuando estás haciendo muchos cambios en una instalación de Magento, debes borrar la caché a menudo. Un caso especial es si utilizas scripts periódicos para actualizar listas de precios o stock, en ese caso debes programar también el borrado de cachés. Este pequeño script ha sido visto en muchas webs por lo que no me extenderé mucho y mencionaré dos fuentes donde podéis consultarlo (os invito a visitar estas páginas porque amplían la información que veis aquí). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 &lt;?php echo "Start Cleaning all caches at ... " . date("Y-m-d H:i:s") . "\n\n"; ini_set("display_errors", 1); require '../app/Mage.php'; Mage::app('admin')-&gt;setUseSessionInUrl(false); Mage::getConfig()-&gt;init(); $types = Mage::app()-&gt;getCacheInstance()-&gt;getTypes();[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/borrar-la-cache-de-magento-desde-la-linea-de-comandos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-20T09:19:18Z</dc:date>
  </entry>
  <entry>
    <title>Cómo encontrar la ruta de un elemento dentro de una jerarquía en PHP</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/como-encontrar-la-ruta-de-un-elemento-dentro-de-una-jerarquia-en-php" />
    <category term="ruta" />
    <category term="php" />
    <category term="nusqueda" />
    <category term="arriba" />
    <category term="padre" />
    <category term="buscar" />
    <category term="linares" />
    <category term="breadcrumb" />
    <category term="jerarquia" />
    <category term="findpath" />
    <category term="hijo" />
    <category term="provincias" />
    <category term="malaga" />
    <category term="encontrar" />
    <category term="jaen" />
    <category term="pagina" />
    <category term="buildtree" />
    <category term="camino" />
    <category term="arbol" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-16T09:31:53Z</updated>
    <published>2015-03-16T09:31:53Z</published>
    <content type="html">&lt;p&gt;Hace poco, hablábamos de cómo generar un array que contuviera una jerarquía de elementos, vimos cómo podíamos generarlo de forma muy rápida una vez tenemos todos los elementos en una lista en la que previamente indicamos el padre de cada uno de ellos. El problema hoy es algo distinto, tenemos esa jerarquía o árbol, y queremos encontrar la ruta hacia arriba, es decir, todos los elementos por los que tenemos que pasar para llegar hasta un elemento dado. Puede ser útil cuando estén visitando nuestra página y accedan a algún elemento interior tras el cual queremos mostrar unas migas de pan o breadcrumbs (para ello tenemos que saber todo lo que hay por encima de la categoría actual). Como ejemplo, vamos a hacer una jerarquía con paises / comunidades autónomas / provincias / ciudades y vamos a buscar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/como-encontrar-la-ruta-de-un-elemento-dentro-de-una-jerarquia-en-php"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-16T09:31:53Z</dc:date>
  </entry>
  <entry>
    <title>Magento: insertar bloques CMS dentro de nuestras plantillas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/magento-insertar-bloques-cms-dentro-de-nuestras-plantillas" />
    <category term="usuarios" />
    <category term="flexibilidad" />
    <category term="php" />
    <category term="cms" />
    <category term="plantilla" />
    <category term="magento" />
    <category term="bloque" />
    <category term="empotrar" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-09T09:28:36Z</updated>
    <published>2015-03-09T09:28:36Z</published>
    <content type="html">&lt;p&gt;Para dar flexibilidad a nuestros desarrollos con Magento y con el fin de permitir a los usuarios administradores cambiar fácilmente el contenido de su tienda hecha con Magento. Una buena opción es facilitar bloques estáticos de CMS dentro de nuestras plantillas. Por ejemplo, podemos empotrar un texto dedicado a la manipulación y al envío dentro de cada producto; o, es más, podemos tener varios modelos de bloques de manipulación y envío y que sea un atributo del artículo el que decida qué bloque mostrar. Para introducir un bloque MS dentro de nuestra plantilla tendremos que hacer: 1 echo $this-&gt;getLayout()-&gt;createBlock('cms/block')-&gt;setBlockId('identificador-de-bloque')-&gt;toHtml() La entrada Magento: insertar bloques CMS dentro de nuestras plantillas aparece primero en Poesía Binaria.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/magento-insertar-bloques-cms-dentro-de-nuestras-plantillas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-09T09:28:36Z</dc:date>
  </entry>
  <entry>
    <title>Magento: Conocer qué página de CMS se está visualizando ahora mismo</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/magento-conocer-que-pagina-de-cms-se-esta-visualizando-ahora-mismo" />
    <category term="controlador" />
    <category term="principal" />
    <category term="identificador" />
    <category term="php" />
    <category term="pagina" />
    <category term="cms" />
    <category term="plantilla" />
    <category term="magento" />
    <category term="template" />
    <category term="home" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-02T10:14:42Z</updated>
    <published>2015-03-02T10:14:42Z</published>
    <content type="html">&lt;p&gt;Puede ser muy útil, sobre todo cuando estamos creando o modificando las plantillas principales de nuestro tema en Magento saber si la página actual se trata de una página de CMS. Esto lo podemos saber muy fácilmente con: 1 $route = Mage:app()-&gt;getRequest()-&gt;getRouteName(); La variable route tendrá el valor “cms” si se trata de una página CMS, o podrá obtener el valor de la ruta del controlador actual (dependiendo de si estamos en el carrito, página de categoría, producto, dentro de un plugin, etc). En el caso que sea una página CMS podremos preguntar también el identificador que se está visualizando con: 1 $ident = Mage::getSingleton('cms/page')-&gt;getIdentifier(); Dependiendo de la ruta donde estemos, podremos llamar a un método o a otro. Ahora, juntándolo todo: 1 2 if (Mage:app()-&gt;getRequest()-&gt;getRouteName()[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/magento-conocer-que-pagina-de-cms-se-esta-visualizando-ahora-mismo"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-02T10:14:42Z</dc:date>
  </entry>
  <entry>
    <title>Magento: Saber si estamos en la página principal (home page)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/02/magento-saber-si-estamos-en-la-pagina-principal-home-page" />
    <category term="html" />
    <category term="conocer" />
    <category term="principal" />
    <category term="php" />
    <category term="pagina" />
    <category term="getishomepage" />
    <category term="plantilla" />
    <category term="inicio" />
    <category term="magento" />
    <category term="bloque" />
    <category term="home" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-02-23T09:57:34Z</updated>
    <published>2015-02-23T09:57:34Z</published>
    <content type="html">&lt;p&gt;Cuando estamos trabajando con Magento, en ocasiones necesitamos conocer si actualmente nos encontramos en la home de nuestro sitio o en cualquier otra página. Normalmente, la home, tendrá un diseño diferente y por eso debemos diferenciarla de las demás. Para ello, desde Magento 1.5+ tenemos una función que nos puede ayudar mucho en esta misión. Si nos encontramos en el header.phtml podemos comprobarlo llamando a: GeSHi Error: GeSHi could not find the language cc (using path /home/gaspy/www/totaki.com/www/poesiabinaria/wp-content/plugins/codecolorer/lib/geshi/) (code 2) Pero si nos encontramos en cualquier otra plantilla, tenemos que llamar a esa misma función que se encuentra en el header, para ello obtenemos el singleton del header y se lo preguntamos: GeSHi Error: GeSHi could not find the[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/02/magento-saber-si-estamos-en-la-pagina-principal-home-page"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-02-23T09:57:34Z</dc:date>
  </entry>
  <entry>
    <title>Limitar el acceso a phpmyadmin</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2015/02/limitar-el-acceso-a-phpmyadmin" />
    <category term="blog-stack" />
    <category term="programas" />
    <category term="web" />
    <category term="phpmyadmin" />
    <category term="php" />
    <category term="apache2" />
    <author>
      <name>davidochobits</name>
    </author>
    <updated>2015-02-17T12:49:30Z</updated>
    <published>2015-02-17T12:49:30Z</published>
    <content type="html">&lt;p&gt;No es ninguna novedad ni sorprenderá a nadie que hable de phpmyadmin, una herramienta escrita en php, que nos ayudará a gestionar las bases de datos de nuestro servidor. Lo que muchas veces podemos obviar es que si un delincuente informático, mal llamados hackers, accediese a dicho panel, le facilitaríamos el camino, cosa que debemos evitar. Hoy veremos cómo limitar el acceso a phpmyadmin Realmente en un par de pasos lo tendremos resuelto. Debemos de modificar un par de archivos para que sólo se puede acceder a dicho panel desde unas IP específicas. Primero de todo crearemos un archivo .htaccess donde indicaremos las IP admitidias y denegaremos todo el resto. El archivo lo debemos de crear en la carpeta /usr/share/phpmyadmin 1
 cd /usr/share/phpmyadmin/ 1
 nano .htaccess Y añadimos las reglas[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2015/02/limitar-el-acceso-a-phpmyadmin"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>davidochobits</dc:creator>
    <dc:date>2015-02-17T12:49:30Z</dc:date>
  </entry>
  <entry>
    <title>Añadir jerarquía a nuestras colecciones de datos en PHP. Creando árboles en PHP</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/02/anadir-jerarquia-a-nuestras-colecciones-de-datos-en-php-creando-arboles-en-php" />
    <category term="fotos" />
    <category term="peticiones" />
    <category term="elementos" />
    <category term="jerarquia" />
    <category term="complejidad" />
    <category term="rendimiento" />
    <category term="php" />
    <category term="arboles" />
    <category term="datos" />
    <category term="base" />
    <category term="coleccion" />
    <category term="buildtree" />
    <category term="general" />
    <category term="categorias" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-02-05T16:10:42Z</updated>
    <published>2015-02-05T16:10:42Z</published>
    <content type="html">&lt;p&gt;Es una práctica muy común categorizar nuestros. Hacer que existan categorías/sub-categorías/sub-sub-categorías sin límite al igual que directorios o carpetas hay en nuestro ordenador necesitamos tener todo clasificado. Es decir, queremos introducir jerarquía en nuestros datos, hacer que unos campos dependan de otros. Pero cuando guardamos la información en base de datos, normalmente se guardarán en una tabla con dos dimensiones, por lo que perdemos esa sensación de que hay unos datos dentro de otros. Lo normal en estos casos, es que en cada fila de nuestra tabla haya un campo extra que apunta al identificador de la entrada que establecemos como padre. Por ejemplo, si intentamos introducir categorías de pintura, tendremos por ejemplo: Género pictórico Histórica Prehistoria Edad antigua Edad[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/02/anadir-jerarquia-a-nuestras-colecciones-de-datos-en-php-creando-arboles-en-php"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-02-05T16:10:42Z</dc:date>
  </entry>
</feed>

