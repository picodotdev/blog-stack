<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-05-18T07:23:11Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-05-18T07:23:11Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Lectura de Códigos de Barras con HTML5 y Javascript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/05/lectura-de-codigos-de-barras-con-html5-y-javascript" />
    <category term="quaggajs" />
    <category term="javascript" />
    <category term="development" />
    <category term="barcode" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-05-18T05:06:45Z</updated>
    <published>2015-05-18T05:06:45Z</published>
    <content type="html">&lt;p&gt;Hace poco explicaba cómo capturar vídeo usando Javascript y HTML5. Uno de los posibles usos de esta captura de vídeo es la lectura de códigos de barras. Tradicionalmente para “leer” un código de barras se ha utilizado hardware específico, pero de un tiempo a esta parte, la capacidad de proceso es suficiente como para utilizar algoritmos de visión artificial que nos permiten localizar el código de barras dentro de una imagen y decodificarlo. Implementar este tipo de algoritmos no es una tarea trivial (aunque tampoco es imposible), así que para ver cómo funciona vamos a usar una librería que se encarga de (casi) todo: QuaggaJS. La librería QuaggaJS es una librería que nos permite decodificar códigos de barras utilizando Javascript. Soporta varios tipos de códigos de barras, de momento todos unidimensionales,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/05/lectura-de-codigos-de-barras-con-html5-y-javascript"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-05-18T05:06:45Z</dc:date>
  </entry>
  <entry>
    <title>Captura de vídeo con HTML5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/05/captura-de-video-con-html5" />
    <category term="video" />
    <category term="javascript" />
    <category term="development" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-05-04T05:06:19Z</updated>
    <published>2015-05-04T05:06:19Z</published>
    <content type="html">&lt;p&gt;Las posibilidades que ofrecen las aplicaciones basadas en HTML5 y Javascript cada vez se aproximan más a las de las aplicaciones nativas. Por supuesto, una aplicación nativa siempre podrá conseguir un rendimiento mejor y acceder a APIs más específicas y completas, pero en muchos casos el soporte que encontramos en aplicaciones web es suficiente para lo que necesitamos hacer. En este post vamos a ver un ejemplo sencillo de cómo capturar vídeo a través de la cámara del equipo (ya sea cámara de fotos, webcam, etc.). OJO: Ten en cuenta que todas estas APIs están todavía en evolución, por lo que el soporte varía dependiendo del navegador y, posiblemente, si lees este post dentro de unos cuantos meses, haya que hacer algunas adaptaciones en el código. El origen de todo: getUserMedia El API básica[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/05/captura-de-video-con-html5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-05-04T05:06:19Z</dc:date>
  </entry>
  <entry>
    <title>JavaScript Map y JSON</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/04/javascript-map-y-json" />
    <category term="javascript" />
    <category term="javascript-best-practices" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-04-16T09:30:57Z</updated>
    <published>2015-04-16T09:30:57Z</published>
    <content type="html">&lt;p&gt;En muchas ocasiones nos encontramos realizando peticiones AJAX desde JavaScript a servicios REST. En un porcentaje importante de las situaciones los datos que recibimos en JSON  no son los datos que deseamos y deberemos realizar alguna transformación o modificación.   JavaScript Map Muchas veces para realizar esta operación recorremos la lista de objetos y obtenemos los nuevos datos que queremos a través de alguna operación un tanto compleja. Sin embargo nos olvidamos muchas veces que JavaScript soporta la función map que nos permite realizar un mapeo rápido. Vamos a ver un ejemplo sencillo para ello partiremos de la siguiente estructura JSON que nos devuelve el servidor en la url gastos. [{"concepto":"mac","importe":1000},{"concepto":"android","importe":500}] Son los datos de una sencilla[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/04/javascript-map-y-json"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-04-16T09:30:57Z</dc:date>
  </entry>
  <entry>
    <title>Angular ng-inspector</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/03/angular-ng-inspector" />
    <category term="angular" />
    <category term="javascript" />
    <category term="herramientas" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-03-26T16:37:16Z</updated>
    <published>2015-03-26T16:37:16Z</published>
    <content type="html">&lt;p&gt;Angular ng-inspector es una extensión de google chrome que nos permite gestionar de una forma más cómoda los distintos  objetos y scopes que nuestra aplicación angular tiene cargados en un momento determinado. El uso de esta extensión es sencillo simplemente la activamos cuando tenemos nuestra aplicación de angular funcionando. Por ejemplo supongamos que tenemos la siguiente aplicación: 

&lt;html ng-app="miapp"&gt;
&lt;head&gt;
 &lt;script src="angular.min.js"&gt;
 &lt;/script&gt;

 &lt;script&gt;

 angular.module("miapp",[]).controller("controladorPersonas",function($scope){

 var listaPersonas=[];
 var persona1={nombre:"pepe",apellidos:"perez",edad:20};
 var persona2={nombre:"maria",apellidos:"gomez",edad:30};
 listaPersonas.push(persona1);
 listaPersonas.push(persona2);
 $scope.personas=listaPersonas;

 });

 &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/03/angular-ng-inspector"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-03-26T16:37:16Z</dc:date>
  </entry>
  <entry>
    <title>El concepto de Angular watch</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/03/el-concepto-de-angular-watch" />
    <category term="angular" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-03-20T13:11:34Z</updated>
    <published>2015-03-20T13:11:34Z</published>
    <content type="html">&lt;p&gt;Angular watch nos permite añadir flexibilidad a nuestras aplicaciones angular.js.  Una de las grandes ventajas de angular.js es su capacidad para realizar un binding bidireccional entre los objetos que se encuentran en el scope y las plantillas que utilizamos. De tal forma que cualquier cambio que se produzca en un objeto se actualice en las plantillas.   Vamos a verlo a través de un ejemplo sencillo con una caja de texto que rellenamos con una nota: 

&lt;html ng-app="miapp"&gt;
&lt;head&gt;
&lt;script type="text/javascript" src="angular.min.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;

angular.module('miapp',[]).controller("controladorA",function($scope) {

$scope.numero=5;

});

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div ng-controller="controladorA"&gt;
&lt;p&gt;{{numero}}&lt;/p&gt;
&lt;form&gt;
Nota del examen&lt;input type="text" ng-model="numero"/&gt;

&lt;/form&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;

[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/03/el-concepto-de-angular-watch"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-03-20T13:11:34Z</dc:date>
  </entry>
  <entry>
    <title>HTML5 Web Workers</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/03/html5-web-workers" />
    <category term="html5" />
    <category term="javascript" />
    <category term="html5-conceptos" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-03-18T07:58:34Z</updated>
    <published>2015-03-18T07:58:34Z</published>
    <content type="html">&lt;p&gt;Una de las características que poco a poco comenzaremos a utilizar más con HTML5 es el manejo de HTML5 Web Workers. ¿Qué es un Web Worker? . Un Web Worker es una tarea que se ejecuta de forma paralela a la ejecución de nuestro código de JavaScript y su objetivo es liberar de carga al motor de Javascript principal que es el encargado de responder a los eventos y acciones del usuario. Vamos a ver un ejemplo práctico. 

&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery-1.11.1.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="jquery-1.11.1.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="lowdash.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;

$(document).ready(function() {
$("#pulsar").click(function() {

var mensaje="el boton pulsar";

var fecha= new Date();
while (new Date() - fecha[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/03/html5-web-workers"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-03-18T07:58:34Z</dc:date>
  </entry>
  <entry>
    <title>Google Maps Route API para CantabriaTIC</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/02/google-maps-route-api-para-cantabriatic" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-02-24T07:30:55Z</updated>
    <published>2015-02-24T07:30:55Z</published>
    <content type="html">&lt;p&gt;Hoy he escrito un artículo para la gente de CantabriaTIC sobre como comenzar a usar el  Google Maps Route API . Pienso que es algo interante ya que cada día tenemos que acceder más a estos servicios. La entrada Google Maps Route API para CantabriaTIC aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/02/google-maps-route-api-para-cantabriatic"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-02-24T07:30:55Z</dc:date>
  </entry>
</feed>

