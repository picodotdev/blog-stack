<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-03-18T08:02:20Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-03-18T08:02:20Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>HTML5 Web Workers</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/03/html5-web-workers" />
    <category term="html5" />
    <category term="javascript" />
    <category term="html5-conceptos" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-03-18T07:58:34Z</updated>
    <published>2015-03-18T07:58:34Z</published>
    <content type="html">&lt;p&gt;Una de las características que poco a poco comenzaremos a utilizar más con HTML5 es el manejo de HTML5 Web Workers. ¿Qué es un Web Worker? . Un Web Worker es una tarea que se ejecuta de forma paralela a la ejecución de nuestro código de JavaScript y su objetivo es liberar de carga al motor de Javascript principal que es el encargado de responder a los eventos y acciones del usuario. Vamos a ver un ejemplo práctico. 

&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery-1.11.1.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="jquery-1.11.1.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="lowdash.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;

$(document).ready(function() {
$("#pulsar").click(function() {

var mensaje="el boton pulsar";

var fecha= new Date();
while (new Date() - fecha[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/03/html5-web-workers"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-03-18T07:58:34Z</dc:date>
  </entry>
  <entry>
    <title>Google Maps Route API para CantabriaTIC</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/02/google-maps-route-api-para-cantabriatic" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-02-24T07:30:55Z</updated>
    <published>2015-02-24T07:30:55Z</published>
    <content type="html">&lt;p&gt;Hoy he escrito un artículo para la gente de CantabriaTIC sobre como comenzar a usar el  Google Maps Route API . Pienso que es algo interante ya que cada día tenemos que acceder más a estos servicios. La entrada Google Maps Route API para CantabriaTIC aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/02/google-maps-route-api-para-cantabriatic"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-02-24T07:30:55Z</dc:date>
  </entry>
  <entry>
    <title>Monitores de rendimiento para Javascript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/02/monitores-de-rendimiento-para-javascript" />
    <category term="javascript" />
    <category term="performance" />
    <category term="development" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-02-23T05:06:06Z</updated>
    <published>2015-02-23T05:06:06Z</published>
    <content type="html">&lt;p&gt;Desde hace ya bastante tiempo todos los navegadores (incluso Internet Explorer) incluyen herramientas de desarrollo muy completas para trabajar con Javascript, entre las cuales existen profilers que nos permiten identificar cuellos de botella en nuestras aplicaciones web, tanto a nivel de rendimiento como de consumo de memoria. Estas herramientas están muy bien, pero a veces necesitamos algo que nos proporcione una información más inmediata de lo rápido que se está ejecutando nuestra aplicación o de la memoria que estamos ocupando en cada momento. En este post vamos a ver un par de herramientas muy sencillas que nos pueden venir bien para obtener estos datos. memory-stats.js Como su nombre indica, memory-stats.js nos permite mostrar estadísticas del consumo de memoria de una aplicación Javascript.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/02/monitores-de-rendimiento-para-javascript"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-02-23T05:06:06Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo de Javascript NameSpace</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/02/ejemplo-de-javascript-namespace" />
    <category term="design-patterns" />
    <category term="buenas-practicas" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-02-12T09:13:02Z</updated>
    <published>2015-02-12T09:13:02Z</published>
    <content type="html">&lt;p&gt;Cada día tenemos más código de JavaScript y necesitamos organizarlo. Uno de los problemas más habituales de JavaScript es su falta total de estructura y aislamiento. Muchas veces acabamos con un montón de variables definidas a nivel global. Para evitar este tipo de problemática podemos definir Namespaces que nos aíslen unos elementos de otros. Vamos a ver un ejemplo sencillo. 

&lt;script type="text/javascript"&gt;

/*
var MIESPACIOA= MIESPACIOA || {};

MIESPACIOA.persona= {nombre:"pedro",edad:20};

console.log(MIESPACIOA.persona.nombre);

var MIESPACIOB= MIESPACIOB || {};

MIESPACIOB.persona= {nombre:"maria",edad:15};

console.log(MIESPACIOB.persona.nombre);

&lt;/script&gt;

 Acabamos de crear dos javascript namespace en cada uno de los cuales hemos almacenado un objeto. Eso sí ambos objetos tienen el[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/02/ejemplo-de-javascript-namespace"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-02-12T09:13:02Z</dc:date>
  </entry>
  <entry>
    <title>LocalStorage HTML5 y LoDash</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/02/localstorage-html5-y-lodash" />
    <category term="buenas-practicas" />
    <category term="html5" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-02-06T10:33:49Z</updated>
    <published>2015-02-06T10:33:49Z</published>
    <content type="html">&lt;p&gt;La combinación de HTML5 con librerías de Javascript suele ser una combinación ganadora y que aporta una gran flexibilidad .Muchas veces podemos necesitar trabajar con datos de forma local y hacer diversos filtros y operaciones sobre ellos. Es muy habitual trabajar con LocalStorage HTML5 y por ejemplo LowDash para realizar operaciones a nivel local, vamos a ver un ejemplo clásico. Para ello vamos ha almacenar una estructura JSON en un LocalStorage usando JSON.stringify(). Vamos a verlo en código a través del botón de salvar:   

&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery-1.11.1.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="jquery-1.11.1.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="lowdash.js"&gt;
&lt;/script&gt;

&lt;script type="text/javascript"&gt;

$(document).ready(function() {

$("#salvar").click(function()[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/02/localstorage-html5-y-lodash"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-02-06T10:33:49Z</dc:date>
  </entry>
  <entry>
    <title>Internacionalización (i18n) en Javascript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/01/internacionalizacion-i18n-en-javascript" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="planeta-codigo" />
    <category term="javascript" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-01-31T00:00:00Z</updated>
    <published>2015-01-23T09:00:00Z</published>
    <content type="html">&lt;p&gt;Si desarrollamos una aplicación web, que es usada en múltiples idiomas y el lado del cliente tiene cierta complejidad quizá nos encontremos con la necesidad de proporcionar internacionalización (i18n) para los textos o mensajes mediante una librería javascript. Una de la que más me ha gustado de las que he encontrado ha sido i18next pero hay varias opciones más, incluidas dos que merecen ser nombradas que son polyglot y messageformat, estas tres opciones son parecidas pero no tiene exactamente las mismas funcionalidades deberemos evaluarlas para elegir una según lo que necesitemos. La documentación de i18next no es muy extensa pero es suficiente, las funcionalidades que ofrece son: Soporte para variables (interpolación) Soporte para variables anidadas Soporte para múltiples formas plurales[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/01/internacionalizacion-i18n-en-javascript"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-01-23T09:00:00Z</dc:date>
  </entry>
  <entry>
    <title>¿Que es CORS ?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/01/que-es-cors" />
    <category term="design-patterns" />
    <category term="jee" />
    <category term="javascript" />
    <category term="ajax" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-01-30T07:21:37Z</updated>
    <published>2015-01-30T07:21:37Z</published>
    <content type="html">&lt;p&gt;CORS  (Cross Origin Resource Sharing) es una tecnología que cada día necesitamos utilizar más a la hora de desarrollar aplicaciones móviles y web. ¿Cómo funciona exactamente? . En una aplicación web clásica nosotros podemos cargar una página y solicitar que esta cargue dinámicamente datos vía AJAX.   Eso sí esos datos que vienen vía AJAX tienen que pertenecer al mismo dominio. En el caso de que esto no sea así la aplicación no podrá cargar los datos por limitaciones de seguridad. Los problemas comienzan cuando nosotros tenemos aplicaciones que necesitan acceder a esos datos pero no se encuentran bajo el mismo dominio. Un ejemplo muy habitual es una aplicación Movil empaquetada con PhoneGAP.   En este caso la petición no nos funcionará ya que hemos cargado una página HTML sin descargarla del[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/01/que-es-cors"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-01-30T07:21:37Z</dc:date>
  </entry>
</feed>

