<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-07-23T08:02:12Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-07-23T08:02:12Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>jQuery getScript y carga dinámica</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/jquery-getscript-y-carga-dinamica" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-23T07:19:40Z</updated>
    <published>2015-07-23T07:19:40Z</published>
    <content type="html">&lt;p&gt;Cada día necesitamos más realizar  la carga dinámica de ficheros de Javascript. Tecnologías como Require.js abordan esta problemática. Pero hay muchas situaciones cotidianas que se pueden resolver de forma más sencilla con algo como jQuery getScript. Utilizando jQuery getScript En el siguiente ejemplo se muestran dos botones  “cargar” y “operar”. El primero de ellos aparece habilitado cuando se carga la página.   El segundo de ellos aparece deshabilitado ya que necesita de un fichero de JavaScript que realiza una operación de sumar y que no hemos cargado inicialmente con la página. 

function suma (a,b) {

return a+b;
}

 Para poder habilitar el segundo botón y pulsarle hay que  cargar previamente el script de la suma.   Para realizar esta operación hay que usar jQuery y su método getScript.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/jquery-getscript-y-carga-dinamica"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-23T07:19:40Z</dc:date>
  </entry>
  <entry>
    <title>Carga asíncrona de datos en ReactJS a través de React Router</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/07/carga-asincrona-de-datos-en-reactjs-a-traves-de-react-router" />
    <category term="javascript" />
    <category term="development" />
    <category term="reactjs" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-07-20T05:06:54Z</updated>
    <published>2015-07-20T05:06:54Z</published>
    <content type="html">&lt;p&gt;Hace poco explicaba cómo utilizar un mixin para cargar datos de forma asíncrona con ReactJS y veíamos que era una solución que nos podía ahorrar bastante código. En este post vamos a ver otra alternativa para realizar la carga de datos externos en nuestros componentes de ReactJS, esta vez aprovechando react-router. Si no lo conoces, puedes ver este mini tutorial de React Router para hacerte una idea de cómo funciona. Simplificando mucho, React Router nos permite definir una estructura de rutas y navegar entre ellas; siendo su característica más interesante que las rutas pueden estar anidadas. Esto implica que para generar la página correspondiente a una ruta pueden verse involucrados varios componentes de ReactJS organizados jerárquicamente, y cada uno de ellos genera una parte de la página.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/07/carga-asincrona-de-datos-en-reactjs-a-traves-de-react-router"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-07-20T05:06:54Z</dc:date>
  </entry>
  <entry>
    <title>Java vs JavaScript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-vs-javascript" />
    <category term="arquitectura-reflexiones" />
    <category term="javascript" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-10T11:07:45Z</updated>
    <published>2015-07-10T11:07:45Z</published>
    <content type="html">&lt;p&gt;Java vs JavaScript comparativa entre las dos plataformas y como la evolución de ambas nos afectará a las Arquitecturas del futuro La entrada Java vs JavaScript aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-vs-javascript"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-10T11:07:45Z</dc:date>
  </entry>
  <entry>
    <title>Un mixin para carga asíncrona de datos en ReactJS</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/07/un-mixin-para-carga-asincrona-de-datos-en-reactjs" />
    <category term="mixin" />
    <category term="javascript" />
    <category term="development" />
    <category term="reactjs" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-07-06T05:06:03Z</updated>
    <published>2015-07-06T05:06:03Z</published>
    <content type="html">&lt;p&gt;Los mixins son para mi una especie de bicho mítico, tal vez porque no los he usado mucho o porque me cuesta sacarles partido, pero lo cierto es que me resultan atractivos (seguramente más de lo que deberían) y de hecho empecé este blog hablando de mixins en C#. Con el uso que le he dado últimamente a ReactJS han vuelto a rondarme por la cabeza y creo que empiezo a ver más casos de aplicación que la mera herencia de implementación que me gustó hace tiempo cuando hablé de mixins en javascript. Recordando qué es un mixin Los mixin son un sistema para reutilizar código y extender clases u objetos existentes añadiéndoles (o mezclándoles, de ahí el nombre) la funcionalidad de otros. Podemos verlos como un mecanismo a medio camino entre la herencia y la composición, y quizá la forma más simple de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/07/un-mixin-para-carga-asincrona-de-datos-en-reactjs"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-07-06T05:06:03Z</dc:date>
  </entry>
  <entry>
    <title>JavaScript Iteradores (para CantabriaTic)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/06/javascript-iteradores-para-cantabriatic" />
    <category term="javascript" />
    <category term="cantabriatic" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-06-29T05:42:45Z</updated>
    <published>2015-06-29T05:42:45Z</published>
    <content type="html">&lt;p&gt;Hoy he escrito un artículo para CantabriaTic que habla de los diferentes Iteradores que tiene JavaScript y como se utilizan de una forma integrada. Lo podeis leer aquí. La entrada JavaScript Iteradores (para CantabriaTic) aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/06/javascript-iteradores-para-cantabriatic"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-06-29T05:42:45Z</dc:date>
  </entry>
  <entry>
    <title>HTML5 Visibility API y rendimiento</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/06/html5-visibility-api-y-rendimiento" />
    <category term="html5" />
    <category term="javascript" />
    <category term="html5-conceptos" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-06-05T08:38:02Z</updated>
    <published>2015-06-05T08:38:02Z</published>
    <content type="html">&lt;p&gt;¿Para que sirve HTML5 visibility API?. Al principio nos puede parecer un API un poco tonta que ya simplemente se encarga de comprobar si la ventana de navegador que tenemos activa esta visible o no. Sin embargo esto puede llegar a ser crítico a nivel de rendimiento. ¿Por qué? , muy sencillo ,cada día los usuarios tenemos mas pestañas de navegador abiertas. Vamos a ver un ejemplo que nos clarifique: 

&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery-1.11.1.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;

$(document).ready(function() {

var i=0;
setInterval(function() {

$("body").append("&lt;p&gt;iteracion"+ i+"&lt;/p&gt;");
i++;

},1000);

});
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;

 Se trata de una aplicación sencilla que usa un setInterval para ir imprimiendo párrafos. Supongamos que cambiamos de pestaña de navegador[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/06/html5-visibility-api-y-rendimiento"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-06-05T08:38:02Z</dc:date>
  </entry>
  <entry>
    <title>Lectura de Códigos de Barras con HTML5 y Javascript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/05/lectura-de-codigos-de-barras-con-html5-y-javascript" />
    <category term="quaggajs" />
    <category term="javascript" />
    <category term="development" />
    <category term="barcode" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-05-18T05:06:45Z</updated>
    <published>2015-05-18T05:06:45Z</published>
    <content type="html">&lt;p&gt;Hace poco explicaba cómo capturar vídeo usando Javascript y HTML5. Uno de los posibles usos de esta captura de vídeo es la lectura de códigos de barras. Tradicionalmente para “leer” un código de barras se ha utilizado hardware específico, pero de un tiempo a esta parte, la capacidad de proceso es suficiente como para utilizar algoritmos de visión artificial que nos permiten localizar el código de barras dentro de una imagen y decodificarlo. Implementar este tipo de algoritmos no es una tarea trivial (aunque tampoco es imposible), así que para ver cómo funciona vamos a usar una librería que se encarga de (casi) todo: QuaggaJS. La librería QuaggaJS es una librería que nos permite decodificar códigos de barras utilizando Javascript. Soporta varios tipos de códigos de barras, de momento todos unidimensionales,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/05/lectura-de-codigos-de-barras-con-html5-y-javascript"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-05-18T05:06:45Z</dc:date>
  </entry>
</feed>

