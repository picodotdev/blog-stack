<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2016-05-06T16:03:42Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2016-05-06T16:03:42Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Javascript const vs var vs let</title>
    <link rel="alternate" href="http://www.arquitecturajava.com/javascript-const-vs-var-vs-let/" />
    <category term="javascript" />
    <category term="js-tips" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2016-05-06T13:43:53Z</updated>
    <published>2016-05-06T13:43:53Z</published>
    <content type="html">&lt;p&gt;javascript conts vs var vs let , es una duda muy común entre todos los que desarrollados con JavaScript. Se trata de las tres formas de declarar variables con el lenguaje. Vamos a abordar cada una de ellas . La más común es el uso de  “var” . Esta declaración tiene un problema , una vez […] La entrada Javascript const vs var vs let aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/javascript-const-vs-var-vs-let/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2016-05-06T13:43:53Z</dc:date>
  </entry>
  <entry>
    <title>Sublime React y el uso de JSX</title>
    <link rel="alternate" href="http://www.arquitecturajava.com/sublime-react-y-el-uso-de-jsx/" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2016-04-29T08:11:43Z</updated>
    <published>2016-04-29T08:11:43Z</published>
    <content type="html">&lt;p&gt;Sublime React ,es una de las  necesidades que últimamente todo el mundo tiene. Poco a poco React.js esta cogiendo tracción como librería de capa de presentación y necesitamos integrarlo con uno de nuestros editores favoritos. Esto en principio no debería tener mayor misterio ya que React esta basado en JavaScript. El problema viene cuando usamos React.js a […] La entrada Sublime React y el uso de JSX aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/sublime-react-y-el-uso-de-jsx/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2016-04-29T08:11:43Z</dc:date>
  </entry>
  <entry>
    <title>Introduccion a Babel.js y JavaScript ES6</title>
    <link rel="alternate" href="http://www.arquitecturajava.com/introduccion-babel-js-javascript-es6/" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2016-04-08T15:04:43Z</updated>
    <published>2016-04-08T15:04:43Z</published>
    <content type="html">&lt;p&gt;Babel.js es un transcompilador que nos permite convertir nuestro código de JavaScript ES6 en código de ES5. Esta característica se esta convirtiendo en algo crítico para mucha gente ya que las nuevas características de ES6 hacen deseable trabajar con el lenguaje lo antes posible. Lamentablemente hoy en día en la mayor parte de los navegadores y distintas […] La entrada Introduccion a Babel.js y JavaScript ES6 aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/introduccion-babel-js-javascript-es6/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2016-04-08T15:04:43Z</dc:date>
  </entry>
  <entry>
    <title>Minimal Router: un router minimalista para aplicaciones SPA</title>
    <link rel="alternate" href="http://feedproxy.google.com/~r/KoalitesBlog/~3/Io2upz5oSnQ/" />
    <category term="javascript" />
    <category term="development" />
    <category term="minimal-router" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2016-03-28T05:06:10Z</updated>
    <published>2016-03-28T05:06:10Z</published>
    <content type="html">&lt;p&gt;En el último post explicaba cómo me gustaría que fuese un router para aplicaciones SPA y diseñaba un router extremadamente simple pero que se ajustaba bastante a lo que creo que debería hacer una librería de este tipo. Mi intención original era quedarme ahí, pero disfrutar de unos días de descanso en la España profunda me ha permitido entretenerme implementando una primera versión. El resultado es Minimal Router (Miguel, gracias por el nombre), y en este post vamos a aprovechar para ver cómo está implementado y, sobre todo, por qué está implementado así. Igual que me parecía entretenido analizar las decisiones de diseño, creo que puede ser entretenido analizar las decisiones de implementación, pese al componente subjetivo que tienen este tipo de decisiones. El diseño del API En el post con[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://feedproxy.google.com/~r/KoalitesBlog/~3/Io2upz5oSnQ/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2016-03-28T05:06:10Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a Immutable.js</title>
    <link rel="alternate" href="http://www.arquitecturajava.com/introduccion-immutable-js/" />
    <category term="js-frameworks" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2016-03-22T10:02:00Z</updated>
    <published>2016-03-22T10:02:00Z</published>
    <content type="html">&lt;p&gt;Immutable.js es una librería de JavaScript que cada día este cogiendo más empuje. La librería aporta un conjunto de tipos de abstractos de datos que son Immutables. ¿Qué quiere decir esto exactamente?. Quiere decir que una vez creado cada uno de los objetos , estos jamás son modificados. En un principio esto parece algo poco […] La entrada Introducción a Immutable.js aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/introduccion-immutable-js/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2016-03-22T10:02:00Z</dc:date>
  </entry>
  <entry>
    <title>Diseñando un router para aplicaciones SPA</title>
    <link rel="alternate" href="http://feedproxy.google.com/~r/KoalitesBlog/~3/5sMcgy2n3SA/" />
    <category term="react-router" />
    <category term="javascript" />
    <category term="development" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2016-03-21T05:06:17Z</updated>
    <published>2016-03-21T05:06:17Z</published>
    <content type="html">&lt;p&gt;Desde que ReactJS se convirtió en mi librería por defecto para desarrollar aplicaciones en Javascript he disfrutado y padecido una de sus características: la libertad para elegir con qué componentes trabajas. Concretamente, la parte de routing ha sido un poco delicada y, aunque inicialmente React-Router me gustó mucho, sus sucesivos (y en mi opinión innecesarios) cambios de API han acabado por cansarme. Existen muchos otros routers disponibles para aplicaciones Javascript, pero antes de empezar a probarlos a ciegas, quiero hacer un experimento de desarrollo ficción y pensar cómo me gustaría que fuese un router. No digo que esto acabe en el desarrollo de otro router más (aunque nunca se sabe), pero al menos como ejercicio de diseño puede ser curioso. Incluso si no te interesa mucho el tema de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://feedproxy.google.com/~r/KoalitesBlog/~3/5sMcgy2n3SA/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2016-03-21T05:06:17Z</dc:date>
  </entry>
  <entry>
    <title>JavaScript Memorization</title>
    <link rel="alternate" href="http://www.arquitecturajava.com/javascript-memorization/" />
    <category term="js-frameworks" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2016-03-03T08:00:57Z</updated>
    <published>2016-03-03T08:00:57Z</published>
    <content type="html">&lt;p&gt;¿Qué es JavaScript Memorization y para que sirve?. El concepto de Memorization hace referencia a como podemos en JavaScript modificar el comportamiento de una función para que sus resultados se cacheen. Esto en un principio puede sonar algo raro pero vamos a ver un ejemplo que nos ayude a clarificarlo. Supongamos que disponemos de un […] La entrada JavaScript Memorization aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/javascript-memorization/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2016-03-03T08:00:57Z</dc:date>
  </entry>
</feed>

