<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-11-12T09:02:30Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-11-12T09:02:30Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>jQuery Promise y AJAX</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/11/jquery-promise-y-ajax" />
    <category term="jquery" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-11-12T08:47:48Z</updated>
    <published>2015-11-12T08:47:48Z</published>
    <content type="html">&lt;p&gt;jQuery Promise es uno de los conceptos que cuesta más entender cuanto de trabajamos con Ajax. Sin embargo sino entendemos este concepto será muy difícil desarrollar aplicaciones Ajax que sean flexibles y reutilizables. Vamos a mostrar un ejemplo que nos ayude a entender mejor las cosas . Supongamos que disponemos de un servidor que nos […] La entrada jQuery Promise y AJAX aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/11/jquery-promise-y-ajax"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-11-12T08:47:48Z</dc:date>
  </entry>
  <entry>
    <title>Cómo se usa IndexedDB</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/10/como-se-usa-indexeddb" />
    <category term="javascript" />
    <category term="development" />
    <category term="indexeddb" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-10-19T05:06:09Z</updated>
    <published>2015-10-19T05:06:09Z</published>
    <content type="html">&lt;p&gt;En el post anterior hicimos una introducción rápida a IndexedDB, una base de datos NoSQL que podemos utilizar para almacenar información localmente en el navegador cuando desarrollamos aplicaciones web. Con lo que vimos en ese post deberíamos tener ya una idea de que IndexedDB se organiza alrededor de “colecciones” de objectos llamadas objectStores en las que guardamos objetos asociados a una clave a partir de la cual podemos recuperar el objeto, y que además podemos definir índices que nos ayuden a recuperar objetos a partir de otros valores que no sean la clave. En este post vamos a ver con un poco más de detalle como se realizan estas operaciones de lectura y escritura en la base de datos. No vamos a llegar un nivel muy detallado pero por lo menos podremos tener unos cónocimientos básicos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/10/como-se-usa-indexeddb"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-10-19T05:06:09Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a React.js</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/10/introduccion-a-react-js" />
    <category term="javascript" />
    <category term="js-framworks" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-10-16T11:43:46Z</updated>
    <published>2015-10-16T11:43:46Z</published>
    <content type="html">&lt;p&gt;React.js es una librería de JavaScript que se encuentra en un momento de ebullición. El año pasado ocurrió con Angular.js y este año le toca a React.js . ¿Qué diferencia React.js de Angular.js?. La diferencia fundamental es que mientras que Angular.js es un framework MVC que se encarga de hacer prácticamente todo.     React.js […] La entrada Introducción a React.js aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/10/introduccion-a-react-js"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-10-16T11:43:46Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a IndexedDB</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/10/introduccion-a-indexeddb" />
    <category term="javascript" />
    <category term="development" />
    <category term="indexeddb" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-10-12T10:26:51Z</updated>
    <published>2015-10-12T10:26:51Z</published>
    <content type="html">&lt;p&gt;Con esto de hacer aplicaciones web cada vez más “potentes”, es fácil encontrarse escenarios en los que necesitamos almacenar información localmente, por ejemplo para ganar en rendimiento o trabajar sin conexión. Es discutible si esto es una buena idea o no, a fin de cuentas hay tecnologías más apropiadas y consolidadas para estos casos, pero el hecho es que es posible y en este post vamos a ver una de las formas recomendadas de almacenar localmente informmación en una aplicación web: usando IndexedDB. OJO: como viene siendo habitual, esto no va a ser un tutorial lleno de código y explicaciones paso a paso, para eso puedes revisar la documentación de Mozilla sobre IndexedDB. Como diría alguno que conozco, que tiene la extraña costumbre de antropomorfizar librerías, el objetivo es ponerle cara[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/10/introduccion-a-indexeddb"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-10-12T10:26:51Z</dc:date>
  </entry>
  <entry>
    <title>Desplegar aplicaciones Nodejs a Azure desde GIT automáticamente</title>
    <link rel="alternate" href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/desplegar-aplicaciones-nodejs-a-azure-desde-git-automaticamente" />
    <category term="javascript" />
    <category term="nodejs" />
    <category term="azure" />
    <author>
      <name>leonardo</name>
    </author>
    <updated>2015-09-28T01:46:00Z</updated>
    <published>2015-09-28T01:46:00Z</published>
    <content type="html">&lt;p&gt;En un post anterior vimos cómo desplegar aplicaciones .net en Azure. Bien, Azure Web sites también tiene la capacidad de ejecutar aplicaciones hechas con NodeJs y por supuesto soporta el mismo esquema de despliegue automático. ¿Cómo hacerlo paso a paso? Para este post me basé en este ejemplo de MSDN, a diferencia de mi post anterior ahora estoy usando la versión más actual del portal de Azure. Aplicación de Nodejs sencilla var http = require('http')
var port = process.env.PORT || 1337;
http.createServer(function(req, res) {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello World\n');
}).listen(port); Simplemente nos retorna un string "Hello World" como texto antes un request HTTP Una vez que subimos a GIT nuestro código (en mi caso un repositorio en Bitcucket) no nos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/desplegar-aplicaciones-nodejs-a-azure-desde-git-automaticamente"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>leonardo</dc:creator>
    <dc:date>2015-09-28T01:46:00Z</dc:date>
  </entry>
  <entry>
    <title>JavaScript Module Pattern</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/09/javascript-module-pattern" />
    <category term="javascript" />
    <category term="js-tips" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-09-11T14:53:38Z</updated>
    <published>2015-09-11T14:53:38Z</published>
    <content type="html">&lt;p&gt;JavaScript Module Pattern es uno de los patrones de diseño más típicos en JavaScript y nos ayuda a organizar y aislar las distintas funciones y clases con las que trabajamos. JavaScript por defecto no soporta el concepto de Package/NameSpace.Vamos a ver como implementar en JavaScript este patrón de diseño. 

&lt;html&gt;
&lt;head&gt;
&lt;script type="text/javascript"&gt;

(function(window){

var suma = function(x, y){
return x + y;
}

var resta = function(x, y){
return x - y;
}

var matematicas = {
suma: function(a, b){
return suma(a,b);
},
resta: function(a, b){
return resta(a, b);
}
}

window.matematicas = matematicas;
})(window);

console.log(matematicas.suma(5, 5));
console.log(matematicas.resta(5, 5));

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;

 JavaScript Module Pattern y IIFE El código define dos funciones[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/09/javascript-module-pattern"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-09-11T14:53:38Z</dc:date>
  </entry>
  <entry>
    <title>jQuery getScript y carga dinámica</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/jquery-getscript-y-carga-dinamica" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-23T07:19:40Z</updated>
    <published>2015-07-23T07:19:40Z</published>
    <content type="html">&lt;p&gt;Cada día necesitamos más realizar  la carga dinámica de ficheros de Javascript. Tecnologías como Require.js abordan esta problemática. Pero hay muchas situaciones cotidianas que se pueden resolver de forma más sencilla con algo como jQuery getScript. Utilizando jQuery getScript En el siguiente ejemplo se muestran dos botones  “cargar” y “operar”. El primero de ellos aparece habilitado cuando se carga la página.   El segundo de ellos aparece deshabilitado ya que necesita de un fichero de JavaScript que realiza una operación de sumar y que no hemos cargado inicialmente con la página. 

function suma (a,b) {

return a+b;
}

 Para poder habilitar el segundo botón y pulsarle hay que  cargar previamente el script de la suma.   Para realizar esta operación hay que usar jQuery y su método getScript.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/jquery-getscript-y-carga-dinamica"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-23T07:19:40Z</dc:date>
  </entry>
</feed>

