<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-07-10T12:02:03Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-07-10T12:02:03Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Java vs JavaScript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-vs-javascript" />
    <category term="arquitectura-reflexiones" />
    <category term="javascript" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-10T11:07:45Z</updated>
    <published>2015-07-10T11:07:45Z</published>
    <content type="html">&lt;p&gt;Java vs JavaScript comparativa entre las dos plataformas y como la evolución de ambas nos afectará a las Arquitecturas del futuro La entrada Java vs JavaScript aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-vs-javascript"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-10T11:07:45Z</dc:date>
  </entry>
  <entry>
    <title>Un mixin para carga asíncrona de datos en ReactJS</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/07/un-mixin-para-carga-asincrona-de-datos-en-reactjs" />
    <category term="mixin" />
    <category term="javascript" />
    <category term="development" />
    <category term="reactjs" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-07-06T05:06:03Z</updated>
    <published>2015-07-06T05:06:03Z</published>
    <content type="html">&lt;p&gt;Los mixins son para mi una especie de bicho mítico, tal vez porque no los he usado mucho o porque me cuesta sacarles partido, pero lo cierto es que me resultan atractivos (seguramente más de lo que deberían) y de hecho empecé este blog hablando de mixins en C#. Con el uso que le he dado últimamente a ReactJS han vuelto a rondarme por la cabeza y creo que empiezo a ver más casos de aplicación que la mera herencia de implementación que me gustó hace tiempo cuando hablé de mixins en javascript. Recordando qué es un mixin Los mixin son un sistema para reutilizar código y extender clases u objetos existentes añadiéndoles (o mezclándoles, de ahí el nombre) la funcionalidad de otros. Podemos verlos como un mecanismo a medio camino entre la herencia y la composición, y quizá la forma más simple de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/07/un-mixin-para-carga-asincrona-de-datos-en-reactjs"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-07-06T05:06:03Z</dc:date>
  </entry>
  <entry>
    <title>JavaScript Iteradores (para CantabriaTic)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/06/javascript-iteradores-para-cantabriatic" />
    <category term="javascript" />
    <category term="cantabriatic" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-06-29T05:42:45Z</updated>
    <published>2015-06-29T05:42:45Z</published>
    <content type="html">&lt;p&gt;Hoy he escrito un artículo para CantabriaTic que habla de los diferentes Iteradores que tiene JavaScript y como se utilizan de una forma integrada. Lo podeis leer aquí. La entrada JavaScript Iteradores (para CantabriaTic) aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/06/javascript-iteradores-para-cantabriatic"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-06-29T05:42:45Z</dc:date>
  </entry>
  <entry>
    <title>HTML5 Visibility API y rendimiento</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/06/html5-visibility-api-y-rendimiento" />
    <category term="html5" />
    <category term="javascript" />
    <category term="html5-conceptos" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-06-05T08:38:02Z</updated>
    <published>2015-06-05T08:38:02Z</published>
    <content type="html">&lt;p&gt;¿Para que sirve HTML5 visibility API?. Al principio nos puede parecer un API un poco tonta que ya simplemente se encarga de comprobar si la ventana de navegador que tenemos activa esta visible o no. Sin embargo esto puede llegar a ser crítico a nivel de rendimiento. ¿Por qué? , muy sencillo ,cada día los usuarios tenemos mas pestañas de navegador abiertas. Vamos a ver un ejemplo que nos clarifique: 

&lt;html&gt;
&lt;head&gt;
&lt;script src="jquery-1.11.1.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;

$(document).ready(function() {

var i=0;
setInterval(function() {

$("body").append("&lt;p&gt;iteracion"+ i+"&lt;/p&gt;");
i++;

},1000);

});
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/body&gt;
&lt;/html&gt;

 Se trata de una aplicación sencilla que usa un setInterval para ir imprimiendo párrafos. Supongamos que cambiamos de pestaña de navegador[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/06/html5-visibility-api-y-rendimiento"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-06-05T08:38:02Z</dc:date>
  </entry>
  <entry>
    <title>Lectura de Códigos de Barras con HTML5 y Javascript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/05/lectura-de-codigos-de-barras-con-html5-y-javascript" />
    <category term="quaggajs" />
    <category term="javascript" />
    <category term="development" />
    <category term="barcode" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-05-18T05:06:45Z</updated>
    <published>2015-05-18T05:06:45Z</published>
    <content type="html">&lt;p&gt;Hace poco explicaba cómo capturar vídeo usando Javascript y HTML5. Uno de los posibles usos de esta captura de vídeo es la lectura de códigos de barras. Tradicionalmente para “leer” un código de barras se ha utilizado hardware específico, pero de un tiempo a esta parte, la capacidad de proceso es suficiente como para utilizar algoritmos de visión artificial que nos permiten localizar el código de barras dentro de una imagen y decodificarlo. Implementar este tipo de algoritmos no es una tarea trivial (aunque tampoco es imposible), así que para ver cómo funciona vamos a usar una librería que se encarga de (casi) todo: QuaggaJS. La librería QuaggaJS es una librería que nos permite decodificar códigos de barras utilizando Javascript. Soporta varios tipos de códigos de barras, de momento todos unidimensionales,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/05/lectura-de-codigos-de-barras-con-html5-y-javascript"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-05-18T05:06:45Z</dc:date>
  </entry>
  <entry>
    <title>Captura de vídeo con HTML5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/05/captura-de-video-con-html5" />
    <category term="video" />
    <category term="javascript" />
    <category term="development" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-05-04T05:06:19Z</updated>
    <published>2015-05-04T05:06:19Z</published>
    <content type="html">&lt;p&gt;Las posibilidades que ofrecen las aplicaciones basadas en HTML5 y Javascript cada vez se aproximan más a las de las aplicaciones nativas. Por supuesto, una aplicación nativa siempre podrá conseguir un rendimiento mejor y acceder a APIs más específicas y completas, pero en muchos casos el soporte que encontramos en aplicaciones web es suficiente para lo que necesitamos hacer. En este post vamos a ver un ejemplo sencillo de cómo capturar vídeo a través de la cámara del equipo (ya sea cámara de fotos, webcam, etc.). OJO: Ten en cuenta que todas estas APIs están todavía en evolución, por lo que el soporte varía dependiendo del navegador y, posiblemente, si lees este post dentro de unos cuantos meses, haya que hacer algunas adaptaciones en el código. El origen de todo: getUserMedia El API básica[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/05/captura-de-video-con-html5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-05-04T05:06:19Z</dc:date>
  </entry>
  <entry>
    <title>JavaScript Map y JSON</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/04/javascript-map-y-json" />
    <category term="javascript" />
    <category term="javascript-best-practices" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-04-16T09:30:57Z</updated>
    <published>2015-04-16T09:30:57Z</published>
    <content type="html">&lt;p&gt;En muchas ocasiones nos encontramos realizando peticiones AJAX desde JavaScript a servicios REST. En un porcentaje importante de las situaciones los datos que recibimos en JSON  no son los datos que deseamos y deberemos realizar alguna transformación o modificación.   JavaScript Map Muchas veces para realizar esta operación recorremos la lista de objetos y obtenemos los nuevos datos que queremos a través de alguna operación un tanto compleja. Sin embargo nos olvidamos muchas veces que JavaScript soporta la función map que nos permite realizar un mapeo rápido. Vamos a ver un ejemplo sencillo para ello partiremos de la siguiente estructura JSON que nos devuelve el servidor en la url gastos. [{"concepto":"mac","importe":1000},{"concepto":"android","importe":500}] Son los datos de una sencilla[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/04/javascript-map-y-json"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-04-16T09:30:57Z</dc:date>
  </entry>
</feed>

