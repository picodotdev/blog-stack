<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-10-12T11:02:26Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-10-12T11:02:26Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Introducción a IndexedDB</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/10/introduccion-a-indexeddb" />
    <category term="javascript" />
    <category term="development" />
    <category term="indexeddb" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-10-12T10:26:51Z</updated>
    <published>2015-10-12T10:26:51Z</published>
    <content type="html">&lt;p&gt;Con esto de hacer aplicaciones web cada vez más “potentes”, es fácil encontrarse escenarios en los que necesitamos almacenar información localmente, por ejemplo para ganar en rendimiento o trabajar sin conexión. Es discutible si esto es una buena idea o no, a fin de cuentas hay tecnologías más apropiadas y consolidadas para estos casos, pero el hecho es que es posible y en este post vamos a ver una de las formas recomendadas de almacenar localmente informmación en una aplicación web: usando IndexedDB. OJO: como viene siendo habitual, esto no va a ser un tutorial lleno de código y explicaciones paso a paso, para eso puedes revisar la documentación de Mozilla sobre IndexedDB. Como diría alguno que conozco, que tiene la extraña costumbre de antropomorfizar librerías, el objetivo es ponerle cara[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/10/introduccion-a-indexeddb"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-10-12T10:26:51Z</dc:date>
  </entry>
  <entry>
    <title>Desplegar aplicaciones Nodejs a Azure desde GIT automáticamente</title>
    <link rel="alternate" href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/desplegar-aplicaciones-nodejs-a-azure-desde-git-automaticamente" />
    <category term="javascript" />
    <category term="nodejs" />
    <category term="azure" />
    <author>
      <name>leonardo</name>
    </author>
    <updated>2015-09-28T01:46:00Z</updated>
    <published>2015-09-28T01:46:00Z</published>
    <content type="html">&lt;p&gt;En un post anterior vimos cómo desplegar aplicaciones .net en Azure. Bien, Azure Web sites también tiene la capacidad de ejecutar aplicaciones hechas con NodeJs y por supuesto soporta el mismo esquema de despliegue automático. ¿Cómo hacerlo paso a paso? Para este post me basé en este ejemplo de MSDN, a diferencia de mi post anterior ahora estoy usando la versión más actual del portal de Azure. Aplicación de Nodejs sencilla var http = require('http')
var port = process.env.PORT || 1337;
http.createServer(function(req, res) {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello World\n');
}).listen(port); Simplemente nos retorna un string "Hello World" como texto antes un request HTTP Una vez que subimos a GIT nuestro código (en mi caso un repositorio en Bitcucket) no nos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/desplegar-aplicaciones-nodejs-a-azure-desde-git-automaticamente"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>leonardo</dc:creator>
    <dc:date>2015-09-28T01:46:00Z</dc:date>
  </entry>
  <entry>
    <title>JavaScript Module Pattern</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/09/javascript-module-pattern" />
    <category term="javascript" />
    <category term="js-tips" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-09-11T14:53:38Z</updated>
    <published>2015-09-11T14:53:38Z</published>
    <content type="html">&lt;p&gt;JavaScript Module Pattern es uno de los patrones de diseño más típicos en JavaScript y nos ayuda a organizar y aislar las distintas funciones y clases con las que trabajamos. JavaScript por defecto no soporta el concepto de Package/NameSpace.Vamos a ver como implementar en JavaScript este patrón de diseño. 

&lt;html&gt;
&lt;head&gt;
&lt;script type="text/javascript"&gt;

(function(window){

var suma = function(x, y){
return x + y;
}

var resta = function(x, y){
return x - y;
}

var matematicas = {
suma: function(a, b){
return suma(a,b);
},
resta: function(a, b){
return resta(a, b);
}
}

window.matematicas = matematicas;
})(window);

console.log(matematicas.suma(5, 5));
console.log(matematicas.resta(5, 5));

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;

 JavaScript Module Pattern y IIFE El código define dos funciones[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/09/javascript-module-pattern"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-09-11T14:53:38Z</dc:date>
  </entry>
  <entry>
    <title>jQuery getScript y carga dinámica</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/jquery-getscript-y-carga-dinamica" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-23T07:19:40Z</updated>
    <published>2015-07-23T07:19:40Z</published>
    <content type="html">&lt;p&gt;Cada día necesitamos más realizar  la carga dinámica de ficheros de Javascript. Tecnologías como Require.js abordan esta problemática. Pero hay muchas situaciones cotidianas que se pueden resolver de forma más sencilla con algo como jQuery getScript. Utilizando jQuery getScript En el siguiente ejemplo se muestran dos botones  “cargar” y “operar”. El primero de ellos aparece habilitado cuando se carga la página.   El segundo de ellos aparece deshabilitado ya que necesita de un fichero de JavaScript que realiza una operación de sumar y que no hemos cargado inicialmente con la página. 

function suma (a,b) {

return a+b;
}

 Para poder habilitar el segundo botón y pulsarle hay que  cargar previamente el script de la suma.   Para realizar esta operación hay que usar jQuery y su método getScript.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/jquery-getscript-y-carga-dinamica"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-23T07:19:40Z</dc:date>
  </entry>
  <entry>
    <title>Carga asíncrona de datos en ReactJS a través de React Router</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/07/carga-asincrona-de-datos-en-reactjs-a-traves-de-react-router" />
    <category term="javascript" />
    <category term="development" />
    <category term="reactjs" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-07-20T05:06:54Z</updated>
    <published>2015-07-20T05:06:54Z</published>
    <content type="html">&lt;p&gt;Hace poco explicaba cómo utilizar un mixin para cargar datos de forma asíncrona con ReactJS y veíamos que era una solución que nos podía ahorrar bastante código. En este post vamos a ver otra alternativa para realizar la carga de datos externos en nuestros componentes de ReactJS, esta vez aprovechando react-router. Si no lo conoces, puedes ver este mini tutorial de React Router para hacerte una idea de cómo funciona. Simplificando mucho, React Router nos permite definir una estructura de rutas y navegar entre ellas; siendo su característica más interesante que las rutas pueden estar anidadas. Esto implica que para generar la página correspondiente a una ruta pueden verse involucrados varios componentes de ReactJS organizados jerárquicamente, y cada uno de ellos genera una parte de la página.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/07/carga-asincrona-de-datos-en-reactjs-a-traves-de-react-router"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-07-20T05:06:54Z</dc:date>
  </entry>
  <entry>
    <title>Java vs JavaScript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-vs-javascript" />
    <category term="arquitectura-reflexiones" />
    <category term="javascript" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-10T11:07:45Z</updated>
    <published>2015-07-10T11:07:45Z</published>
    <content type="html">&lt;p&gt;Java vs JavaScript comparativa entre las dos plataformas y como la evolución de ambas nos afectará a las Arquitecturas del futuro La entrada Java vs JavaScript aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-vs-javascript"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-10T11:07:45Z</dc:date>
  </entry>
  <entry>
    <title>Un mixin para carga asíncrona de datos en ReactJS</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/07/un-mixin-para-carga-asincrona-de-datos-en-reactjs" />
    <category term="mixin" />
    <category term="javascript" />
    <category term="development" />
    <category term="reactjs" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-07-06T05:06:03Z</updated>
    <published>2015-07-06T05:06:03Z</published>
    <content type="html">&lt;p&gt;Los mixins son para mi una especie de bicho mítico, tal vez porque no los he usado mucho o porque me cuesta sacarles partido, pero lo cierto es que me resultan atractivos (seguramente más de lo que deberían) y de hecho empecé este blog hablando de mixins en C#. Con el uso que le he dado últimamente a ReactJS han vuelto a rondarme por la cabeza y creo que empiezo a ver más casos de aplicación que la mera herencia de implementación que me gustó hace tiempo cuando hablé de mixins en javascript. Recordando qué es un mixin Los mixin son un sistema para reutilizar código y extender clases u objetos existentes añadiéndoles (o mezclándoles, de ahí el nombre) la funcionalidad de otros. Podemos verlos como un mecanismo a medio camino entre la herencia y la composición, y quizá la forma más simple de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/07/un-mixin-para-carga-asincrona-de-datos-en-reactjs"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-07-06T05:06:03Z</dc:date>
  </entry>
</feed>

