<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-02-21T02:03:44Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-02-21T02:03:44Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Java Collections List vs Set (I)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/02/java-collections-list-vs-set-i" />
    <category term="java" />
    <category term="sin-categoria" />
    <category term="flexibilidad" />
    <category term="java-basico" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-02-17T09:56:54Z</updated>
    <published>2015-02-17T09:56:54Z</published>
    <content type="html">&lt;p&gt;Todos usamos el framework de colecciones de Java  para manejar conjuntos de objetos .Vamos a dedicar algunos artículos a abordar las colecciones más importantes. En este artículo vamos a introducir las Listas (List) y los Conjuntos (Set). Para ello vamos a ver en un primer lugar donde encajan ambos en la jerarquía de clases del framework de Colecciones.     En el framework de colecciones el interface más general es Iterable el cual define que una colección se puede recorrer devolviendo para ello un Iterator. Una vez tenemos este interface aparece el interface Collection que define el concepto abstracto de “Colección” que hace referencia a un conjunto de elementos recorribles . Es en este interface en donde se añaden métodos como add() ,remove() y clear() para añadir o eliminar elementos de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/02/java-collections-list-vs-set-i"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-02-17T09:56:54Z</dc:date>
  </entry>
  <entry>
    <title>La palabra clave assert de Java y un ejemplo</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/02/la-palabra-clave-assert-de-java-y-un-ejemplo" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-02-14T22:30:00Z</updated>
    <published>2015-02-13T18:55:54Z</published>
    <content type="html">&lt;p&gt;La palabra clave o reservada assert sirve para aseverar que en un determinado momento del código una determinada condición debe ser cierta. Está disponible en Java desde la versión 1.4 pero al menos yo con bastantes años de experiencia en programación en este lenguaje aún no he usado de forma amplia y posiblemente le pase a mucha de la gente y aún así hemos sobrevivido durante todo este tiempo. Sin embargo, puede resultarnos bastante útil. Una de las situaciones en que puede ayudarnos es para descubrir una condición no válida en el momento del assert y no donde se produce una excepción en otro punto del código que puede no ser la causa real del error. Por ejemplo, supongamos que un método privado no acepta un parámetro con valor null, una variable no puede ser null o una colección no ha de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/02/la-palabra-clave-assert-de-java-y-un-ejemplo"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-02-13T18:55:54Z</dc:date>
  </entry>
  <entry>
    <title>Convertir fechas y husos horarios en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/01/convertir-fechas-y-husos-horarios-en-java" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-02-05T22:00:00Z</updated>
    <published>2015-01-31T10:32:35Z</published>
    <content type="html">&lt;p&gt;Aunque en muchas aplicaciones no será necesario si desarrollamos una aplicación que trabaje con diferentes paises y fechas probablemente deberemos tener en cuenta múltiples husos horarios o zonas horarias. Según estos husos horarios, por ejemplo, en el momento que son las 12:00 en Madrid hora local no son las 12:00 en Buenos Aires, si dos ciudades emplean diferente huso horario hay que tenerlo en cuenta para obtener la hora local en cada ciudad. Hasta la versión 7 de Java el trabajo con fechas era complicado con las clases proporcionadas GregorianCalendar y Date, una alternativa a la API de Java para el manejo de fechas hasta esta versión era emplear la librería JodaTime. JodaTime ofrece una API mejor y más completa para el manejo de fechas hasta la versión de Java 7. Con la nueva API para[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/01/convertir-fechas-y-husos-horarios-en-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-01-31T10:32:35Z</dc:date>
  </entry>
  <entry>
    <title>Fechas y usos horarios en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/01/fechas-y-usos-horarios-en-java" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-01-31T20:00:00Z</updated>
    <published>2015-01-31T10:32:35Z</published>
    <content type="html">&lt;p&gt;Aunque en muchas aplicaciones no será necesario si desarrollamos una aplicación que trabaje con diferentes paises y fechas probablemente deberemos tener en cuenta múltiples usos horarios o zonas horarias. Según estos usos horarios, por ejemplo, en el momento que son las 12:00 en Madrid hora local no son las 12:00 en Buenos Aires, si dos ciudades emplean diferente uso horario hay que tenerlo en cuenta para obtener la hora local en cada ciudad. Hasta la versión 7 de Java el trabajo con fechas era complicado con las clases proporcionadas GregorianCalendar y Date, una alternativa a la API de Java para el manejo de fechas hasta esta versión era emplear la librería JodaTime. JodaTime ofrece una API mejor y más completa para el manejo de fechas hasta la versión de Java 7. Con la nueva API para fechas[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/01/fechas-y-usos-horarios-en-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-01-31T10:32:35Z</dc:date>
  </entry>
  <entry>
    <title>Generar URLs semánticas y amigables</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/10/generar-urls-semanticas-y-amigables" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-01-31T00:00:00Z</updated>
    <published>2014-10-03T18:14:18Z</published>
    <content type="html">&lt;p&gt;En algunas web las urls incluyen el identificativo del objeto de la base de datos a partir de cual se muestra el contenido principal de la página, en Blog Stack esto podría ser un artículo pero en otras páginas webs podría ser un producto. Esto genera direcciones de páginas webs «feas» de cara al usuario y al SEO de los buscadores además de exponer cierta información de la base de datos que probablemente no interese a nadie excepto al desarrollador de la página. En este artículo voy a explicar una forma de generar urls semánticas, «bonitas» o amigables de cara al usuario y al SEO para los buscadores y como lo he implementado en un ejemplo real como es Blog Stack. Lo primero que debemos conseguir es que las direcciones urls sean únicas para cualquier página de la web, por tanto, en la url deberemos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/10/generar-urls-semanticas-y-amigables"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-10-03T18:14:18Z</dc:date>
  </entry>
  <entry>
    <title>Cómo hacer un substring de una cadena HTML</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/01/como-hacer-un-substring-de-una-cadena-html" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="planeta-linux" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-01-16T12:03:52Z</updated>
    <published>2015-01-16T12:03:52Z</published>
    <content type="html">&lt;p&gt;Una de las cosas que he tenido que resolver en Blog Stack es como conseguir un extracto del contenido completo de una cadena que es HTML. Esto lo he usado en los diferentes feeds de Blog Stack donde solo se muestra el extracto de cada artículo y no el texto completo. A primera vista puede parecer fácil pero no lo es tanto, cortar una cadena que es html haciendo un substring puede ocasionar problemas si se hace en un mal punto de la cadena y luego esa cadena cortada se inserta como contenido de nuevo el una página web. Lo más probable que ocurra es una desmaquetación de la página o que los estilos aparezcan mal pero puede dejar estropeada la página completa. Por ejemplo, si tenemos la siguiente cadena y la cortamos en un mal punto y luego insertamos en una página html ese contenido lo que ocurrirá[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/01/como-hacer-un-substring-de-una-cadena-html"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-01-16T12:03:52Z</dc:date>
  </entry>
  <entry>
    <title>Cómo filtrar contenido HTML de forma segura</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/10/como-filtrar-contenido-html-de-forma-segura" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-01-16T11:00:00Z</updated>
    <published>2014-10-17T14:53:25Z</published>
    <content type="html">&lt;p&gt;Algunos sitios y aplicaciones pueden tener la necesidad de «scrapear» el contenido de sitios web para extraer información de ellos y posteriormente usarla de alguna forma. El contenido «scrapeado» o obtenido de una fuente externa debe ser filtrado, si no es filtrado y posteriormente es servido a los usuarios puede enviárseles principalmente scripts con contenido malicioso (provocando un ataque cross-site scripting, XSS) o causar una desmaquetación al visualizar el contenido. A la hora de implementar la agregación de contenido de forma segura en Blog Stack, contenido obtenido de una fuente RSS o Atom pero que en esencia es HTML he usado la librería jsoup, de tal forma que solo el contenido considerado seguro o confiable de los artículos sea agregado. ¿Que puede pasar si en una fuente envía elementos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/10/como-filtrar-contenido-html-de-forma-segura"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-10-17T14:53:25Z</dc:date>
  </entry>
</feed>

