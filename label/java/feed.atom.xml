<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2014-08-22T11:02:50Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2014-08-22T11:02:50Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Forzar el uso del protocolo https en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-08-22T09:09:23Z</updated>
    <published>2014-08-22T09:09:23Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;El &lt;a href="http://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol_Secure"&gt;protocolo seguro https&lt;/a&gt; hace que los datos que viajan entre el servidor y el cliente a trav&amp;eacute;s de internet est&amp;eacute;n cifrados de modo que nadie m&amp;aacute;s pueda saber cual es es la informaci&amp;oacute;n intercambiada ni se pueda alterar sin el conocimiento entre las dos partes. Estas propiedades nos son de inter&amp;eacute;s para ciertas partes de una aplicaci&amp;oacute;n o en algunos casos la aplicaci&amp;oacute;n entera. &amp;iquest;Cuales son estos casos? Son aquellos en los que queramos garantizar una mayor seguridad, estos pueden ser para proteger usuarios y contrase&amp;ntilde;as de autenticaci&amp;oacute;n para iniciar sesi&amp;oacute;n, ciertos datos sensibles como datos personales, datos de tarjetas de cr&amp;eacute;dito, … evitando que una tercera parte los obtenga y los utilice para su provecho propio y supongan un problema de seguridad en la aplicaci&amp;oacute;n.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-08-22T09:09:23Z</dc:date>
  </entry>
  <entry>
    <title>Sabias que el uso de la annotation override nos advierte de errores en el código</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2014/08/sabias-que-el-uso-de-la-annotation-override-nos-advierte-de-errores-en-el-codigo" />
    <category term="programacion" />
    <category term="java-se" />
    <category term="override" />
    <category term="annotation" />
    <category term="java" />
    <category term="sabias-que" />
    <author>
      <name>admin</name>
    </author>
    <updated>2014-08-15T10:23:23Z</updated>
    <published>2014-08-15T10:21:49Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Seguramente muchos de ustedes se habr&amp;aacute;n preguntado &amp;iquest;que hace? o &amp;iquest;para qu&amp;eacute; sirve esa&amp;nbsp;@Override que nos coloca autom&amp;aacute;ticamente el IDE al momento de implementar una interfaz?&amp;nbsp;&amp;iquest;Tendr&amp;aacute; alg&amp;uacute;n beneficio?.&lt;/p&gt; 
&lt;p&gt;Bueno para aquellos con esa interrogante les traigo la respuesta.&lt;/p&gt; 
&lt;p&gt;Pues si, si nos da un beneficio &amp;nbsp;cuando codificamos y consiste en advertirnos de posibles errores de l&amp;oacute;gica o compilaci&amp;oacute;n en los siguientes casos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cuando no&amp;nbsp;estemos sobrescribiendo o implementando ning&amp;uacute;n m&amp;eacute;todo&amp;nbsp;de la interfaz o superclase.&lt;/li&gt; 
 &lt;li&gt;Cuando nos hemos equivocado en la firma del m&amp;eacute;todo a sobrescribir.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;Es por estos beneficios que&amp;nbsp;deber&amp;iacute;amos asumirlo (sobretodo aquellos que venimos de la vieja escuela de Java 1.1, 1.2 o 1.4) como una convenci&amp;oacute;n al momento de programar. Ahora bien vayamos a un ejemplo para ver de lo que estamos hablando.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2014/08/sabias-que-el-uso-de-la-annotation-override-nos-advierte-de-errores-en-el-codigo"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2014-08-15T10:21:49Z</dc:date>
  </entry>
  <entry>
    <title>Java 8 Lambda y forEach (II)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/08/java-8-lambda-y-foreach-ii" />
    <category term="java8" />
    <category term="lambda" />
    <category term="java" />
    <category term="java-basico" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-08-13T07:19:11Z</updated>
    <published>2014-08-13T07:19:11Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Poco a poco las expresiones Lambda se comienzan a utilizar. Una de las novedades es el uso de iteradores forEach en Java 8 . Vamos a explicar como estos funcionan. Para ello vamos a partir de un ejemplo con un bucle forEach cl&amp;aacute;sico que recorre una colecci&amp;oacute;n de Personas:&lt;/p&gt; 
&lt;pre&gt;

package com.arquitecturajava;

import java.util.ArrayList;

public class Principal4 {

 public static void main(String[] args) {

 ArrayList&amp;lt;Persona&amp;gt; milista= new ArrayList&amp;lt;Persona&amp;gt;();
 milista.add(new Persona(&amp;quot;Miguel&amp;quot;));
 milista.add(new Persona(&amp;quot;Alicia&amp;quot;));

 for (Persona p: milista) {

 System.out.println(p.getNombre());
 }

 }

}

&lt;/pre&gt; 
&lt;p&gt;Esta operaci&amp;oacute;n la podemos realizar de similar forma utilizando el m&amp;eacute;todo forEach de Java 8 que las colecciones soportan a trav&amp;eacute;s del interface Iterable. As&amp;iacute; pues el nuevo c&amp;oacute;digo ser&amp;iacute;a :&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/08/java-8-lambda-y-foreach-ii"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-08-13T07:19:11Z</dc:date>
  </entry>
  <entry>
    <title>Usar Apache Tapestry en una aplicación «standalone»</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-31T11:06:58Z</updated>
    <published>2014-07-31T11:06:58Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; es un framework de desarrollo para aplicaciones o p&amp;aacute;ginas web en el que habitualmente se emplea el lenguaje Java y se despliega en un servidor de aplicaciones como entorno de ejecuci&amp;oacute;n. Pero Tapestry es una pieza de software que se compone de diferentes partes algunas de las cuales pueden ser utilizadas fuera del contexto de una aplicaci&amp;oacute;n web. Este es el caso del contenedor de dependencias que proporciona &lt;a href="http://en.wikipedia.org/wiki/Inversion_of_control"&gt;IoC&lt;/a&gt; (IoC, &amp;laquo;Inversion of Control&amp;raquo;) en Tapestry, podemos usarlo en una aplicaci&amp;oacute;n &amp;laquo;standalone&amp;raquo;, es decir, en un programa que se inicia con el t&amp;iacute;pico &amp;laquo;public static void main(String[] args)&amp;raquo; de las aplicaciones Java.&lt;/p&gt; 
&lt;p&gt;El contenedor de dependencias de Tapestry tiene algunas propiedades interesantes como que dos servicios pueden ser mutuamente dependientes y que se puede contribuir configuraci&amp;oacute;n a cualquier servicio para cambiar en cierta medida su comportamiento adem&amp;aacute;s de otras caracter&amp;iacute;sticas que explico m&amp;aacute;s en detalle en el libro &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-31T11:06:58Z</dc:date>
  </entry>
  <entry>
    <title>Servir recursos estáticos desde un CDN en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-26T19:00:00Z</updated>
    <published>2014-07-26T10:35:50Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Un &lt;a href="http://en.wikipedia.org/wiki/Content_delivery_network"&gt;Content Delivery Network&lt;/a&gt; (CDN) no es m&amp;aacute;s que un servidor, servidores o servicio dedicado a servir el contenido est&amp;aacute;tico o actuar de cache para los clientes. Alguno de los motivos por los que podr&amp;iacute;amos querer usar un CDN en una aplicaci&amp;oacute;n son:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Algunos servicios CDN est&amp;aacute;n repartidos geogr&amp;aacute;ficamente por el mundo de modo que el contenido sea servido de un lugar m&amp;aacute;s cercano al usuario esto hace que el tiempo que tarda en cargar un p&amp;aacute;gina o servirse el contenido sea menor.&lt;/li&gt; 
 &lt;li&gt;Descargar la tarea de servir al menos parte del contenido de la aplicaci&amp;oacute;n al CDN har&amp;aacute; que no nos tengamos que preocupar de tener la capacidad para servirlo. Cuando se cargar una p&amp;aacute;gina se hacen varias peticiones al servidor para obtener el contenido como el html, im&amp;aacute;genes, estilos, … haciendo que los contenidos est&amp;aacute;ticos sean servidos por el CDN har&amp;aacute; que el servidor tenga menos carga, dependiendo del n&amp;uacute;mero de usuarios de la aplicaci&amp;oacute;n o los picos de tr&amp;aacute;fico notaremos una mejor&amp;iacute;a.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-26T10:35:50Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a la clase Objects</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2014/07/introduccion-a-la-clase-objects" />
    <category term="programacion" />
    <category term="java-se" />
    <category term="util" />
    <category term="objects" />
    <category term="java-util-objects" />
    <category term="class" />
    <category term="java" />
    <category term="java-7" />
    <author>
      <name>admin</name>
    </author>
    <updated>2014-07-24T22:02:25Z</updated>
    <published>2014-07-24T22:01:01Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Hace algunos meses atr&amp;aacute;s estudiando para la certificaci&amp;oacute;n de java 7, me entere de la existencia de la clase &lt;a title="clase Objects" href="http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html"&gt;java.util.Objects&lt;/a&gt;, esta es una clase utilitaria compuesta en su totalidad de m&amp;eacute;todos est&amp;aacute;ticos que&amp;nbsp;aunque lucen bastante simples, si que resultan de ayuda ahorr&amp;aacute;ndonos algo de trabajo (tedioso), entre estos encontramos algunos para realizar comparaciones as&amp;iacute; como para el calculo del hash de un objeto, o&amp;nbsp;tambi&amp;eacute;n&amp;nbsp;para evitar asignar null a objetos.&lt;/p&gt; 
&lt;p&gt;En este caso creo que no hay mejor forma que verlo en el c&amp;oacute;digo para que podamos apreciar su utilidad.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;pre&gt;import java.util.Objects;

public class ObjectsClassExample {
	
	static class Persona {
		
		private String nombre;
		private int edad;
		
		Persona() {
		}
		
		Persona(String nombre, int edad) {
			this.nombre = Objects.requireNonNull(nombre); //Arroja NullPointerException
			this.edad = edad;							// si el parametro nombre es null
		}

		public String getNombre() {
			return nombre;
		}

		public void setNombre(String nombre) {
						//Arroja NullPointerException si el parametro nombre es null
						//siendo este el mensaje de la exception
			this.nombre = Objects.requireNonNull(nombre, &amp;quot;Es estrictamente necesario pasar un Nombre&amp;quot;);
		}

		public int getEdad() {
			return edad;
		}

		public void setEdad(int edad) {
			this.edad = edad;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			
			Persona persona = (Persona)obj;
			if (edad != persona.edad)
				return false;
			if (!Objects.equals(this.nombre, persona.nombre)) //Compara si ambos objetos son iguales
				return false;
			
			return true;
		}
		
		@Override
		public int hashCode() {
			return Objects.hash(nombre, edad); //calcula el valor hash del conjunto de valores
												//en nuestro caso los atributos nombre y edad
		}
		
		@Override
		public String toString() { //Si el atributo nombre es null entonces 
									//muestra la cadena &amp;quot;Sin Nombre&amp;quot;
			return &amp;quot;{Nombre: &amp;quot; + Objects.toString(nombre, &amp;quot;Sin Nombre&amp;quot;) + &amp;quot; , Edad: &amp;quot; + edad;
		}
		
	}

	public static void main(String[] args) {
		
		Persona p1 = new Persona ();
		Persona p2 = new Persona (&amp;quot;Maria&amp;quot;, 20);
		
		System.out.println(&amp;quot;p1.toString(): &amp;quot; + p1);
		System.out.println(&amp;quot;p2.toString(): &amp;quot; + p2);
		System.out.println(&amp;quot;p1.equals(p2): &amp;quot; + p1.equals(p2));
		System.out.println(&amp;quot;p1.hashCode(): &amp;quot; + p1.hashCode());
		System.out.println(&amp;quot;p2.hashCode(): &amp;quot; + p2.hashCode());
		
		p1.setNombre(&amp;quot;Maria&amp;quot;);
		p1.setEdad(20);
		
		System.out.println(&amp;quot;Despues de asignar valores  -&amp;amp;gt; p1.equals(p2): &amp;quot; + p1.equals(p2));
		System.out.println(&amp;quot;Despues de asignar valores  -&amp;amp;gt;  p1.hashCode(): &amp;quot; + p1.hashCode());
		
		try {
			p1 = new Persona(null, 20);
		} catch (NullPointerException e) {
			System.err.println(&amp;quot;Mensaje: &amp;quot; + e.getMessage());
		}
		
		try {
			p2.setNombre(null);
		} catch (NullPointerException e) {
			System.err.println(&amp;quot;Mensaje: &amp;quot; + e.getMessage());
		}
	}

}&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2014/07/introduccion-a-la-clase-objects"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2014-07-24T22:01:01Z</dc:date>
  </entry>
  <entry>
    <title>Anotación Cached de Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/anotacion-cached-de-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-19T19:00:00Z</updated>
    <published>2014-07-18T19:30:20Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Como he comentado en un art&amp;iacute;culo anterior sobre los &lt;a href="http://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/"&gt;modelos push y pull empleados en los motores de plantillas&lt;/a&gt; donde comentaba algunas diferencias entre ellos, en el modelo pull es la vista la que pide los datos al controlador y no el controlador el que proporciona los datos a la vista como se hace en el modelo push. Un problema que puede plantear el que la vista pida los datos al controlador es que si la devoluci&amp;oacute;n de los datos solicitados son costosos en tiempo del c&amp;aacute;lculo, carga para el sistema en CPU o memoria, o intensivos en entrada/salida de disco o red y se piden varias veces puede suponer como resultado que el tiempo empleado para generar la p&amp;aacute;gina sea elevado o la aplicaci&amp;oacute;n consuma recursos innecesarios.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; que emplea el modelo pull dispone de la &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/anotacion-cached-de-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-18T19:30:20Z</dc:date>
  </entry>
  <entry>
    <title>Java 8 Lambda Expressions (I)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/07/java-8-lambda-expressions-i" />
    <category term="java" />
    <category term="java-basico" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-07-15T06:51:44Z</updated>
    <published>2014-07-15T06:51:44Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Poco a poco Java 8 se va dando a conocer como plataforma de desarrollo e incluye una serie de novedades. Entre las cuales hay que destacar &lt;strong&gt;las lambda expresions (Expresiones Lambda)&lt;/strong&gt; que se echaban bastante ya que otros lenguajes como C# ya soportaban estructuras similares. El uso de Expresiones Lambda nos permitir&amp;aacute; simplificar de forma muy clara algunos de los bloques de c&amp;oacute;digo que constru&amp;iacute;amos hasta ahora. Bloques que en muchos casos hac&amp;iacute;an uso de clases an&amp;oacute;nimas para solventar problemas que una expresi&amp;oacute;n lambda expresa de una forma mucho mas directa. Vamos a ver un sencillo bloque de c&amp;oacute;digo que usa un Comparador para ordenar una lista de Personas.&lt;/p&gt; 
&lt;pre&gt;

package com.arquitecturajava;

public class Persona {

 private String nombre;

public String getNombre() {
 return nombre;
 }

public void setNombre(String nombre) {
 this.nombre = nombre;
 }

public Persona(String nombre) {
 super();
 this.nombre = nombre;
 }
}

&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/07/java-8-lambda-expressions-i"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-07-15T06:51:44Z</dc:date>
  </entry>
  <entry>
    <title>Plantillas en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/plantillas-en-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-11T18:54:34Z</updated>
    <published>2014-07-11T18:54:34Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Una p&amp;aacute;gina web est&amp;aacute; formada por un conjunto de p&amp;aacute;ginas enlazadas entre ellas. Cada p&amp;aacute;gina est&amp;aacute; formado por un html diferente pero normalmente todas las p&amp;aacute;ginas de una misma web comparten el mismo aspecto variando solo una secci&amp;oacute;n donde est&amp;aacute; el contenido propio de la p&amp;aacute;gina. La cabecera de la p&amp;aacute;gina, el pie de la p&amp;aacute;gina o los men&amp;uacute;s de navegaci&amp;oacute;n suelen estar presentes en todas las p&amp;aacute;ginas de la web y suelen ser los mismos.&lt;/p&gt; 
&lt;p&gt;En este art&amp;iacute;culo voy a explicar como crear un componente que nos de a todas las p&amp;aacute;ginas un aspecto com&amp;uacute;n de una aplicaci&amp;oacute;n usando apache Tapestry como framework web de tal forma que esa parte com&amp;uacute;n no est&amp;eacute; duplicada en la aplicaci&amp;oacute;n y pueda ser reutilizada f&amp;aacute;cilmente. En el caso de &lt;a href="http://www.blogstack.info"&gt;Blog Stack&lt;/a&gt; las p&amp;aacute;ginas se componen de las siguientes partes.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/plantillas-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-11T18:54:34Z</dc:date>
  </entry>
  <entry>
    <title>Eclipse Timeout Servidor Tomcat/JBoss Etc</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/07/eclipse-timeout-servidor-tomcat-jboss-etc" />
    <category term="eclipse" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-07-11T05:41:05Z</updated>
    <published>2014-07-11T05:41:05Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Muchas veces cuando trabajamos con &amp;nbsp;Eclipse solemos configurar nuestro servidor de aplicaciones de forma que se integre dentro del entorno a traves de la pesta&amp;ntilde;a de servers.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/0018.png"&gt;&lt;img title="001" src="http://www.arquitecturajava.com/wp-content/uploads/0018.png" alt="" width="777" height="137" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;As&amp;iacute; es mas f&amp;aacute;cil trabajar y realizar las pruebas de nuestras p&amp;aacute;ginas web. Ahora bien en mas de una ocasi&amp;oacute;n me he encontrado en situaciones en las que el servidor tarda mucho en arrancar y Eclipse lanza un mensaje de TimeOut. Es un error t&amp;iacute;pico pero a veces es dif&amp;iacute;cil localizar la pesta&amp;ntilde;a en donde cambiar los valores de Eclipse Timeout.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/0025.png"&gt;&lt;img title="002" src="http://www.arquitecturajava.com/wp-content/uploads/0025.png" alt="" width="385" height="204" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Para solventar este problema de Eclipse Timeout debemos realizar un doble click sobre el servidor seleccionado&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/0018.png"&gt;&lt;img title="001" src="http://www.arquitecturajava.com/wp-content/uploads/0018.png" alt="" width="777" height="137" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Una vez hecho esto nos aparecer&amp;aacute; la siguiente ventana:&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/0033.png"&gt;&lt;img title="003" src="http://www.arquitecturajava.com/wp-content/uploads/0033.png" alt="" width="885" height="332" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Esta ventana es la ventana que se encarga de configurar el servidor . Una vez aqui desplegamos el acordeon de TimeOuts y cambiamos su tiempo.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/07/eclipse-timeout-servidor-tomcat-jboss-etc"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-07-11T05:41:05Z</dc:date>
  </entry>
  <entry>
    <title>Arquitectura y hospedaje de Blog Stack</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/arquitectura-y-hospedaje-de-blog-stack" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-10T19:00:00Z</updated>
    <published>2014-05-16T15:21:55Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/blogstack.png" alt="Blog Stack" title="Blog Stack" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Normalmente en esta bit&amp;aacute;cora suelo poner ejemplos para explicar como funciona una determinada herramienta, son ejemplos que podr&amp;iacute;an aprovecharse para algo productivo pero para mantenerlos simples por si mismos no suelen serlo. En esta entrada voy a comentar cual es la arquitectura y como est&amp;aacute; alojado &lt;a href="http://www.blogstack.info/"&gt;Blog Stack&lt;/a&gt;, que es un ejemplo de algo pr&amp;aacute;ctico y real por si la experiencia de este ejemplo le sirve de ayuda o de inspiraci&amp;oacute;n a alguien. En la red he encontrado comentada la experiencia de &lt;a href="http://damog.nl/blog/the-new-planeta-linux-engine.html"&gt;Planeta Linux&lt;/a&gt; y &lt;a href="http://gallir.wordpress.com/2009/12/30/como-montamos-meneame-en-amazon-ec2/"&gt;Meneame&lt;/a&gt;, otros proyectos web.&lt;/p&gt; 
&lt;p&gt;Blog Stack (BS) es una agregador, planeta, o fuente de informaci&amp;oacute;n de bit&amp;aacute;coras sobre programaci&amp;oacute;n, desarrollo, desarrollo &amp;aacute;gil, software, software libre, hardware, gnu/linux o en general temas relacionados con la tecnolog&amp;iacute;a, en definitiva es un servicio que est&amp;aacute; disponible en una direcci&amp;oacute;n de internet, &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/arquitectura-y-hospedaje-de-blog-stack"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-16T15:21:55Z</dc:date>
  </entry>
  <entry>
    <title>Modelo «push» contra modelo «pull» en frameworks web</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-07T18:00:00Z</updated>
    <published>2014-07-06T08:58:10Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;En la mayor&amp;iacute;a de frameworks de desarrollo de aplicaciones o p&amp;aacute;ginas web para producir el contenido HTML que se env&amp;iacute;a al cliente se emplea un modelo en el que el controlador proporciona los datos que combinados con una plantilla producen el HTML. Este modelo tambi&amp;eacute;n es el empleado habitualmente en muchos motores de plantillas (&lt;a href="http://www.thymeleaf.org/"&gt;thymeleaf&lt;/a&gt;, &lt;a href="http://mustache.github.io/"&gt;mustache&lt;/a&gt;, …). Sin embargo, hay dos modelos que se pueden seguir para producir un texto como resultado dada una plantilla y datos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Push: este es el modelo comentado. El controlador recupera de antemano todos los datos que necesita la vista, el controlador tambi&amp;eacute;n determina la vista o plantilla que se usar. Combinando los datos y la plantilla se produce el resultado.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/30/modelo-push.png" title="Modelo push"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/30/modelo-push.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Los pasos que se siguen en este modelo son:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-06T08:58:10Z</dc:date>
  </entry>
  <entry>
    <title>Java Generics (II) uso  de WildCard</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/07/java-generics-ii-uso-de-wildcard" />
    <category term="genericos" />
    <category term="java" />
    <category term="java-basico" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-07-04T13:18:28Z</updated>
    <published>2014-07-04T13:18:28Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;En este art&amp;iacute;culo vamos a cubrir una de las dudas m&amp;aacute;s habituales que se producen con el manejo &amp;nbsp;Java Generics, el uso del caracter “?” al que se le suele denominar wildcard&amp;nbsp;. Vamos a suponer un ejemplo sencillo en el que tenemos dos clases. La clase Persona y la clase Deportista.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/personadeportista1.gif"&gt;&lt;img src="http://www.arquitecturajava.com/wp-content/uploads/personadeportista1.gif" alt="personadeportista" width="191" height="285" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Podemos crearnos una lista de&amp;nbsp;Personas la cual tenemos que recorrer e imprimir por pantalla. El programa Java ser&amp;iacute;a as&amp;iacute; de sencillo :&lt;/p&gt; 
&lt;pre&gt;

package com.arquitecturajava;

import java.util.ArrayList;
import java.util.List;

public class PrincipalDeportista {
public static void main(String[] args) {

List&amp;lt;Persona&amp;gt; listaPersonas=new ArrayList&amp;lt;Persona&amp;gt;();
listaPersonas.add(new Persona(&amp;quot;pepe&amp;quot;));
listaPersonas.add(new Persona(&amp;quot;maria&amp;quot;));
imprimir(listaPersonas);
}
public static void imprimir(List&amp;lt;Persona&amp;gt; lista) {

for(Persona p:lista) {

System.out.println(p.getNombre());
}

}
}

&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/07/java-generics-ii-uso-de-wildcard"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-07-04T13:18:28Z</dc:date>
  </entry>
  <entry>
    <title>Mi receta para aprobar la Oracle Certified Professional, Java SE 7 Programmer</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2014/07/mi-receta-para-aprobar-la-oracle-certified-professional-java-se-7-programmer" />
    <category term="ocpjp-7" />
    <category term="ocpjp" />
    <category term="scjp-7" />
    <category term="scjp" />
    <category term="programacion" />
    <category term="java-se" />
    <category term="java" />
    <category term="certificaciones" />
    <category term="1z-8-4" />
    <category term="1z-8-5" />
    <category term="cert" />
    <category term="certificacion" />
    <category term="certification" />
    <category term="java-7" />
    <category term="java-se-7" />
    <author>
      <name>admin</name>
    </author>
    <updated>2014-07-03T20:31:43Z</updated>
    <published>2014-07-03T20:31:43Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Ayer presente el examen 1Z0-805 de Oracle para obtener la Oracle Certified Professional, Java SE 7 Programmer y con mucho orgullo (producto de muchas horas de estudio) puedo decirles que la he aprobado con 80%. Llevaba preparandome unos 8 meses, con alguno que otro descanso bien merecido en navidad y semana santa, pero en general fui constante y cada semana dedicaba al menos una (1) o dos (2) horas a hacer ejercicios y/o leer al respecto.&lt;/p&gt; 
&lt;p&gt;Debo admitir que aunque consideraba que habia repasado bastante, el examen fue mas dificil de lo que yo esperaba, pero como ya ven no es imposible. Los objetivos a evaluar en el examen en resumen son&amp;nbsp;los siguientes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Language Enhancements (Mejoras en el lenguaje), que no es m&amp;aacute;s que el &lt;a title="project coin" href="http://openjdk.java.net/projects/coin/"&gt;project coin&lt;/a&gt;: diamond operator (operador &amp;lt;&amp;gt;), try-with-resources, sentencia swith con variables tipo String, etc…&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2014/07/mi-receta-para-aprobar-la-oracle-certified-professional-java-se-7-programmer"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2014-07-03T20:31:43Z</dc:date>
  </entry>
  <entry>
    <title>Hemeroteca #5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/hemeroteca-5" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="linux" />
    <category term="software" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-27T19:10:29Z</updated>
    <published>2014-06-27T19:10:29Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/octopress.png" alt="Octopress" title="Octopress" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Cada seis meses hago un recopilatorio de los art&amp;iacute;culos que he publicado durante este periodo de tiempo. En estos seis meses he mantenido mi ritmo de publicaci&amp;oacute;n de una entrada a la semana que publico casi siempre los viernes a la tarde, en total han sido 26 nuevos art&amp;iacute;culos con este. Los temas tratados durante este tiempo han sido en gran medida la programaci&amp;oacute;n, un poco de linux y la Raspberry Pi y el an&amp;aacute;lisis de un SSD.&lt;/p&gt; 
&lt;p&gt;A destacar durante este semestre ha sido que he publicado un proyecto personal, Blog Stack. &lt;a href="http://www.blogstack.info/"&gt;Blog Stack&lt;/a&gt; es una agregador o planeta de bit&amp;aacute;coras sobre desarrollo, programaci&amp;oacute;n, gnu/linux y tecnolog&amp;iacute;a. A casi todos los bloggeros que le he propuesto agregarle a Blog Stack me han contestado positivamente. 17 son las bit&amp;aacute;coras agregadas actualmente y aunque no son muchas hacen que pr&amp;aacute;cticamente todos los d&amp;iacute;as haya algo nuevo que leer. En un art&amp;iacute;culo hac&amp;iacute;a la presentaci&amp;oacute;n del proyecto y en otro explicaba cual es el funcionamiento en cuanto a hospedaje y arquitectura (interesante para aquellos que quieran realizar un proyecto en internet con un coste m&amp;iacute;nimo). Son los siguientes art&amp;iacute;culos:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/hemeroteca-5"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-27T19:10:29Z</dc:date>
  </entry>
  <entry>
    <title>Eclipse Luna ya está disponible</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/06/eclipse-luna-ya-esta-disponible" />
    <category term="blog-stack" />
    <category term="linux" />
    <category term="noticias" />
    <category term="mike-milinkovich" />
    <category term="desarrollo" />
    <category term="php" />
    <category term="eclipse" />
    <category term="java" />
    <author>
      <name>ochobitshacenunbyte</name>
    </author>
    <updated>2014-06-26T07:53:45Z</updated>
    <published>2014-06-26T07:53:45Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;a href="http://www.ochobitshacenunbyte.com/wp-content/uploads/2014/06/eclipse-logo-150.jpg"&gt;&lt;img src="http://www.ochobitshacenunbyte.com/wp-content/uploads/2014/06/eclipse-logo-150.jpg" alt="eclipse-logo-150" width="150" height="149" /&gt;&lt;/a&gt;La &lt;a title="Eclipse Foundation" href="http://eclipse.org/"&gt;Fundaci&amp;oacute;n Eclipse&lt;/a&gt; acaba de anunciar el lanzamiento de la nueva versi&amp;oacute;n, llamada Luna. Impulsada por una fant&amp;aacute;stica comunidad de desarrolladores, que han raelizado un trabajo duro con el resultado de m&amp;aacute;s de 61 millones de l&amp;iacute;neas de c&amp;oacute;digo. Luna incluye muchas novedades como soporte para Java 8, muchas m&amp;aacute;s bibliotecas y mejoras para el interfaz de usuario.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;h2&gt;El trabajo de toda una comunidad&lt;/h2&gt; 
&lt;p&gt;&lt;strong&gt;Mike Milinkovich,&lt;/strong&gt; director ejecutivo de la Fundaci&amp;oacute;n Eclipse comenta en el anuncio oficial: “&lt;em&gt;Felicidades a todos los desarroladores que hacen posible Eclipse. Es el trabajo duro de estos desarrolladores que hacen posible &amp;eacute;ste lanzamiento. El beneficio para la comunidad en general ha sido que Eclipse es un proveedor fiable y confiable de la tecnolog&amp;iacute;a de c&amp;oacute;digo abierto para la mayor industria de software&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/06/eclipse-luna-ya-esta-disponible"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>ochobitshacenunbyte</dc:creator>
    <dc:date>2014-06-26T07:53:45Z</dc:date>
  </entry>
  <entry>
    <title>Iniciar rápidamente aplicación con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-20T21:08:07Z</updated>
    <published>2014-06-20T21:08:07Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Un proyecto web en Java requiere de unos cuantos archivos con cierta estructura que nos puede llevar un tiempo en crearlos. Normalmente cuando empezamos uno nuevo proyecto solemos basarnos en otro existente copiando y pegando contenido de &amp;eacute;l. Pero ademas de tiempo podemos cometer errores o no seguir algunas convenciones propias de Java o del framework web que usemos. Para un proyecto grande esa dedicaci&amp;oacute;n al inicio del proyecto no nos importar&amp;aacute; pero para un proyecto peque&amp;ntilde;o o para hacer una prueba puede que queramos tener algo m&amp;aacute;s r&amp;aacute;pido y con menos esfuerzo para estar en disposici&amp;oacute;n de empezar a desarrollar en muy poco tiempo.&lt;/p&gt; 
&lt;p&gt;Para crear el esqueleto de una aplicaci&amp;oacute;n r&amp;aacute;pidamente en Tapestry hay disponible un arquetipo de &lt;a href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; que puede generar una aplicaci&amp;oacute;n en unos pocos minutos. Para usarlo deberemos instalar maven previamente. Una vez instalado Maven basta con que usemos el siguiente comando.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-20T21:08:07Z</dc:date>
  </entry>
  <entry>
    <title>Página Dashboard de Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/pagina-dashboard-de-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-13T15:37:24Z</updated>
    <published>2014-06-13T15:37:24Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Con la versi&amp;oacute;n 5.4 de Tapestry las &lt;a href="http://elblogdepicodev.blogspot.com.es/2012/08/paginas-pagecatalog-servicestatus-e.html"&gt;p&amp;aacute;ginas PageCatalog, ServiceStatus e HibernateStaticstis&lt;/a&gt; han sido unificadas en la p&amp;aacute;gina T5Dashboard por lo que ahora en una s&amp;oacute;la p&amp;aacute;gina tendremos toda la informaci&amp;oacute;n. Una de las caracter&amp;iacute;sticas m&amp;aacute;s importantes de Tapestry es ser muy informativo proporcionando mucha y descriptiva informaci&amp;oacute;n, esto se nota con la p&amp;aacute;gina de &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/07/personalizar-la-pagina-de-informe-de-error.html"&gt;informe de error incluso para las peticiones ajax&lt;/a&gt;, los mensajes de logging y con est&amp;aacute;s p&amp;aacute;ginas de informaci&amp;oacute;n de estado.&lt;/p&gt; 
&lt;p&gt;La p&amp;aacute;gina &lt;a href="http://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/corelib/pages/T5Dashboard.html"&gt;T5Dashboard&lt;/a&gt; est&amp;aacute; incluida en el propio core de &lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; y disponible en todas las aplicaciones en modo desarrollo y accediendo de forma local al servidor de aplicaciones. Si se incluye en la aplicaci&amp;oacute;n la dependencia tapestry-hibernate adem&amp;aacute;s en T5Dashboard podremos ver estad&amp;iacute;sticas de uso de Hibernate. La p&amp;aacute;gina T5Dashboard nos puede resultar muy &amp;uacute;til ya que nos proporciona mucha informaci&amp;oacute;n y alguna acci&amp;oacute;n interesante.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/pagina-dashboard-de-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-13T15:37:24Z</dc:date>
  </entry>
  <entry>
    <title>Detectar problema N+1 y obtener estadísticas de Hibernate con Grails</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/detectar-problema-n-1-y-obtener-estadisticas-de-hibernate-con-grails" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="grails" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-13T14:00:00Z</updated>
    <published>2014-05-30T18:30:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/grails.png" alt="Grails" title="Grails" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Una base de datos relacional guarda los datos de forma diferente al modelo orientado a objetos que utilizamos en lenguajes como &lt;a href="http://www.oracle.com/us/technologies/java/overview/index.html"&gt;Java&lt;/a&gt;, &lt;a href="http://www.microsoft.com/net"&gt;C#&lt;/a&gt; o &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;. Los &lt;a href="http://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORM (Object-relational mapping)&lt;/a&gt; tratan de hacer una correspondencia entre los dos modelos, el relacional de las bases de datos y el orientado a objetos de los lenguajes. Una de las ventajas de usar en una aplicaci&amp;oacute;n un ORM para acceder a la base de datos es que podemos hacer una correspondencia entre los datos de una base de datos relacional y trabajar con esos datos utilizando el modelo orientado a objetos del lenguaje de programaci&amp;oacute;n que usemos.&lt;/p&gt; 
&lt;p&gt;Sin embargo, el ORM env&amp;iacute;a sentencias SQL para recuperar los datos de la base de datos relacional seg&amp;uacute;n vamos navegando con los m&amp;eacute;todos de acceso a otros objetos y sus relaciones. Depende de como el ORM haga las consultas para recuperar los datos de la base de datos relacional puede generar muchas SQL, producir un bajo rendimiento en la aplicaci&amp;oacute;n y una carga de trabajo considerable para la base de datos.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/detectar-problema-n-1-y-obtener-estadisticas-de-hibernate-con-grails"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-30T18:30:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejecutar Apache Tapestry en el servidor de aplicaciones WildFly</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-06T18:58:25Z</updated>
    <published>2014-06-06T18:58:25Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/wildfly.png" alt="WildFly" title="WildFly" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Los class loaders del &lt;a href="http://picodotdev.github.io/blog-bitix/2014/02/servidor-de-aplicaciones-jboss-slash-wildfly/"&gt;servidor de aplicaciones JBoss)/WildFly&lt;/a&gt; habitualmente han dado alg&amp;uacute;n problema en la ejecuci&amp;oacute;n de las aplicaciones y la carga de clases. En versiones antiguas como la 4 se pod&amp;iacute;an producir conflictos entre las librer&amp;iacute;as de las aplicaciones y las librer&amp;iacute;as instaladas en el servidor ya que en &lt;a href="http://jbossas.jboss.org/"&gt;JBoss&lt;/a&gt; se buscaba las clases por defecto y primero en el class loader del servidor en vez de en el classloader de la aplicaci&amp;oacute;n (war). Ya en las &amp;uacute;ltimas versiones como JBoss 7 y &lt;a href="http://wildfly.org/"&gt;WildFly&lt;/a&gt; la forma de cargar las clases es m&amp;aacute;s parecido al modelo habitual que se sigue en las aplicaciones Java EE y en servidores como Tomcat buscando primero en el directorio classes WEB-INF/classes y entre las librer&amp;iacute;as de la carpeta WEB-INF/lib del archivo war. Adem&amp;aacute;s, con la inclusi&amp;oacute;n de JBoss Modules se puede seguir un esquema OSGi con lo que incluso podr&amp;iacute;amos usar simultaneamente en el servidor diferentes versiones de la misma librer&amp;iacute;a.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-06T18:58:25Z</dc:date>
  </entry>
  <entry>
    <title>Uso de Java Generics  (I)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/06/uso-de-java-generics-i" />
    <category term="java" />
    <category term="java-basico" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-06-04T05:49:10Z</updated>
    <published>2014-06-04T05:49:10Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Uno de los temas que mas quebraderos de cabeza da a los desarrolladores es la construcci&amp;oacute;n Java Generics o simplemente clases Gen&amp;eacute;ricas.Vamos a escribir&amp;nbsp;algunos art&amp;iacute;culos hablando de este tema .Para empezar con ello vamos a construir&amp;nbsp;&amp;nbsp;la clase Bolsa que es una clase sencilla que nos permitir&amp;aacute; almacenar objetos de varios tipos.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/bolsa.jpg"&gt;&lt;img src="http://www.arquitecturajava.com/wp-content/uploads/bolsa-239x300.jpg" alt="bolsa" width="239" height="300" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Esta clase tendr&amp;aacute; un l&amp;iacute;mite de objetos a almacenar . Alcanzado el limite no se podr&amp;aacute;n a&amp;ntilde;adir mas .Vamos a ver su c&amp;oacute;digo fuente:&lt;/p&gt; 
&lt;pre&gt;

package com.arquitecturajava;

import java.util.ArrayList;
import java.util.Iterator;

public class Bolsa implements Iterable{

private ArrayList lista= new ArrayList();
private int tope;

public Bolsa(int tope) {
super();
this.tope = tope;
}
public void add(Object objeto ) {
if (lista.size()&amp;lt;=tope) {

lista.add(objeto);
}else {

throw new RuntimeException(&amp;quot;no caben mas&amp;quot;);
}

}

public Iterator iterator() {
return lista.iterator();
}

}

&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/06/uso-de-java-generics-i"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-06-04T05:49:10Z</dc:date>
  </entry>
  <entry>
    <title>Página de excepción de Grails</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/pagina-de-excepcion-de-grails" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="grails" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-05-30T18:00:00Z</updated>
    <published>2014-05-23T18:00:19Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/grails.png" alt="Grails" title="Grails" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;No es la primera vez que comento algo similar (&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/08/paginas-pagecatalog-servicestatus-e.html"&gt;I&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com.es/2011/08/motivos-para-elegir-apache-tapestry.html"&gt;II&lt;/a&gt;) disponer de la mayor cantidad de informaci&amp;oacute;n cuando se produce una excepci&amp;oacute;n o un error en la aplicaci&amp;oacute;n es vital para determinar r&amp;aacute;pidamente la causa del error y para solucionarlo correctamente. Para disponer de esta informaci&amp;oacute;n podemos generar un archivo de log que nos permita revisar lo que pas&amp;oacute; en la aplicaci&amp;oacute;n en un determinado momento. En el momento de desarrollo tambi&amp;eacute;n nos puede interesar tener una p&amp;aacute;gina de excepci&amp;oacute;n informativa.&lt;/p&gt; 
&lt;p&gt;La p&amp;aacute;gina de error de &lt;a href="http://grails.org/"&gt;Grails&lt;/a&gt; por defecto da poca informaci&amp;oacute;n, a poco m&amp;aacute;s da la traza de la excepci&amp;oacute;n y un extracto de los archivos relacionados donde se ha producido, podr&amp;iacute;a ser mejor. Podr&amp;iacute;a informar de los par&amp;aacute;metros que se enviaron en la petici&amp;oacute;n, las cabeceras http o las cookies adem&amp;aacute;s de los par&amp;aacute;metros de sesi&amp;oacute;n, a veces esta informaci&amp;oacute;n nos puede servir para identificar la causa m&amp;aacute;s r&amp;aacute;pidamente ya que la excepci&amp;oacute;n puede estar produci&amp;eacute;ndose con el valor de un determinado par&amp;aacute;metro o un determinado navegador, esta informaci&amp;oacute;n no la tenemos en una simple traza de la excepci&amp;oacute;n.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/pagina-de-excepcion-de-grails"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-23T18:00:19Z</dc:date>
  </entry>
  <entry>
    <title>Java y Flexibilidad para (GenbetaDev)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/05/java-y-flexibilidad-para-genbetadev" />
    <category term="sin-categoria" />
    <category term="jee" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-05-23T10:36:30Z</updated>
    <published>2014-05-23T10:36:30Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Hoy comienzo un nuevo proyecto de colaboraci&amp;oacute;n con&amp;nbsp;la gente de&amp;nbsp;&lt;a href="http://www.genbetadev.com/"&gt;GenbetaDev&lt;/a&gt;&amp;nbsp;como nuevo editor encargado sobre todo de escribir sobre tecnolog&amp;iacute;as Java. La verdad es que creo que va ser todo un reto y tendr&amp;eacute; muchas cosas que aprender sobre esta labor tan interesante que es ser editor para un portal de referencia como son ellos. Creo que mis experiencias en mi blog &amp;nbsp;y en CantabriaTic han sido claves para poder abordar este nuevo proyecto con seguridad. Aqu&amp;iacute; os dejo mi primera aportaci&amp;oacute;n al blog&amp;nbsp;de GenbetaDev &amp;nbsp;:&lt;a title="Java y Flexibilidad" href="http://www.genbetadev.com/java-j2ee/java-y-flexibilidad"&gt;Java y flexibilidad.&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;La entrada &lt;a href="http://www.arquitecturajava.com/java-y-flexibilidad-para-genbetadev/"&gt;Java y Flexibilidad para (GenbetaDev)&lt;/a&gt; aparece primero en &lt;a href="http://www.arquitecturajava.com"&gt;Arquitectura Java&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/05/java-y-flexibilidad-para-genbetadev"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-05-23T10:36:30Z</dc:date>
  </entry>
  <entry>
    <title>JMeter Test</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/05/jmeter-test" />
    <category term="jmeter" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-05-06T07:27:31Z</updated>
    <published>2014-05-06T07:27:31Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Hemos introducido JMeter en el art&amp;iacute;culo&lt;a title="Introducci&amp;oacute;n a JMeter y pruebas de carga" href="http://www.arquitecturajava.com/introduccion-jmeter-y-pruebas-de-carga/"&gt; anterior&lt;/a&gt;&amp;nbsp;y realizado una prueba de carga sencilla .&lt;strong&gt;Ahora bien &amp;iquest;cuando usamos JMeter ? .&lt;/strong&gt;La respuesta oficial deber&amp;iacute;a de ser &amp;nbsp;en todas las aplicaciones como parte de nuestro ciclo de calidad de software. Ojal&amp;aacute; esto fuera cierto, la realidad es que …. no lo es …. si que es cierto que poco a poco nos vamos concienciando de que hay que hacer estas pruebas, pero a&amp;uacute;n as&amp;iacute; nos falta mucho . Entonces … &lt;strong&gt;&amp;iquest;cuando usamos JMeter? . &lt;/strong&gt;La respuesta real suele ser cuando un cliente nos llama &lt;strong&gt;y nos dice que la aplicaci&amp;oacute;n funciona realmente mal y va muy lenta&lt;/strong&gt;.Es en ese momento cumbre cuando todo el mundo quiere usar JMeter y realizar los test pertinentes . El problema suele ser que ademas &lt;strong&gt;NO SABE NADA DE JMETER&lt;/strong&gt; y quiere convertirse en un GURU en … pongamos ….. si en unos &amp;nbsp;30 …o 60 minutos ,antes de que los sudores frios le ataquen . &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/05/jmeter-test"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-05-06T07:27:31Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo lista de tareas con Marionette</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-lista-de-tareas-con-marionette" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-04-25T22:59:42Z</updated>
    <published>2013-08-30T12:28:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Marionette" src="http://2.bp.blogspot.com/-ODdQesCGeKg/UiCFBR7_Z_I/AAAAAAAACmg/an6e-SJv-jA/s200/marionette.png" height="200" title="Marionette" width="146" /&gt; 
&lt;/div&gt;Como comentaba en el 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html"&gt;ejemplo de una aplicaci&amp;oacute;n de una lista de tareas en una aplicaci&amp;oacute;n javascript&lt;/a&gt;&amp;nbsp;Backbone es una herramienta que nos puede ayudar mucho a evitar que el c&amp;oacute;digo se nos convierta en dif&amp;iacute;cil de manejar facilit&amp;aacute;ndonos como estructurarlo con los modelos, colecciones y vistas y permiti&amp;eacute;ndonos separar el modelo de la vista actualizando estas &amp;uacute;ltimas a trav&amp;eacute;s de los eventos que produce el modelo y escuchados en las vistas. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;a href="http://backbonejs.org/"&gt;Backbone&lt;/a&gt; es una herramienta que nos da bastante libertad en cuanto a como queremos hacer las cosas y de lo que ofrece podemos usar solo lo que queramos. En algunos casos podemos considerar que Backbone ya es de por si una soluci&amp;oacute;n suficiente pero pero en otros podemos necesitar algo que nos facilite la tarea un poco m&amp;aacute;s, de hecho hay muchas&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-lista-de-tareas-con-marionette"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-08-30T12:28:00Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a JMeter y pruebas de carga</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/04/introduccion-a-jmeter-y-pruebas-de-carga" />
    <category term="jmeter" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-04-24T06:54:04Z</updated>
    <published>2014-04-24T06:54:04Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Normalmente cuando los desarrolladores trabajamos con Java &amp;nbsp;realizamos una toma de requerimientos ,usamos frameworks y desarrollamos c&amp;oacute;digo. Sin embargo en muchas ocasiones me he encontrado con que nos olvidamos un poco de aquellos requerimientos no funcionales .Uno de los mas habituales es el rendimiento . &lt;strong&gt;&amp;iquest; La aplicaci&amp;oacute;n se comporta correctamente con 100 usuarios simultaneos y con mil?&lt;/strong&gt;. Muchas veces estas cosas se olvidan y generan tremendos problemas porque SOLO cuando la aplicaci&amp;oacute;n entra en un entorno de producci&amp;oacute;n real se prueban . Lamentablemente cuando llega a un entorno r&lt;strong&gt;eal y hay PROBLEMAS &amp;nbsp;es muy dif&amp;iacute;cil dar marcha atras y corregirlos.&lt;/strong&gt; JMeter es la herramienta Java mas utilizada para realizar pruebas de carga. Vamos a realizar una introducci&amp;oacute;n a ella.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/04/introduccion-a-jmeter-y-pruebas-de-carga"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-04-24T06:54:04Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo lista de tareas con Backbone, RESTEasy y Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/04/ejemplo-lista-de-tareas-con-backbone-resteasy-y-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-04-04T16:11:56Z</updated>
    <published>2013-04-26T19:38:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Backbone.js" src="http://2.bp.blogspot.com/-SMyoDvx_-j8/UXFvpfyC7iI/AAAAAAAACec/LiLs_goZU4Y/s320/backbone.png" height="56" title="Backbone.js" width="320" /&gt; 
&lt;/div&gt;Normalmente escribo art&amp;iacute;culos con ejemplos que tratan sobre una &amp;uacute;nica tecnolog&amp;iacute;a, al tratar cada tecnolog&amp;iacute;a por separado entender que puede ofrecer es m&amp;aacute;s sencillo pero en una aplicaci&amp;oacute;n real normalmente se usan varias tecnolog&amp;iacute;as combinadas y al mismo tiempo. Esta entrada aunque sigue siendo un ejemplo es mucho m&amp;aacute;s parecido a lo que podr&amp;iacute;a ser una aplicaci&amp;oacute;n real que lo que he explicado durante las &amp;uacute;ltimas entradas. En esta serie sobre javascript he explicado un mont&amp;oacute;n de cosas por separado entre ellas 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html"&gt;RequireJS&lt;/a&gt;,&amp;nbsp; 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html"&gt;Mustache&lt;/a&gt;,&amp;nbsp; 
&lt;a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html"&gt;Backbone&lt;/a&gt;, 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/integracion-tapestry-con-resteasy.htm.html"&gt;servicios rest con Tapestry&lt;/a&gt; y 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/02/ejemplo-sencillo-de-web-service-con-resteasy.html"&gt;RESTEasy&lt;/a&gt;. En esta entrada har&amp;eacute; un ejemplo haciendo uso de todas las anteriores y alguna cosa m&amp;aacute;s adicional como 
&lt;a href="http://twitter.github.io/bootstrap/"&gt;twitter bootstrap&lt;/a&gt;. 
&lt;br /&gt; 
&lt;br /&gt;El ejemplo consiste en una lista de tareas, pudi&amp;eacute;ndose introducir nuevas tareas y marcarlas como realizadas. Tambi&amp;eacute;n se podr&amp;aacute; eliminar de la lista las tareas completadas y ver un resumen con el n&amp;uacute;mero de tareas completadas y de tareas totales.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/04/ejemplo-lista-de-tareas-con-backbone-resteasy-y-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-04-26T19:38:00Z</dc:date>
  </entry>
  <entry>
    <title>Novedades y nuevas características de Java 8</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-28T19:00:00Z</updated>
    <published>2014-03-21T15:03:27Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;El 18 de marzo de 2014 se public&amp;oacute; la nueva versi&amp;oacute;n de la plataforma &lt;a href="http://www.oracle.com/technetwork/java/javase/overview/java8-2100321.html"&gt;Java 8&lt;/a&gt;, Java 7 fue liberada el en julio de 2011. Java 8 incorporar&amp;aacute; varias novedades siguiendo la tendencia de otros lenguajes como la incorporaci&amp;oacute;n de lambdas o closures o una demandada nueva API para el manejo de fechas entre otras muchas caracter&amp;iacute;sticas m&amp;aacute;s. La &lt;a href="http://openjdk.java.net/projects/jdk8/features"&gt;lista completa de novedades&lt;/a&gt; es bastante amplia, a continuaci&amp;oacute;n pondr&amp;eacute; lo que me ha parecido m&amp;aacute;s destacable:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Se a&amp;ntilde;aden las expresiones lambda o closures y se adapta la API para usarlas en los sitios que se pueda.&lt;/li&gt; 
 &lt;li&gt;Se definen nuevos perfiles compactos para dispositivos que no necesitan toda la API Java, esto es una alternativa a la modularizaci&amp;oacute;n. Inicialmente la modularizaci&amp;oacute;n era una caracter&amp;iacute;stica que estaba planificada para Java 8 pero finalmente se ha aplazado a posteriores versiones.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-03-21T15:03:27Z</dc:date>
  </entry>
  <entry>
    <title>Patrones de diseño en la programación orientada a objetos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/03/patrones-de-diseno-en-la-programacion-orientada-a-objetos" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-08T02:25:28Z</updated>
    <published>2012-03-16T19:46:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="107" /&gt; 
&lt;/div&gt;La programaci&amp;oacute;n orientada a objetos (POO) es un paradigma en la que los sistemas se dise&amp;ntilde;an mediante clases y relaciones entre ellas. Se utilizan conceptos como la herencia, polimorfismo, abstraci&amp;oacute;n, encapsulamiento y ocultaci&amp;oacute;n. Resumidamente estas propiedades son: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clase: Abstracci&amp;oacute;n que recoge las propiedades y comportamiento de los objetos en el sistema. Una clase puede instanciarse en objetos tantas veces como se necesite.&lt;/li&gt; 
 &lt;li&gt;Objeto: instancia de una clase que se relaciona con el resto de objetos a trav&amp;eacute;s de los m&amp;eacute;todos definidos en sus clases.&lt;/li&gt; 
 &lt;li&gt;Herencia: las clases no est&amp;aacute;n aisladas y se relacionan entre ellas, mediante esta propiedad forman una jerarqu&amp;iacute;a en la que las clases heredan las propiedades y m&amp;eacute;todos de las clases superiores.&lt;/li&gt; 
 &lt;li&gt;Polimorfismo: es la propiedad de las instancias de las clases, los objetos, por la que pueden responder de forma diferente a un mismo nombre de m&amp;eacute;todo en funci&amp;oacute;n de su tipo concreto.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/03/patrones-de-diseno-en-la-programacion-orientada-a-objetos"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-03-16T19:46:00Z</dc:date>
  </entry>
  <entry>
    <title>Introducción y ejemplo sencillo de Java Message Service (JMS)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-08T00:00:00Z</updated>
    <published>2014-03-07T17:31:22Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition"&gt;La plataforma Java EE&lt;/a&gt; (Java Enterprise Edition) pone a disposici&amp;oacute;n de los desarrolladores varias especificaciones, estas especificaciones describen las funcionalidades y la API que deben proporcionar las implementaciones y proporcionan al desarrollador herramientas para facilitar, hacer mejor las aplicaciones y de forma est&amp;aacute;ndar seg&amp;uacute;n estas especificaciones. Haciendo uso de una de estas especificaciones es posible cambiar de una implementaci&amp;oacute;n a otra de forma transparente y sin modificar ninguna l&amp;iacute;nea de c&amp;oacute;digo de la aplicaci&amp;oacute;n (en teor&amp;iacute;a). Hay especificaciones para persistencia en base de datos (JPA), para transaccionalidad (JTA), para servicios web (JAX-WS ) y REST (JAX-RS) entre otras. En el siguiente enlace puede encontrarse el &lt;a href="https://glassfish.java.net/downloads/ri/"&gt;listado completo de especificaciones y sus versiones de JEE 7&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-03-07T17:31:22Z</dc:date>
  </entry>
</feed>

