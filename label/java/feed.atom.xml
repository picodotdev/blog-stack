<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2014-05-17T22:35:19Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2014-05-17T22:35:19Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Arquitectura y hospedaje de Blog Stack</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/arquitectura-y-hospedaje-de-blog-stack" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-05-16T22:10:00Z</updated>
    <published>2014-05-16T15:21:55Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/blogstack.png" alt="Blog Stack" title="Blog Stack" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Normalmente en esta bit&amp;aacute;cora suelo poner ejemplos para explicar como funciona una determinada herramienta, son ejemplos que podr&amp;iacute;an aprovecharse para algo productivo pero para mantenerlos simples por si mismos no suelen serlo. En esta entrada voy a comentar cual es la arquitectura y como est&amp;aacute; alojado &lt;a href="http://www.blogstack.info/"&gt;Blog Stack&lt;/a&gt;, que es un ejemplo de algo pr&amp;aacute;ctico y real por si la experiencia de este ejemplo le sirve de ayuda o de inspiraci&amp;oacute;n a alguien. En la red he encontrado comentada la experiencia de &lt;a href="http://damog.nl/blog/the-new-planeta-linux-engine.html"&gt;Planeta Linux&lt;/a&gt; y &lt;a href="http://gallir.wordpress.com/2009/12/30/como-montamos-meneame-en-amazon-ec2/"&gt;Meneame&lt;/a&gt;, otros proyectos web.&lt;/p&gt; 
&lt;p&gt;Blog Stack (BS) es una agregador, planeta, o fuente de informaci&amp;oacute;n de bit&amp;aacute;coras sobre programaci&amp;oacute;n, desarrollo, desarrollo &amp;aacute;gil, software, software libre, hardware, gnu/linux o en general temas relacionados con la tecnolog&amp;iacute;a, en definitiva es un servicio que est&amp;aacute; disponible en una direcci&amp;oacute;n de internet, &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/arquitectura-y-hospedaje-de-blog-stack"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-16T15:21:55Z</dc:date>
  </entry>
  <entry>
    <title>JMeter Test</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/05/jmeter-test" />
    <category term="jmeter" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-05-06T07:27:31Z</updated>
    <published>2014-05-06T07:27:31Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Hemos introducido JMeter en el art&amp;iacute;culo&lt;a title="Introducci&amp;oacute;n a JMeter y pruebas de carga" href="http://www.arquitecturajava.com/introduccion-jmeter-y-pruebas-de-carga/"&gt; anterior&lt;/a&gt;&amp;nbsp;y realizado una prueba de carga sencilla .&lt;strong&gt;Ahora bien &amp;iquest;cuando usamos JMeter ? .&lt;/strong&gt;La respuesta oficial deber&amp;iacute;a de ser &amp;nbsp;en todas las aplicaciones como parte de nuestro ciclo de calidad de software. Ojal&amp;aacute; esto fuera cierto, la realidad es que …. no lo es …. si que es cierto que poco a poco nos vamos concienciando de que hay que hacer estas pruebas, pero a&amp;uacute;n as&amp;iacute; nos falta mucho . Entonces … &lt;strong&gt;&amp;iquest;cuando usamos JMeter? . &lt;/strong&gt;La respuesta real suele ser cuando un cliente nos llama &lt;strong&gt;y nos dice que la aplicaci&amp;oacute;n funciona realmente mal y va muy lenta&lt;/strong&gt;.Es en ese momento cumbre cuando todo el mundo quiere usar JMeter y realizar los test pertinentes . El problema suele ser que ademas &lt;strong&gt;NO SABE NADA DE JMETER&lt;/strong&gt; y quiere convertirse en un GURU en … pongamos ….. si en unos &amp;nbsp;30 …o 60 minutos ,antes de que los sudores frios le ataquen . &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/05/jmeter-test"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-05-06T07:27:31Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo lista de tareas con Marionette</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-lista-de-tareas-con-marionette" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-04-25T22:59:42Z</updated>
    <published>2013-08-30T12:28:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Marionette" src="http://2.bp.blogspot.com/-ODdQesCGeKg/UiCFBR7_Z_I/AAAAAAAACmg/an6e-SJv-jA/s200/marionette.png" height="200" title="Marionette" width="146" /&gt; 
&lt;/div&gt;Como comentaba en el 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html"&gt;ejemplo de una aplicaci&amp;oacute;n de una lista de tareas en una aplicaci&amp;oacute;n javascript&lt;/a&gt;&amp;nbsp;Backbone es una herramienta que nos puede ayudar mucho a evitar que el c&amp;oacute;digo se nos convierta en dif&amp;iacute;cil de manejar facilit&amp;aacute;ndonos como estructurarlo con los modelos, colecciones y vistas y permiti&amp;eacute;ndonos separar el modelo de la vista actualizando estas &amp;uacute;ltimas a trav&amp;eacute;s de los eventos que produce el modelo y escuchados en las vistas. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;a href="http://backbonejs.org/"&gt;Backbone&lt;/a&gt; es una herramienta que nos da bastante libertad en cuanto a como queremos hacer las cosas y de lo que ofrece podemos usar solo lo que queramos. En algunos casos podemos considerar que Backbone ya es de por si una soluci&amp;oacute;n suficiente pero pero en otros podemos necesitar algo que nos facilite la tarea un poco m&amp;aacute;s, de hecho hay muchas&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-lista-de-tareas-con-marionette"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-08-30T12:28:00Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a JMeter y pruebas de carga</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/04/introduccion-a-jmeter-y-pruebas-de-carga" />
    <category term="jmeter" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-04-24T06:54:04Z</updated>
    <published>2014-04-24T06:54:04Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Normalmente cuando los desarrolladores trabajamos con Java &amp;nbsp;realizamos una toma de requerimientos ,usamos frameworks y desarrollamos c&amp;oacute;digo. Sin embargo en muchas ocasiones me he encontrado con que nos olvidamos un poco de aquellos requerimientos no funcionales .Uno de los mas habituales es el rendimiento . &lt;strong&gt;&amp;iquest; La aplicaci&amp;oacute;n se comporta correctamente con 100 usuarios simultaneos y con mil?&lt;/strong&gt;. Muchas veces estas cosas se olvidan y generan tremendos problemas porque SOLO cuando la aplicaci&amp;oacute;n entra en un entorno de producci&amp;oacute;n real se prueban . Lamentablemente cuando llega a un entorno r&lt;strong&gt;eal y hay PROBLEMAS &amp;nbsp;es muy dif&amp;iacute;cil dar marcha atras y corregirlos.&lt;/strong&gt; JMeter es la herramienta Java mas utilizada para realizar pruebas de carga. Vamos a realizar una introducci&amp;oacute;n a ella.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/04/introduccion-a-jmeter-y-pruebas-de-carga"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-04-24T06:54:04Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo lista de tareas con Backbone, RESTEasy y Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/04/ejemplo-lista-de-tareas-con-backbone-resteasy-y-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-04-04T16:11:56Z</updated>
    <published>2013-04-26T19:38:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Backbone.js" src="http://2.bp.blogspot.com/-SMyoDvx_-j8/UXFvpfyC7iI/AAAAAAAACec/LiLs_goZU4Y/s320/backbone.png" height="56" title="Backbone.js" width="320" /&gt; 
&lt;/div&gt;Normalmente escribo art&amp;iacute;culos con ejemplos que tratan sobre una &amp;uacute;nica tecnolog&amp;iacute;a, al tratar cada tecnolog&amp;iacute;a por separado entender que puede ofrecer es m&amp;aacute;s sencillo pero en una aplicaci&amp;oacute;n real normalmente se usan varias tecnolog&amp;iacute;as combinadas y al mismo tiempo. Esta entrada aunque sigue siendo un ejemplo es mucho m&amp;aacute;s parecido a lo que podr&amp;iacute;a ser una aplicaci&amp;oacute;n real que lo que he explicado durante las &amp;uacute;ltimas entradas. En esta serie sobre javascript he explicado un mont&amp;oacute;n de cosas por separado entre ellas 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html"&gt;RequireJS&lt;/a&gt;,&amp;nbsp; 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html"&gt;Mustache&lt;/a&gt;,&amp;nbsp; 
&lt;a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html"&gt;Backbone&lt;/a&gt;, 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/integracion-tapestry-con-resteasy.htm.html"&gt;servicios rest con Tapestry&lt;/a&gt; y 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/02/ejemplo-sencillo-de-web-service-con-resteasy.html"&gt;RESTEasy&lt;/a&gt;. En esta entrada har&amp;eacute; un ejemplo haciendo uso de todas las anteriores y alguna cosa m&amp;aacute;s adicional como 
&lt;a href="http://twitter.github.io/bootstrap/"&gt;twitter bootstrap&lt;/a&gt;. 
&lt;br /&gt; 
&lt;br /&gt;El ejemplo consiste en una lista de tareas, pudi&amp;eacute;ndose introducir nuevas tareas y marcarlas como realizadas. Tambi&amp;eacute;n se podr&amp;aacute; eliminar de la lista las tareas completadas y ver un resumen con el n&amp;uacute;mero de tareas completadas y de tareas totales.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/04/ejemplo-lista-de-tareas-con-backbone-resteasy-y-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-04-26T19:38:00Z</dc:date>
  </entry>
  <entry>
    <title>Novedades y nuevas características de Java 8</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-28T19:00:00Z</updated>
    <published>2014-03-21T15:03:27Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;El 18 de marzo de 2014 se public&amp;oacute; la nueva versi&amp;oacute;n de la plataforma &lt;a href="http://www.oracle.com/technetwork/java/javase/overview/java8-2100321.html"&gt;Java 8&lt;/a&gt;, Java 7 fue liberada el en julio de 2011. Java 8 incorporar&amp;aacute; varias novedades siguiendo la tendencia de otros lenguajes como la incorporaci&amp;oacute;n de lambdas o closures o una demandada nueva API para el manejo de fechas entre otras muchas caracter&amp;iacute;sticas m&amp;aacute;s. La &lt;a href="http://openjdk.java.net/projects/jdk8/features"&gt;lista completa de novedades&lt;/a&gt; es bastante amplia, a continuaci&amp;oacute;n pondr&amp;eacute; lo que me ha parecido m&amp;aacute;s destacable:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Se a&amp;ntilde;aden las expresiones lambda o closures y se adapta la API para usarlas en los sitios que se pueda.&lt;/li&gt; 
 &lt;li&gt;Se definen nuevos perfiles compactos para dispositivos que no necesitan toda la API Java, esto es una alternativa a la modularizaci&amp;oacute;n. Inicialmente la modularizaci&amp;oacute;n era una caracter&amp;iacute;stica que estaba planificada para Java 8 pero finalmente se ha aplazado a posteriores versiones.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-03-21T15:03:27Z</dc:date>
  </entry>
  <entry>
    <title>Patrones de diseño en la programación orientada a objetos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/03/patrones-de-diseno-en-la-programacion-orientada-a-objetos" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-08T02:25:28Z</updated>
    <published>2012-03-16T19:46:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="107" /&gt; 
&lt;/div&gt;La programaci&amp;oacute;n orientada a objetos (POO) es un paradigma en la que los sistemas se dise&amp;ntilde;an mediante clases y relaciones entre ellas. Se utilizan conceptos como la herencia, polimorfismo, abstraci&amp;oacute;n, encapsulamiento y ocultaci&amp;oacute;n. Resumidamente estas propiedades son: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clase: Abstracci&amp;oacute;n que recoge las propiedades y comportamiento de los objetos en el sistema. Una clase puede instanciarse en objetos tantas veces como se necesite.&lt;/li&gt; 
 &lt;li&gt;Objeto: instancia de una clase que se relaciona con el resto de objetos a trav&amp;eacute;s de los m&amp;eacute;todos definidos en sus clases.&lt;/li&gt; 
 &lt;li&gt;Herencia: las clases no est&amp;aacute;n aisladas y se relacionan entre ellas, mediante esta propiedad forman una jerarqu&amp;iacute;a en la que las clases heredan las propiedades y m&amp;eacute;todos de las clases superiores.&lt;/li&gt; 
 &lt;li&gt;Polimorfismo: es la propiedad de las instancias de las clases, los objetos, por la que pueden responder de forma diferente a un mismo nombre de m&amp;eacute;todo en funci&amp;oacute;n de su tipo concreto.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/03/patrones-de-diseno-en-la-programacion-orientada-a-objetos"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-03-16T19:46:00Z</dc:date>
  </entry>
  <entry>
    <title>Introducción y ejemplo sencillo de Java Message Service (JMS)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-08T00:00:00Z</updated>
    <published>2014-03-07T17:31:22Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition"&gt;La plataforma Java EE&lt;/a&gt; (Java Enterprise Edition) pone a disposici&amp;oacute;n de los desarrolladores varias especificaciones, estas especificaciones describen las funcionalidades y la API que deben proporcionar las implementaciones y proporcionan al desarrollador herramientas para facilitar, hacer mejor las aplicaciones y de forma est&amp;aacute;ndar seg&amp;uacute;n estas especificaciones. Haciendo uso de una de estas especificaciones es posible cambiar de una implementaci&amp;oacute;n a otra de forma transparente y sin modificar ninguna l&amp;iacute;nea de c&amp;oacute;digo de la aplicaci&amp;oacute;n (en teor&amp;iacute;a). Hay especificaciones para persistencia en base de datos (JPA), para transaccionalidad (JTA), para servicios web (JAX-WS ) y REST (JAX-RS) entre otras. En el siguiente enlace puede encontrarse el &lt;a href="https://glassfish.java.net/downloads/ri/"&gt;listado completo de especificaciones y sus versiones de JEE 7&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-03-07T17:31:22Z</dc:date>
  </entry>
  <entry>
    <title>Integración continua con Jenkins</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2011/09/integracion-continua-con-jenkins" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-07T23:31:52Z</updated>
    <published>2011-09-02T18:16:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em; text-align: left;"&gt; 
 &lt;img alt="Jenkins" src="http://1.bp.blogspot.com/-VDA-zXScjY8/TmEXmNUTE4I/AAAAAAAAA-M/9Ox1D_VDmvQ/s200/jenkins.png" height="63" title="Jenkins" width="200" /&gt; 
&lt;/div&gt;Jenkins es una herramienta de 
&lt;a href="http://en.wikipedia.org/wiki/Continuous_integration"&gt;integraci&amp;oacute;n continua&lt;/a&gt; (CI) que permite realizar tareas peri&amp;oacute;dicas y autom&amp;aacute;ticamente como generar el archivo del proyecto o ejecutar los casos de prueba. Usar una herramienta de integraci&amp;oacute;n continua tiene varios beneficios como detectar problemas de forma temprana haciendo que sean m&amp;aacute;s f&amp;aacute;ciles de resolver y automatizar procesos repetitivos que nos liberan de tiempo. Todo ello en un entorno independiente de los de desarrollo. 
&lt;br /&gt; 
&lt;br /&gt;Su instalaci&amp;oacute;n y uso es muy sencillo basta con descargar u archivo .war y arrancarlo con: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;pre&gt;java -jar jenkins.war&lt;/pre&gt; 
&lt;/div&gt; 
&lt;br /&gt;O desplegarlo en un contenedor de aplicaciones como Tomcat ya que es una aplicaci&amp;oacute;n web java. Su configuraci&amp;oacute;n se puede hacer completamente desde la interfaz de usuario que proporciona. Algunas otras caracter&amp;iacute;sticas de Jenkins son:&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2011/09/integracion-continua-con-jenkins"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2011-09-02T18:16:00Z</dc:date>
  </entry>
  <entry>
    <title>Componente AjaxSpinner para Tapestry 5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2011/09/componente-ajaxspinner-para-tapestry-5" />
    <category term="programacion" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-06T08:46:40Z</updated>
    <published>2011-09-09T19:09:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" height="133" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt;Hoy en d&amp;iacute;a las aplicaciones web que hace peticiones de forma as&amp;iacute;ncrona con AJAX son la mayor&amp;iacute;a ya que es una t&amp;eacute;cnica que permite obtener &amp;uacute;nicamente los datos que se necesitan sin tener que hacer una cargar entera de la p&amp;aacute;gina web en el navegador. Esta t&amp;eacute;cnica hace que las peticiones al devolver &amp;uacute;nicamente los datos necesarios (y no toda la p&amp;aacute;gina) y los recursos para procesar la petici&amp;oacute;n sean menos, tambi&amp;eacute;n hace que el resultado de las peticiones sean m&amp;aacute;s peque&amp;ntilde;os con lo que el tiempo de carga tambi&amp;eacute;n se reduce al generar menos tŕafico de red, asi mismo el usuario nota un aumento de tiempo de respuesta. Tambi&amp;eacute;n hace que en ciertos casos las aplicaciones sean m&amp;aacute;s f&amp;aacute;ciles de desarrollar por no tener que tratar en el servidor en cada petici&amp;oacute;n el estado concreto de cada cliente.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2011/09/componente-ajaxspinner-para-tapestry-5"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2011-09-09T19:09:00Z</dc:date>
  </entry>
  <entry>
    <title>Documentación sobre Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2010/05/documentacion-sobre-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-14T23:34:46Z</updated>
    <published>2010-05-24T18:46:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em; text-align: center;"&gt; 
 &lt;img alt="Apache Tapestry" src="http://1.bp.blogspot.com/_9zOwWD_PYL8/TOq7Y6w6wfI/AAAAAAAAAiU/DPBnmc4-2Sw/s320/tapestry.png" height="132" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt; 
&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; ha sido para mi, con diferencia sobre el resto &amp;nbsp;(JSF, Struts 1 y &amp;uacute;ltimamente Grails), el mejor framework para desarrollar aplicaciones web en Java que he probado, adem&amp;aacute;s de ser un placer programar con &amp;eacute;l siempre que he podido. Tambi&amp;eacute;n he le&amp;iacute;do bastantes buenas cr&amp;iacute;ticas y argumentos en varios blogs y art&amp;iacute;culos destacando varios de sus aspectos y compar&amp;aacute;ndolo con otros frameworks similares ( 
&lt;a href="http://wicket.apache.org/"&gt;Wicket&lt;/a&gt;, 
&lt;a href="http://struts.apache.org/"&gt;Struts&lt;/a&gt;, JSF y alg&amp;uacute;n otro). En esta entrada quiero ir recogiendo todos los enlaces de documentaci&amp;oacute;n que vaya encontrando sobre este framework ya que a pesar de que el framework es excelente la documentaci&amp;oacute;n a d&amp;iacute;a de hoy no es tan abundante&amp;nbsp;no toda est&amp;aacute; centralizada en la web del proyecto, lo que puede ser un problema para alguien que este empezando. Por fortuna, la documentaci&amp;oacute;n es suficiente para llegar a comprender como funciona y hay algunos buenos libros publicados. Este framework le hace la vida m&amp;aacute;s f&amp;aacute;cil al programador en varias de las tareas m&amp;aacute;s comunes de toda aplicaci&amp;oacute;n web. As&amp;iacute; que si estas cansado de JSF, de Struts o de el framework [pon aqu&amp;iacute; el que uses] que no te permite disfrutar mientras desarrollas o te complica las cosas m&amp;aacute;s de lo necesario te animo a que pruebes Tapestry quiz&amp;aacute; sea lo que est&amp;aacute;s buscando. Puedes empezar por el&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2010/05/documentacion-sobre-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2010-05-24T18:46:00Z</dc:date>
  </entry>
  <entry>
    <title>Libro sobre desarrollo de aplicaciones con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/07/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-linux" />
    <category term="tecnologia" />
    <category term="software-libre" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-14T20:12:44Z</updated>
    <published>2013-07-24T17:06:00Z</published>
    <content type="html">&lt;p&gt;Recientemente he publicado 
&lt;a href="http://goo.gl/Vx8icI"&gt;PlugIn Tapestry&lt;/a&gt;, un libro acerca del desarrollo de aplicaciones web en el lenguaje Java y con el framework 
&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt;. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;div style="clear: both; text-align: center;"&gt; 
  &lt;a href="http://goo.gl/WFQgY"&gt;&lt;img alt="PlugIn Tapestry" src="http://1.bp.blogspot.com/-CUcQ3fWr9Yw/Ue7FYGDd_SI/AAAAAAAACls/eLuRuVvRz7w/s320/PlugInTapestry.png" height="320" style="border-color: red; border-style: solid; border-width: 1px;" title="PlugIn Tapestry" width="226" /&gt;&lt;/a&gt; 
 &lt;/div&gt;Apache Tapestry es un framework orientado a componentes para crear aplicaciones web r&amp;aacute;pidas, din&amp;aacute;micas, robustas y altamente escalables en la plataforma Java. Al basarse en componentes es distinto de los muchos basados en acciones similares en esencia a Struts que podemos encontrar en la plataforma Java como SpringMVC, Grails y Play! y tambi&amp;eacute;n de los muchos otros en los que la principal diferencia es el lenguaje como Django (Python), Symfony (PHP), .NET MVC (C#) o Ruby On Rails (Ruby). 
 &lt;br /&gt; 
 &lt;br /&gt;Incluyendo la descripci&amp;oacute;n de las caracter&amp;iacute;sticas del framework el libro trata la mayor&amp;iacute;a de aspectos que puede necesitar una aplicaci&amp;oacute;n o p&amp;aacute;gina web, entre ellos: 
&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/07/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-07-24T17:06:00Z</dc:date>
  </entry>
  <entry>
    <title>Libro sobre desarrollo de aplicaciones con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-14T19:10:34Z</updated>
    <published>2014-02-14T19:10:34Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Hace unos meses publiqu&amp;eacute; el libro PlugIn Tapestry, un libro acerca del desarrollo de aplicaciones y p&amp;aacute;ginas web en el lenguaje Java y con el framework &lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;PlugIn Tapestry&lt;/h2&gt; 
&lt;p&gt;Apache Tapestry es un framework orientado a componentes para crear aplicaciones web r&amp;aacute;pidas, din&amp;aacute;micas, robustas y altamente escalables en la plataforma Java. Al basarse en componentes es distinto de los muchos basados en acciones similares en esencia a Struts que podemos encontrar en la plataforma Java como &lt;a href="http://projects.spring.io/spring-framework/"&gt;Spring&lt;/a&gt;, &lt;a href="http://grails.org/"&gt;Grails&lt;/a&gt; y &lt;a href="http://www.playframework.com/"&gt;Play!&lt;/a&gt; y tambi&amp;eacute;n de los muchos otros en los que la principal diferencia es el lenguaje como &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; (Python), &lt;a href="http://symfony.com/"&gt;Symfony&lt;/a&gt; (PHP), &lt;a href="http://www.asp.net/mvc"&gt;ASP.NET MVC&lt;/a&gt; (C#) o &lt;a href="http://rubyonrails.org/"&gt;Ruby On Rails&lt;/a&gt; (Ruby).&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry.png" title="Libro sobre Apache Tapestry"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry-thumb.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Incluyendo la descripci&amp;oacute;n de las caracter&amp;iacute;sticas del framework el libro trata la mayor&amp;iacute;a de aspectos que puede necesitar una aplicaci&amp;oacute;n o p&amp;aacute;gina web, entre ellos:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-02-14T19:10:34Z</dc:date>
  </entry>
  <entry>
    <title>Presentación sobre Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/02/presentacion-sobre-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-14T15:05:53Z</updated>
    <published>2014-02-14T15:05:53Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
&lt;/div&gt; 
&lt;p&gt;El 10 de febrero tuve la oportunidad de dar una charla, la primera, sobre &lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; para el equipo de desarrolladores de la empresa en la que trabajo. Que en el equipo de desarrollo tengamos la posibilidad de vez en cuando dedicar un par de horas para juntarnos y compartir conocimiento es una buena iniciativa ya que siendo ya un equipo bastante grande de personas y con un nivel t&amp;eacute;cnico elevado cada uno tiene un conocimiento que los dem&amp;aacute;s pueden estar interesados en conocer al menos a nivel superficial, es motivador tener estas oportunidades.&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/11/presentacion-apache-tapestry.jpg" title="Presentaci&amp;oacute;n sobre Apache Tapestry"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/11/presentacion-apache-tapestry-thumb.jpg" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Fue una charla simplemente como cultura general ya que el framework y el lenguaje que usamos como pila tecnol&amp;oacute;gica es &lt;a href="http://grails.org/"&gt;Grails&lt;/a&gt; y &lt;a href="http://groovy.codehaus.org/"&gt;Groovy&lt;/a&gt; y eso es complicado que cambie. Otro motivo fue poder compartir el conocimiento de este framework para el desarrollo de aplicaciones y p&amp;aacute;ginas web que a mi me gusta mucho. Si est&amp;aacute;s suscrito al &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/02/presentacion-sobre-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-02-14T15:05:53Z</dc:date>
  </entry>
  <entry>
    <title>Servidor de aplicaciones JBoss/WildFly</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/02/servidor-de-aplicaciones-jboss-wildfly" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-07T21:35:31Z</updated>
    <published>2014-02-07T21:35:31Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/wildfly.png" alt="WildFly" title="WildFly" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Para una peque&amp;ntilde;a (o no tan peque&amp;ntilde;a) aplicaci&amp;oacute;n web desarrollada en la plataforma Java un servidor como &lt;a href="http://tomcat.apache.org/"&gt;Tomcat&lt;/a&gt; o &lt;a href="http://www.eclipse.org/jetty/"&gt;Jetty&lt;/a&gt; es suficiente. Pero una aplicaci&amp;oacute;n grande o un entorno empresarial probablemente empiece a requerir funcionalidades que Tomcat no proporciona de por si. En algunos casos una librer&amp;iacute;a puede suplir esta carencia, este podr&amp;iacute;a ser el caso de &lt;a href="http://hibernate.org/"&gt;Hibernate&lt;/a&gt; para la persistencia o &lt;a href="http://shiro.apache.org/"&gt;Apache Shiro&lt;/a&gt; para la seguridad de la aplicaci&amp;oacute;n. Sin embargo, cuando sea posible y tenga sentido es buena idea seguir alguna de las especificaciones o &lt;a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition"&gt;APIs que proporciona la plataforma JEE&lt;/a&gt; ya que de esta manera podremos cambiar de implementaci&amp;oacute;n sin necesidad de modificar el c&amp;oacute;digo de la aplicaci&amp;oacute;n y permite integrar dos sistemas diferentes si ambos siguen una determinada especificaci&amp;oacute;n. Un ejemplo podr&amp;iacute;a ser el caso de Hibernate con la especificaci&amp;oacute;n JPA que proporciona una funcionalidad equivalente (de hecho esta especificaci&amp;oacute;n se basa en Hibernate y se puede usar Hibernate como implementaci&amp;oacute;n a trav&amp;eacute;s de la API que define JPA) o de integraci&amp;oacute;n de sistemas con JMS.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/02/servidor-de-aplicaciones-jboss-wildfly"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-02-07T21:35:31Z</dc:date>
  </entry>
  <entry>
    <title>Librerías de logging para Java (slf4j, log4j, java.util.logging, logback, MentaLog)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/04/librerias-de-logging-para-java-slf4j-log4j-java-util-logging-logback-mentalog" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-31T17:42:13Z</updated>
    <published>2012-04-26T18:58:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" height="200" title="Java" width="107" /&gt; 
&lt;/div&gt;Pr&amp;aacute;cticamente toda aplicaci&amp;oacute;n incluye un sistema para emitir trazas con informaci&amp;oacute;n relevate de lo que est&amp;aacute; realizando a un fichero o a la salida est&amp;aacute;ndar. Dependiendo de la informaci&amp;oacute;n y detalle de la misma esta puede ser muy &amp;uacute;til para determinar la causa de un posible fallo o alg&amp;uacute;n mal funcionamiento de la aplicaci&amp;oacute;n ya que el log es un registro no solo de la excepci&amp;oacute;n producida sino tambi&amp;eacute;n de su contexto con las acciones anteriores realizadas. Tambi&amp;eacute;n puede servir para monitorizar en tiempo real las acciones que est&amp;aacute; llevando a cabo el sistema que de otra forma no podr&amp;iacute;amos realizar o ser&amp;iacute;a utilizando herramientas m&amp;aacute;s complejas. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="slf4j" src="http://4.bp.blogspot.com/-rSD_DRFz_AQ/T5mWY_T1dyI/AAAAAAAABF0/JnUxURh8TqA/s200/slf4j.jpg" height="85" title="slf4j" width="200" /&gt; 
&lt;/div&gt;Generar trazas en una aplicaci&amp;oacute;n es muy barato y simple comparado con la informaci&amp;oacute;n que puede proporcionar, su utilidad y tiempo que puede ahorrar a la hora de descubrir problemas. B&amp;aacute;sicamente, las trazas que queremos generar las insertamos dentro del propio c&amp;oacute;digo de la aplicaci&amp;oacute;n que est&amp;aacute;n compuestas del mensaje que queremos emitir, el nivel de la traza y la categor&amp;iacute;a a la misma. El mensaje puede ser cualquier cadena que queramos que creamos que nos puede ser &amp;uacute;til pudiendo contener datos procedentes de variables o cualquier otra cosa de la que pueda disponer el programa. Los niveles de las trazas en muchos sistemas son las siguientes por orden de relevancia de mayor a menor: fatal, error, warn, info, debug. Estos niveles de las trazas nos pemitir&amp;aacute;n utilizalos posteriormente para en tiempo de ejecuci&amp;oacute;n y mendiante la configuraci&amp;oacute;n del sistema de logging filtrar las mismas por el nivel que queramos pudiendo obtener &amp;uacute;nicamente las trazas de nivel warn o superior. Las categor&amp;iacute;as representan la pieza dentro de nuestro sistema que emite la traza que tambi&amp;eacute;n podremos utilizar para filtrar los mensajes que queramos. Por supuesto, podremos utilizar las combinaciones de nivel y categor&amp;iacute;a que queramos teniendo en nuestras manos un sistema muy flexible para obtener la informaci&amp;oacute;n que queramos y que genere la aplicaci&amp;oacute;n.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/04/librerias-de-logging-para-java-slf4j-log4j-java-util-logging-logback-mentalog"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-04-26T18:58:00Z</dc:date>
  </entry>
  <entry>
    <title>Logging usando marcadores con slf4j y logback</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-31T16:10:17Z</updated>
    <published>2014-01-31T16:10:17Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Un sistema de logging en una aplicaci&amp;oacute;n es indispensable para saber lo que est&amp;aacute; sucediendo en la aplicaci&amp;oacute;n en el mismo momento o pasado un tiempo. Es de gran utilidad tanto para en el momento de desarrollar la aplicaci&amp;oacute;n como para una vez puesta en producci&amp;oacute;n. Con el registro de las trazas podemos obtener informaci&amp;oacute;n que nos permitir&amp;aacute; descubrir un error o averiguar m&amp;aacute;s f&amp;aacute;cilmente y r&amp;aacute;pidamente porque sucede alg&amp;uacute;n comportamiento que no es como se espera.&lt;/p&gt; 
&lt;p&gt;En Java hay varios sistemas de logging entre los m&amp;aacute;s utilizados est&amp;aacute;n &lt;a href="http://logging.apache.org/log4j/1.2/"&gt;log4j&lt;/a&gt;, &lt;a href="http://logback.qos.ch/"&gt;logback&lt;/a&gt;, &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html"&gt;java.util.logging&lt;/a&gt; y la capa de abstracci&amp;oacute;n &lt;a href="http://www.slf4j.org/"&gt;slf4j&lt;/a&gt; sobre varios de estas librer&amp;iacute;as. En estas librer&amp;iacute;as de logging las trazas se emiten a trav&amp;eacute;s de un logger que normalmente se corresponde con el nombre de la clase en la que se emite la traza. De esta forma las trazas se pueden filtrar por el nivel de importancia de la traza (debug, info, warn, …) y por el nombre del logger de forma que podemos obtener un registro de las trazas emitidas por los loggers que deseamos.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-01-31T16:10:17Z</dc:date>
  </entry>
  <entry>
    <title>Como devolver un archivo con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/11/como-devolver-un-archivo-con-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software-libre" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-30T18:07:53Z</updated>
    <published>2012-11-10T13:20:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" height="133" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt;En esta entrada voy a explicar como enviar un archivo al cliente desde el servidor usando el framework Apache Tapestry. Esto es necesario si por ejemplo nuestra aplicaci&amp;oacute;n necesita generar un informe ya sea en formato txt, excel, pdf, 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/10/crear-un-archivo-zip-con-java.html"&gt;un archivo comprimido&lt;/a&gt; o de cualquier otro tipo. 
&lt;br /&gt; 
&lt;br /&gt;En tapestry el proceso no es muy complicado, tan solo deberemos devolver un objeto que implemente la 
&lt;a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/StreamResponse.html"&gt;interfaz StreamResponse&lt;/a&gt; en el manejador de evento (&amp;laquo;event handler&amp;raquo;) que procesa la petici&amp;oacute;n. 
&lt;br /&gt; 
&lt;br /&gt;Aqu&amp;iacute; el c&amp;oacute;digo de parte de un manejador de evento que construye y devuelve un objeto que implementa la interfaz StreamResponse: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;script src="https://gist.github.com/4051027.js?file=Page.java"&gt;&lt;/script&gt; Una posible implementaci&amp;oacute;n de la clase StreamResponse podr&amp;iacute;a ser la siguiente que podr&amp;iacute;amos reutilizar siempre que tengamos que devolver un archivo:&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/11/como-devolver-un-archivo-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-11-10T13:20:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño State</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-del-patron-de-diseno-state" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-24T21:16:44Z</updated>
    <published>2013-08-24T20:17:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="107" /&gt; 
&lt;/div&gt;Un patr&amp;oacute;n de dise&amp;ntilde;o aplicado adecuadamente para resolver un problema puede ayudar enormemente a simplificar el c&amp;oacute;digo y facilitar el mantenimiento. Si tenemos un c&amp;oacute;digo que es dif&amp;iacute;cil de mantener y entender, hay c&amp;oacute;digo duplicado y no tiene ninguna organizaci&amp;oacute;n puede que aplicar un patr&amp;oacute;n de dise&amp;ntilde;o nos resuelva el problema en gran parte. 
&lt;br /&gt; 
&lt;br /&gt;Hace ya un tiempo comente 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.html"&gt;cuales son los principales patrones de dise&amp;ntilde;o&lt;/a&gt; y hice una entrada con un 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html"&gt;ejemplo del patr&amp;oacute;n de dise&amp;ntilde;o Command&lt;/a&gt;. En esta entrada pondr&amp;eacute; un ejemplo del patr&amp;oacute;n de dise&amp;ntilde;o State. 
&lt;br /&gt; 
&lt;br /&gt;El patr&amp;oacute;n de dise&amp;ntilde;o State nos puede ser de mucha utilidad en los casos que por ejemplo una entidad tenga asociado un grafo de estados con transiciones permitidas y no permitidas entre algunos estados. En funci&amp;oacute;n del estado, sus datos y la transici&amp;oacute;n la entidad puede comportarse de forma diferente. Por ejemplo, supongamos que tenemos una entidad Compra que a lo largo de su vida en la aplicaci&amp;oacute;n pasa por diferentes estados:&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-del-patron-de-diseno-state"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-08-24T20:17:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño Command y programación concurrente en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/04/ejemplo-del-patron-de-diseno-command-y-programacion-concurrente-en-java" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-24T21:16:18Z</updated>
    <published>2012-04-13T19:58:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="106" /&gt; 
&lt;/div&gt;En la actualizad los procesadores est&amp;aacute;n aumentando su capacidad de proceso principalmente a base de a&amp;ntilde;adir m&amp;aacute;s n&amp;uacute;cleos, a medida que la tecnolog&amp;iacute;a progrese la programaci&amp;oacute;n concurrente tomar&amp;aacute; m&amp;aacute;s importancia para aumentar el rendimiento y para poder soportar m&amp;aacute;s usuarios en las aplicaciones en el caso de la web. Hay ciertas tareas de las aplicaciones que se prestan a ello y que pueden ejecutarse de manera concurrente, por ejemplo, dos tareas que podr&amp;iacute;an ser son el env&amp;iacute;o de correos electr&amp;oacute;nicos y el precalculado de ciertos datos de una base de datos para mejorar los tiempos de acceso en posteriores consultas. 
&lt;br /&gt; 
&lt;br /&gt;Dependiendo de la aplicaci&amp;oacute;n estas dos tareas probablemente no hace falta que sean inmediatas y es interesante que se produzcan fuera del thread que procesa la petici&amp;oacute;n del usuario, m&amp;aacute;s si se trata de una aplicaci&amp;oacute;n web. Hay que tener en cuenta que el enviar un correo electr&amp;oacute;nico, precalcular datos u otras tareas pueden ser algo que lleve una cantidad de tiempo notable, a partir de unos cientos de milisegundos a m&amp;aacute;s de unos segundos. Si tenemos muchos usuarios en la aplicaci&amp;oacute;n y realizamos tareas como estas en el mismo thread de la petici&amp;oacute;n el tiempo de respuesta percibido por el usuario ser&amp;aacute; bajo, el n&amp;uacute;mero de usuarios concurrentes posibles ser&amp;aacute; menor y escalar en n&amp;uacute;mero de usuarios ser&amp;aacute; m&amp;aacute;s dificil. Vamos a ver como solucionar tareas como estas utilizando la programaci&amp;oacute;n concurrente que ofrece Java desde la versi&amp;oacute;n 1.5 y aplicando el&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/04/ejemplo-del-patron-de-diseno-command-y-programacion-concurrente-en-java"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-04-13T19:58:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño No Operation</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/01/ejemplo-del-patron-de-diseno-no-operation" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-24T15:48:40Z</updated>
    <published>2014-01-24T15:48:40Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Hasta el momento ya he escrito alguna entrada sobre los &lt;a href="http://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.html"&gt;patrones de dise&amp;ntilde;o&lt;/a&gt; en general, sobre algunos casos particulares como el &lt;a href="http://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html"&gt;patr&amp;oacute;n de dise&amp;ntilde;o Command&lt;/a&gt; relacionado con la programaci&amp;oacute;n concurrente y sobre el &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.html"&gt;patr&amp;oacute;n de dise&amp;ntilde;o State&lt;/a&gt; para hacer m&amp;aacute;quinas de estados. En esta entrada hablar&amp;eacute; sobre otro patr&amp;oacute;n de dise&amp;ntilde;o, el patr&amp;oacute;n No Operation y de que forma podemos aprovecharlo para resolver alg&amp;uacute;n problema y hacer nuestro c&amp;oacute;digo m&amp;aacute;s simple.&lt;/p&gt; 
&lt;p&gt;En un programa que emplea un lenguaje de programaci&amp;oacute;n orientado a objetos estos est&amp;aacute;n constantemente relacion&amp;aacute;ndose entre si a trav&amp;eacute;s de llamadas a m&amp;eacute;todos y a trav&amp;eacute;s de las referencias que un objeto posee de otros. Sin embargo, es habitual que un determinado m&amp;eacute;todo devuelva un null en vez de una referencia a un objeto. Esta referencia null puede ser un problema ya que nos obliga en el c&amp;oacute;digo hacer una comprobaci&amp;oacute;n antes de poder llamarlo. Si un m&amp;eacute;todo devuelve un null puede dar como resultado un &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/01/ejemplo-del-patron-de-diseno-no-operation"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-01-24T15:48:40Z</dc:date>
  </entry>
  <entry>
    <title>Hola mundo con Apache Tapestry (5.1) en Google App Engine</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2010/06/hola-mundo-con-apache-tapestry-5-1-en-google-app-engine" />
    <category term="programacion" />
    <category term="tapestry" />
    <category term="java" />
    <category term="google" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-12-01T23:34:17Z</updated>
    <published>2010-06-15T17:24:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: both; text-align: center;"&gt; 
 &lt;img alt="Java" height="110" src="http://4.bp.blogspot.com/_9zOwWD_PYL8/TBeztET3lAI/AAAAAAAAAZ8/BP4VHrwEXTY/s320/java.png" title="Java" /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
 &lt;img alt="Apache Tapestry" src="http://3.bp.blogspot.com/_9zOwWD_PYL8/S-2l0Qxom1I/AAAAAAAAAOg/t4TfjsOh4WQ/s1600/tapestry-banner.gif" title="Apache Tapestry" /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
 &lt;img alt="Google App Engine" src="http://3.bp.blogspot.com/_9zOwWD_PYL8/TBezuYpe1NI/AAAAAAAAAaA/rszdHsAoPTo/s1600/appengine.gif" title="Google App Engine" /&gt; 
&lt;/div&gt; 
&lt;br /&gt;Este fin de semana he estado probando el servicio de hosting 
&lt;a href="http://code.google.com/appengine/"&gt;Google App Engine&lt;/a&gt; para aplicaciones web (GAE para los amigos). Y por el momento me ha dejado muy buen sabor de boca ya que he conseguido subir a la nube con este servicio sin excesibas dificultades la aplicaci&amp;oacute;n 
&lt;a href="http://elblogdepicodev.blogspot.com/2010/05/hola-mundo-con-apache-tapestry-5.html"&gt;Hola Mundo con Tapestry 5.1&lt;/a&gt; que hice en un post anterior. 
&lt;br /&gt; 
&lt;br /&gt;Pero antes de ver el ejemplo vamos a hablar de las principales caracteristicas de este servicio. Dado que es un servicio de hosting lo principal que hay que tener en cuenta es que no estamos trabajando sobre un servidor propio sino que lo hacemos sobre la infraestructura y servidores que utiliza la propia Google para sus servicios y por tanto no podemos hacer cualquier cosa en &amp;eacute;l sino que nos tenemos que limitar a usar las funcionalidades que nos ofrece y dentro de los l&amp;iacute;mites que nos impone el entorno. Pero no nos asustemos, si se puede hacer funcionar un framework como Apache Tapestry dentro de &amp;eacute;l, que no es un framework internamente sencillo, los l&amp;iacute;mites son bastante amplios y con bastante probabilidad podremos trabajar con el framework o librer&amp;iacute;as que m&amp;aacute;s nos gusten. Tambi&amp;eacute;n podemos optar por trabajar directamente con Servlets y JSPs si nuestra aplicaci&amp;oacute;n es sencilla.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2010/06/hola-mundo-con-apache-tapestry-5-1-en-google-app-engine"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2010-06-15T17:24:00Z</dc:date>
  </entry>
  <entry>
    <title>Integración y transacciones con Spring en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/11/integracion-y-transacciones-con-spring-en-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-11-10T11:41:35Z</updated>
    <published>2013-11-08T20:04:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" height="133" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Spring" src="http://1.bp.blogspot.com/-z3Uf7rZosVk/Un04HYeUy3I/AAAAAAAACq0/JxaGVTEux-E/s1600/spring.png" title="Spring" /&gt; 
&lt;/div&gt;En otra entrada comentaba como hacer transacciones en una base de datos relacional con Apache Tapestry y como mejorar el soporte que ofrece de por si con la anotaci&amp;oacute;n CommitAfter mediante con una 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/11/transacciones-en-apache-tapestry.html"&gt;soluci&amp;oacute;n propia que proporciona la anotaci&amp;oacute;n Transactional&lt;/a&gt;. La soluci&amp;oacute;n propia mejora la anotaci&amp;oacute;n CommitAfter y es usable en m&amp;aacute;s casos como cuando dos servicios distintos necesitan colaborar en una transaccion y compartirla. Sin embargo, si el correcto funcionamiento de las transacciones es una parte importante de la aplicaci&amp;oacute;n (y en una aplicaci&amp;oacute;n grande lo ser&amp;aacute;) podemos evaluar si optar por Spring o los EJB en vez de la soluci&amp;oacute;n propia o la anotaci&amp;oacute;n CommitAfter. 
&lt;br /&gt; 
&lt;br /&gt;Unos buenos motivos para optar tanto por Spring como por los EJB es que son soluciones ya desarrolladas con lo que solo tendremos que integrarlo en nuestros proyectos y no tendremos que preocuparnos de mantener nuestra soluci&amp;oacute;n en caso de que tenga errores, adem&amp;aacute;s ambas son ampliamente usadas incluso en proyectos grandes y complejos y est&amp;aacute;n ya probadas lo que es una garant&amp;iacute;a. Entre optar por Spring o los EJB depende de varios factores como puede ser si la aplicaci&amp;oacute;n va ha ser desplegada en un servidor de aplicaciones con soporte para EJB (como&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/11/integracion-y-transacciones-con-spring-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-11-08T20:04:00Z</dc:date>
  </entry>
  <entry>
    <title>Transacciones en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/11/transacciones-en-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-11-09T16:00:18Z</updated>
    <published>2013-11-01T21:14:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: both; text-align: center;"&gt;&lt;/div&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" height="133" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt;Tapestry no proporciona de por s&amp;iacute; un soporte completo a las aplicaciones que necesitan realizar operaciones en una base de datos relacional de forma transaccional. La dependencia tapestry-hibernate provee la anotaci&amp;oacute;n 
&lt;a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/hibernate/annotations/CommitAfter.html"&gt;@CommitAfter para Hibernate&lt;/a&gt; y la dependencia tapestry-jpa otra del mismo nombre para JPA pero esta anotaci&amp;oacute;n en ambos casos proporciona una funcionalidad muy b&amp;aacute;sica y probablemente no no sirva en casos de uso complejos. Esto ha sido objeto de discusi&amp;oacute;n varias veces en la lista de distribuci&amp;oacute;n de los usuarios 
&lt;a href="http://apache-tapestry-mailing-list-archives.1045711.n5.nabble.com/Transactions-and-AfterCommit-td5722996.html"&gt;[1]&lt;/a&gt; 
&lt;a href="http://apache-tapestry-mailing-list-archives.1045711.n5.nabble.com/Re-Transactions-and-AfterCommit-td5723025.html"&gt;[2]&lt;/a&gt; y el JIRA de Tapestry&amp;nbsp; 
&lt;a href="https://issues.apache.org/jira/browse/TAP5-2159"&gt;[3]&lt;/a&gt;. 
&lt;br /&gt; 
&lt;br /&gt;Con la anotaci&amp;oacute;n CommitAfter si se produce una excepci&amp;oacute;n no controlada (&amp;laquo;unchecked&amp;raquo;) se har&amp;aacute; un rollback de la transacci&amp;oacute;n y, esto es importante, a&amp;uacute;n produciendose una excepci&amp;oacute;n controlada (&amp;laquo;checked&amp;raquo;) se har&amp;aacute; el commit de la transacci&amp;oacute;n y es responsabilidad del programador tratar la excepci&amp;oacute;n adecuadamente. Se puede usar en los m&amp;eacute;todos de los servicios y en los m&amp;eacute;todos manejadores de eventos de los componentes.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/11/transacciones-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-11-01T21:14:00Z</dc:date>
  </entry>
  <entry>
    <title>Solución al doble envío de peticiones en aplicaciones web</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/10/solucion-al-doble-envio-de-peticiones-en-aplicaciones-web" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-11-01T18:29:38Z</updated>
    <published>2013-10-11T17:25:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: both; text-align: center;"&gt;&lt;/div&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" height="133" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt;Las aplicaciones web pueden recibir informaci&amp;oacute;n del usuario a trav&amp;eacute;s de formularios o en los par&amp;aacute;metros de los enlaces. Los formularios o enlaces pueden desencadenar en la aplicaci&amp;oacute;n diversas acciones. Dada la naturaleza de las aplicaciones web en ciertas ocasiones la latencia de la red o el tiempo que toma procesar la petici&amp;oacute;n un usuario puede tener la oportunidad de hacer clic varias veces en un bot&amp;oacute;n o enlace tambi&amp;eacute;n cuando ve que tarda mucho en obtener la respuesta o simplemente por su desconocimiento al estar acostumbrado a hacer doble clic al trabajar con otras aplicaciones o la interfaz de su sistema operativo. En ocasiones el problema puede producirse tambi&amp;eacute;n haciendo un refrescar con el bot&amp;oacute;n del navegador si no se hace un redirect despu&amp;eacute;s del env&amp;iacute;o del formulario (&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/10/solucion-al-doble-envio-de-peticiones-en-aplicaciones-web"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-10-11T17:25:00Z</dc:date>
  </entry>
  <entry>
    <title>Solución al problema de seguridad CSRF en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/10/solucion-al-problema-de-seguridad-csrf-en-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-11-01T18:29:26Z</updated>
    <published>2013-10-18T18:20:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: both; text-align: center;"&gt;&lt;/div&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" height="133" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt;Al desarrollar una aplicaci&amp;oacute;n el problema de seguridad 
&lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;XSS&lt;/a&gt; (Cross-site scripting) puede afectar a los usuarios de nuestra aplicaci&amp;oacute;n. XSS consiste en que la aplicaci&amp;oacute;n permite la inyecci&amp;oacute;n de c&amp;oacute;digo malicioso que posteriormente otros usuarios obtienen al acceder a nuestra aplicaci&amp;oacute;n. Se produce porque nuestra aplicaci&amp;oacute;n no realiza el escapado correctamente de lo que env&amp;iacute;a al usuario y porque el usuario conf&amp;iacute;a en lo que obtiene del servidor. Para evitar este problema 
&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; por defecto realiza un escapado de lo que emite al cliente con lo que si no hacemos lo contrario la aplicaci&amp;oacute;n estar&amp;aacute; a salvo de este problema. 
&lt;br /&gt; 
&lt;br /&gt;Otro problema de seguridad es 
&lt;a href="https://owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29"&gt;CSRF&lt;/a&gt; (Cross-site request forgery) en el que b&amp;aacute;sicamente un sitio al que se accede devuelve un enlace malicioso que provoca una acci&amp;oacute;n en otro, el atacado. El enlace devuelto puede producir cualquier acci&amp;oacute;n que el sitio atacado permita, el ejemplo que se suele poner es el de un sitio bancario y el intento de hacer una transferencia de la cuenta del usuario que tiene iniciada una sesi&amp;oacute;n en la p&amp;aacute;gina de su banco a la cuenta del atacante pero podr&amp;iacute;a ser la realizaci&amp;oacute;n de un cambio de contrase&amp;ntilde;a a una que conozca el atacante y de esta forma posteriormente este pueda autenticarse con la cuenta de ese usuario en el sitio atacado. En la&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/10/solucion-al-problema-de-seguridad-csrf-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-10-18T18:20:00Z</dc:date>
  </entry>
  <entry>
    <title>Pruebas unitarias con Spock y Mockito</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/07/pruebas-unitarias-con-spock-y-mockito" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-10-21T08:41:39Z</updated>
    <published>2012-07-20T17:10:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="107" /&gt; 
&lt;/div&gt;Si estamos convencidos de que las teor&amp;iacute;as de Extreme Programming y dem&amp;aacute;s metodolog&amp;iacute;as &amp;aacute;giles son &amp;uacute;tiles probablemente haremos alg&amp;uacute;n tipo de prueba automatizada. Los inicios sueles ser dif&amp;iacute;ciles ya que al principio hacer pruebas automatizadas parece m&amp;aacute;s trabajo a realizar, sin embargo, una vez empezado se obtienen r&amp;aacute;pidamente una serie de beneficios en forma de errores detectados de forma temprana de manera que producimos software con menos errores, tenemos mayor seguridad de que entregamos algo que funciona y el hecho de vernos obligagos a desarrollar c&amp;oacute;digo testable obtenemos a cambio software de mayor calidad. 
&lt;br /&gt; 
&lt;br /&gt;Herramientas para hacer pruebas hay muchas en la mayor&amp;iacute;a de los lenguajes de programaci&amp;oacute;n. En el mundo Java una de las primeras herramientas diponibles y que a&amp;uacute;n sigue us&amp;aacute;ndose ampliameten es&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/07/pruebas-unitarias-con-spock-y-mockito"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-07-20T17:10:00Z</dc:date>
  </entry>
  <entry>
    <title>Trazas en un gsp de Grails</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/09/trazas-en-un-gsp-de-grails" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-09-27T23:45:26Z</updated>
    <published>2013-09-27T20:46:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: both; text-align: center;"&gt;&lt;/div&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Grails" height="53" src="http://3.bp.blogspot.com/-F75DVOP_w64/UkXa3io-i6I/AAAAAAAACoI/y1SAPaMxglY/s200/grails.jpg" title="Grails" width="200" /&gt; 
&lt;/div&gt;Disponer de informaci&amp;oacute;n para tratar de averiguar la causa de un problema es vital para poder resolverlo r&amp;aacute;pidamente. Para ello existen los sistemas y librer&amp;iacute;as de trazas que permiten a la aplicaci&amp;oacute;n sacar mensajes a un archivo para su consulta posterior ya sea en 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/04/librerias-de-logging-para-java-slf4j.html"&gt;Java&lt;/a&gt;, 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html"&gt;Javascript&lt;/a&gt; o seguro que otros lenguajes. 
&lt;br /&gt; 
&lt;br /&gt;En el caso de 
&lt;a href="http://grails.org/"&gt;Grails&lt;/a&gt; inyecta en varias entidades como controladores, servicios y clases de dominio el objeto log con el que se pueden emitir las trazas con el nivel que deseemos. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;script src="https://gist.github.com/picodotdev/6733758.js?file=Ejemplo.groovy"&gt;&lt;/script&gt; 
&lt;noscript&gt; 
 &lt;a href="https://gist.github.com/picodotdev/6733758.js?file=Ejemplo.groovy"&gt;Ejemplo.groovy&lt;/a&gt; 
 &lt;br /&gt; 
&lt;/noscript&gt; Sin embargo, a veces nos puede resultar interesante tambi&amp;eacute;n sacar alguna traza en los gsp para conocer que es lo que se ha emitido, especialmente si se trantan de gsp que contienen l&amp;oacute;gica de negocio con etiquetas g:if especialmente complejas. Tener mucha l&amp;oacute;gica en las vistas es una pr&amp;aacute;ctica no recomendada para evitar el c&amp;oacute;digo espagueti en los gsp que en el mantenimiento puede causarnos problemas al posiblemente tener esa l&amp;oacute;gica duplicada en varias zonas diferentes de la aplicaci&amp;oacute;n. Los frameworks que usan un sistema de plantillas donde por un lado est&amp;aacute;n los datos y por otro la plantilla sin una posibilidad propia (&amp;laquo;built-in&amp;raquo;) de extraer esa l&amp;oacute;gica a una entidad externa suele ser habitual. Esto nos puede obligar a precalcular todas esas condiciones y pasarlas a la visa como datos lo que nos exige conocer previamente en el controlador exactamente que datos necesita la vista y mantener el c&amp;oacute;digo de dos archivos sincronizados o crear m&amp;eacute;todos con esa l&amp;oacute;gica en los objetos que le pasamos a la vista como podr&amp;iacute;an ser en las entidades persistentes de dominio.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/09/trazas-en-un-gsp-de-grails"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-09-27T20:46:00Z</dc:date>
  </entry>
  <entry>
    <title>Archivos properties con codificación UTF-8</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/09/archivos-properties-con-codificacion-utf-8" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-linux" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-09-21T21:00:08Z</updated>
    <published>2013-09-20T18:15:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="107" /&gt; 
&lt;/div&gt;En Java los archivos 
&lt;a href="http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html"&gt;Properties&lt;/a&gt; que se cargan con la clase 
&lt;a href="http://docs.oracle.com/javase/7/docs/api/java/util/ResourceBundle.html"&gt;ResourceBundle&lt;/a&gt;&amp;nbsp;utilizados com&amp;uacute;nmente para realizar la internacionalizaci&amp;oacute;n y la localizaci&amp;oacute;n a varios idiomas en una aplicaci&amp;oacute;n Java por defecto usan la codificaci&amp;oacute;n de caracteres ISO-8859-1 (salvo que usemos un framework o una librer&amp;iacute;a lo haga de otra forma). Los caracteres que no pertenezcan al ISO-8859-1 deben ser escapados, por ejemplo \u20AC para el s&amp;iacute;mbolo del euro (€). Esto hace que si tenemos una aplicaci&amp;oacute;n que trabaja con caracteres en varios idiomas tengamos unos ficheros properties con un mont&amp;oacute;n de caracteres de escape que impide su legibilidad al momento de escribirlos o nos obliga a usar el comando 
&lt;a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/native2ascii.html"&gt;native2ascii&lt;/a&gt; lo que nos produce tambi&amp;eacute;n archivos poco legibles. 
&lt;br /&gt; 
&lt;br /&gt;La clase ResourceBundle permite cargar archivos properties seg&amp;uacute;n un Locale pero como digo los carga con la codificaci&amp;oacute;n ISO-8859-1 y esto es un problema para los locales como el chino donde casi todos los caracteres deben ser escapados. Si queremos tener archivos m&amp;aacute;s legibles y sin necesidad de escapar los caracteres debemos extender la clase ResourceBundle.Control y redefinirla un poco para que cargue los properties en UTF-8. La implementaci&amp;oacute;n ser&amp;iacute;a la siguiente:&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/09/archivos-properties-con-codificacion-utf-8"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-09-20T18:15:00Z</dc:date>
  </entry>
  <entry>
    <title>Como optimizar módulos de RequireJS y archivos Javascript (II)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/09/como-optimizar-modulos-de-requirejs-y-archivos-javascript-ii" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-09-06T20:34:16Z</updated>
    <published>2013-09-06T13:05:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Require.js" src="http://4.bp.blogspot.com/-M9RUvRUMUuY/UUOEKEfud5I/AAAAAAAACcY/mNZLmYzWnsU/s1600/requirejs.png" title="Require.js" /&gt; 
&lt;/div&gt;Aunque pueda parecer que no y en muchos casos no se tenga en cuenta la diferencia que puede haber entre una aplicaci&amp;oacute;n web no optimizada y optimizada puede ser significativa en varios aspectos. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Marionette" height="200" src="http://4.bp.blogspot.com/-ODdQesCGeKg/UiCFBR7_Z_I/AAAAAAAACmk/69p6qg8WZ-E/s200/marionette.png" title="Marionette" width="146" /&gt; 
&lt;/div&gt;&amp;iquest;Por que en algunos casos es importante optimizar la aplicaci&amp;oacute;n? Uno de los motivos es conseguir una mejor experiencia de usuario haciendo que la p&amp;aacute;gina le cargue m&amp;aacute;s r&amp;aacute;pido. Una p&amp;aacute;gina que tarde en cargar demasiado puede significar p&amp;eacute;rdida de visitas y si se trata de una p&amp;aacute;gina de comercio electr&amp;oacute;nico de clientes y compras. Si un flujo importante de usuarios de una p&amp;aacute;gina procede de las b&amp;uacute;squedas la velocidad de carga de la p&amp;aacute;gina es importante ya que es una de las variables que tiene muy en cuenta el algoritmo de Google para establecer el ranking de los resultados, reducir el tiempo de carga puede significar aparecer antes en los resultados de la b&amp;uacute;squeda y esto significa m&amp;aacute;s clics en nuestro resultado, m&amp;aacute;s visitas y nuevamente m&amp;aacute;s potenciales clientes y compras. Y en caso de que no estemos desarrollando una aplicaci&amp;oacute;n accesible desde internet sino una aplicaci&amp;oacute;n para una empresa o administraci&amp;oacute;n publica hacer que cargue m&amp;aacute;s r&amp;aacute;pido puede suponer una mayor satisfacci&amp;oacute;n de los usuarios y una aplicaci&amp;oacute;n m&amp;aacute;s eficiente (con una menor carga para el servidor, con la posibilidad de soportar m&amp;aacute;s usuarios o con menor necesidad de hardware).&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/09/como-optimizar-modulos-de-requirejs-y-archivos-javascript-ii"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-09-06T13:05:00Z</dc:date>
  </entry>
</feed>

