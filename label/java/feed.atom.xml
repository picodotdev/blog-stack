<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2016-01-15T20:02:15Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2016-01-15T20:02:15Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Introducción y ejemplo básico sobre Vert.x</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2016/01/introduccion-y-ejemplo-basico-sobre-vert-x" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2016-01-15T19:00:00Z</updated>
    <published>2016-01-15T14:00:00Z</published>
    <content type="html">&lt;p&gt;Las aplicaciones basadas en eventos y con E/S no bloqueante son más eficientes, requieren menos recursos y son capaces de servir más peticiones o usuarios por unidad de tiempo. En JavaScript su mejor representante es Node.js, en la plataforma JVM uno equivalente es Vert.x. Pero también tiene sus contrapartidas. En el artículo incluiré un pequeño ejemplo de Vert.x que muestre las diferencias con las aplicaciones tradicionalmente basadas en hilos y llamadas a métodos bloqueantes. Tradicionalmente las aplicaciones web y los servidores han manejado con un hilo cada petición. Hasta ahora ha funcionado y en muchos casos sigue siendo suficiente para el número de usuarios y peticiones a los que atienden esas aplicaciones. Pero cuando se necesita escalar a un gran volumen de peticiones y usuarios usar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2016/01/introduccion-y-ejemplo-basico-sobre-vert-x"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2016-01-15T14:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Hemeroteca #8</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2016/01/hemeroteca-8" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="gnu-linux" />
    <category term="tapestry" />
    <category term="hemeroteca" />
    <category term="software-libre" />
    <category term="java" />
    <category term="software" />
    <category term="blog" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2016-01-04T21:00:00Z</updated>
    <published>2016-01-02T12:00:00Z</published>
    <content type="html">&lt;p&gt;Seis meses más de artículos la mayoría sobre programación en Java tratando algunas de las nuevas tendencias de programación con las posibilidades de la plataforma de la JVM. Unos pocos artículos más continuando la serie sobre Docker y uno de opinión sobre las licencias de Microsoft. El 2015 pasó, a mi muy rápido. En cuanto a la bitácora toca recapitular cuáles han sido los artículos que he escrito, de que temas principales he hablado, un poco cómo han evolucionado las visitas y que tengo preparado para publicar durante los siguientes meses ya de 2016. Muchos de los artículos que he escrito han estado relacionados con la programación en la plataforma Java, en los que destacaría prácticamente todos empezando por los relacionados con Spring Boot, Spring Cloud Config y Spring Boot Actuator que[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2016/01/hemeroteca-8"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2016-01-02T12:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Bailando con bits III. Mostrando el valor binario de un número [bash, C, C++, PHP, Java, Python, Ruby]</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/12/bailando-con-bits-iii-mostrando-el-valor-binario-de-un-numero-bash-c-c-php-java-python-ruby" />
    <category term="bits" />
    <category term="valores" />
    <category term="bash" />
    <category term="double" />
    <category term="tipo" />
    <category term="float" />
    <category term="variable" />
    <category term="python" />
    <category term="entero" />
    <category term="base" />
    <category term="c-c" />
    <category term="tamano" />
    <category term="conversion" />
    <category term="linux" />
    <category term="hexadecimal" />
    <category term="vigilar" />
    <category term="java" />
    <category term="binario" />
    <category term="numero" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-12-28T09:42:05Z</updated>
    <published>2015-12-28T09:42:05Z</published>
    <content type="html">&lt;p&gt;De todos es sabido que un ordenador, internamente trabaja con ceros y unos, simplemente eso, a partir de ese simple valor, verdadero o falso, abierto o cerrado, existe o no existe es capaz de formar sonidos, imágenes, textos y cualquier cosa que podamos imaginarnos. Aunque no vamos a hacer algo tan complicado, muchas veces puede que tengamos un valor entre manos y queramos saber qué bits hay a uno y qué bits hay a cero aunque sólo sea para verificar que una operación se está realizando como debe o porque estamos aprendiendo a utilizar este sistema de numeración y queremos verificar que todo nos sale bien. En este post, voy a poner algunos métodos que podemos utilizar en varios lenguajes de programación, o en consola, con este propósito. Decimal a binario en consola Empecemos en consola. Vamos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/12/bailando-con-bits-iii-mostrando-el-valor-binario-de-un-numero-bash-c-c-php-java-python-ruby"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-12-28T09:42:05Z</dc:date>
  </entry>
  <entry>
    <title>Publicado Apache Tapestry 5.4</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/12/publicado-apache-tapestry-5-4" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="tapestry" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-12-24T14:00:00Z</updated>
    <published>2015-12-24T14:00:00Z</published>
    <content type="html">&lt;p&gt;Después 38 betas (han sido tantas porque era barato hacerlas) y una única candidata a publicación, 4 años desde la anterior versión mayor (5.3) y varias versiones menores de esta, la versión final de Apache Tapestry 5.4 ha sido publicada. Esta nueva versión incorpora más de 300 correcciones de errores, casi 200 mejoras y varias novedades destacadas centradas en la integración con JavaScript siguiendo la evolución actual de las aplicaciones web con un peso mayor en el lado del cliente. De esta manera el JavaScript se basa en el uso de RequireJS proporcionando a las aplicaciones todas las bondades que los módulos proporcionan como organizar mejor el JavaScript de las aplicaciones, no polucionar el ámbito global evitando conflictos entre librerías y carga de dependencias de forma dinámica. También[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/12/publicado-apache-tapestry-5-4"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-12-24T14:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Información y métricas de la aplicación con Spring Boot Actuator</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/12/informacion-y-metricas-de-la-aplicacion-con-spring-boot-actuator" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-12-11T22:25:00Z</updated>
    <published>2015-12-04T16:30:00Z</published>
    <content type="html">&lt;p&gt;Desarrollar una aplicación no solo implica implementar su funcionalidad, esa aplicación ha de mantenerse funcionando en su entorno de producción. Monitorizar y disponer de información sobre el estado ayuda a mantenerla funcionando sin ninguna caída de servicio u obtener métricas para mejorar su funcionamiento. Entre las numerosas funcionalidades ofrecidas por Spring para las aplicaciones Java está Spring Boot Actuator que precisamente nos proporcionará métricas e información interesantes de serie pudiendo implementar nueva según la necesidades. Es conveniente tener monitorizado el estado de una aplicación para conocer si el servicio que ofrece está funcionando o en caso de que no conocerlo cuanto antes para restaurarlo además de conocer otra serie de métricas básicas como la cantidad de CPU[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/12/informacion-y-metricas-de-la-aplicacion-con-spring-boot-actuator"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-12-04T16:30:00Z</dc:date>
  </entry>
  <entry>
    <title>Configuración de una aplicación en diferentes entornos con Spring Cloud Config</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/11/configuracion-de-una-aplicacion-en-diferentes-entornos-con-spring-cloud-config" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-12-11T21:00:00Z</updated>
    <published>2015-11-28T10:00:00Z</published>
    <content type="html">&lt;p&gt;La configuración de una aplicación suele varíar según el entorno en el que se ejecuta, la opción recomendada es que este externalizada y que el artefacto que se despliega en cada entorno sea el mismo. Con Spring Cloud Config en vez de guardar la configuración en un archivo de la propia máquina donde se instala podemos guardar de forma centralizada en un repositorio y que la aplicación obtenga la versión más actualizada cuando se inicia. En este ejemplo explicaré como crear el servidor de configuraciones con Spring Cloud Config y un ejemplo de cliente con Spring Boot que le solicita su configuración según su entorno. Desarrollar una aplicación no consiste solo en programar el código que proporciona su funcionalidad, con igual de importancia está como poner en producción esa aplicación para que[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/11/configuracion-de-una-aplicacion-en-diferentes-entornos-con-spring-cloud-config"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-11-28T10:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Aplicación Java autocontenida con Spring Boot</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/10/aplicacion-java-autocontenida-con-spring-boot" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-12-06T11:00:00Z</updated>
    <published>2015-10-12T22:00:00Z</published>
    <content type="html">&lt;p&gt;Si queremos una aplicación Java autocontenida ya sea una aplicación de linea de comandos, de escritorio o aplicación web que use el contenedor de dependencias de Spring podemos usar Spring Boot. Además de inicializar el contenedor IoC de Spring, Spring Boot proporciona en una aplicación web elegir el servidor de aplicaciones de entre el por defecto Tomcat y los seleccionables Jetty y Undertow junto con algunas funcionalidades más. Tradicionalmente las aplicaciones Java web han sido instaladas en un contenedor de servlets como Tomcat o Jetty y Wildfly, JBoss o Weblogic si necesita más servicios que son ofrecidos por la plataforma Java EE completa como JMS, JPA, JTA o EJB. Aunque las aplicaciones se ejecutan independientemente unas de otras comparten el entorno de ejecución del servidor de aplicaciones,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/10/aplicacion-java-autocontenida-con-spring-boot"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-10-12T22:00:00Z</dc:date>
  </entry>
</feed>

