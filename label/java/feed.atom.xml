<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-07-15T15:02:12Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-07-15T15:02:12Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Java 8 default methods y extensibilidad</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-8-default-methods-y-extensibilidad" />
    <category term="java-core" />
    <category term="java-basico" />
    <category term="java-conceptos" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-15T14:26:47Z</updated>
    <published>2015-07-15T14:26:47Z</published>
    <content type="html">&lt;p&gt;Java 8 Default methods es una de las nuevas características de Java que nos permite definir métodos y que estos pertenezcan a las clases que queramos. El concepto se parece mucho al concepto de mixins de otros lenguajes de programación.   Java 8 default methods Vamos a construir un ejemplo que se encargue de diseñar un método que nos imprima las diferentes propiedades que una clase tiene. Este método se podrá  aplicar a cualquier clase. Para diseñar un default method necesitamos crear una interface. 

package com.arquitecturajava;

import java.lang.reflect.Field;

public interface InformacionObjeto {

default public void imprimirPropiedadesObjeto() {

Field[] campos =this.getClass().getDeclaredFields();
for(int i=0;i&lt;campos.length;i++) {

System.out.println(campos[i].getName());
}

}
}

 Esta[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-8-default-methods-y-extensibilidad"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-15T14:26:47Z</dc:date>
  </entry>
  <entry>
    <title>Java vs JavaScript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-vs-javascript" />
    <category term="arquitectura-reflexiones" />
    <category term="javascript" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-10T11:07:45Z</updated>
    <published>2015-07-10T11:07:45Z</published>
    <content type="html">&lt;p&gt;Java vs JavaScript comparativa entre las dos plataformas y como la evolución de ambas nos afectará a las Arquitecturas del futuro La entrada Java vs JavaScript aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/java-vs-javascript"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-10T11:07:45Z</dc:date>
  </entry>
  <entry>
    <title>Hemeroteca #7</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/06/hemeroteca-7" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="gnu-linux" />
    <category term="tapestry" />
    <category term="hemeroteca" />
    <category term="software-libre" />
    <category term="java" />
    <category term="software" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-06-27T08:00:00Z</updated>
    <published>2015-06-27T08:00:00Z</published>
    <content type="html">&lt;p&gt;Pasado un nuevo semestre he escrito principalmente sobre temas de programación, Java y poco sobre Linux o software libre. Incluyo aquí el listado completo de los artículos que he escrito. Otros seis meses que han pasado y estos especialmente para mi muy rápido. Como suelo hacer cada este periodo de tiempo recopilo en un artículo Hemeroteca los artículos que he publicado al ritmo que mantengo de uno por semana. Este ya es el séptimo contando los de El blog de pico.dev y de Blog Bitix. Como resumen de estas 26 semanas he publicado 27 artículos destacando que he cambiado de herramienta con la que mantengo la bitácora pasando de usar Octopress a Hugo que me ha permitido cambiar el diseño completamente personalizándolo enteramente a mi gusto y agregar algunas nuevas funcionalidades como un mejor[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/06/hemeroteca-7"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-06-27T08:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Servicio para obtener ratios de conversión entre divisas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-06-20T08:00:00Z</updated>
    <published>2015-06-20T08:00:00Z</published>
    <content type="html">&lt;p&gt;¿Trabajas con importes en diferentes divisas y necesitas hacer conversiones entre ellas? Si es el caso necesitas obtener los ratios de conversión entre divisas de alguna fuente de forma regular y de forma automatizada ya que se varían constantemente (en minutos) según diversos factores. Hay diferentes fuentes para obtenerlos y empresas que ofrecen las cotizaciones como producto, en este artículo comentaré una con suficiente detalle como para integrarla en cualquier aplicación. En una aplicación de comercio electrónico que venda sus productos o servicios a nivel internacional probablemente necesitará mostrar los precios en la moneda local del comprador. En estos casos será necesario hacer una conversión entre la divisa en la que está el importe del producto y la divisa del usuario con la que[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-06-20T08:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Primer ejemplo con apache spark</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2015/06/primer-ejemplo-con-apache-spark" />
    <category term="programacion" />
    <category term="spark" />
    <category term="apache-spark" />
    <category term="big-data" />
    <category term="java" />
    <category term="scala" />
    <category term="apache" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-06-12T20:45:04Z</updated>
    <published>2015-06-12T20:45:04Z</published>
    <content type="html">&lt;p&gt;Hace algunas semanas atrás que empezamos a trabajar con apache spark en el máster, brevemente les contare mis impresiones desde mi punto de vista como principiante. Apache spark me gusto, ¿por qué? porque se puede programar en Scala (además de Python y Java),  la API de Scala lo simplifica mucho y la cantidad de código a teclear es (considerablemente) menor a la necesaria para hacer la misma tarea en Java, aunque aquí debo hacer un paréntesis, ya que con la entrada de Java 8 y las lambda expresión la cantidad de código será menor pero insisto la API de Scala a mi modo de ver lo hace mas sencillo. Nos permite hacer operaciones con mucha data (quizás no Big Data, es decir no hablamos de TeraBytes) sin necesidad de usar Hadoop, me gustaría hacer hincapié en esto ya que muchos piensan que Big Data[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2015/06/primer-ejemplo-con-apache-spark"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-06-12T20:45:04Z</dc:date>
  </entry>
  <entry>
    <title>Nueva visita a Herramientas para un proyecto Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java" />
    <category term="opinion" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-06-12T18:00:00Z</updated>
    <published>2015-06-12T18:00:00Z</published>
    <content type="html">&lt;p&gt;Las tecnologías para desarrollar una aplicación son un medio para resolver las necesidades del negocio o un cliente, no un fin. Pero esto no quiere decir que la elección sea trivial o poco importante, realizar las elecciones adecuadas según lo requisitos puede evitar complicaciones en un futuro. Para un proyecto basado en la plataforma Java esta es mi selección de herramientas. Hace 4 años escribí un artículo comentando que tecnologías eligiría para un proyecto Java si tuviese posibilidad. Al ritmo que avanza la tecnología cuatro años es un tiempo bastante largo, también es un tiempo en el que he podido aprender y añadir a mi caja de herramientas nuevas opciones que después de evaluarlas me han gustado. En este artículo haré una nueva visita al artículo anterior y comentaré algunas nuevas herramientas.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-06-12T18:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Patrón múltiples vistas de un mismo dato en Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/06/patron-multiples-vistas-de-un-mismo-dato-en-tapestry" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="tapestry" />
    <category term="java" />
    <category term="blog" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-06-06T08:30:00Z</updated>
    <published>2015-06-06T08:30:00Z</published>
    <content type="html">&lt;p&gt;Un proyecto grande contendrá muchos archivos de código fuente, poseer gran cantidad de archivos puede ser una molestia al trabajar con ellos al tener que buscarlos o abrilos. En el caso de las aplicaciones web puede darse el caso de que un mismo dato tenga un archivo diferente por cada forma de visualizarlo, para reducir el número de archivos en estos casos uso el siguiente patrón cuando trabajo con Apache Tapestry con el soporte que ofrece pero que puede ser igualmente aplicado de forma similar a otros frameworks. Al desarrollar una aplicación web puede que necesitemos mostrar un mismo dato de diferentes formas. Una posibilidad es crear una vista por cada forma diferente que se haya de mostrar el dato. Sin embargo, de esta forma tendremos que crear un archivo diferente por cada forma a visualizar,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/06/patron-multiples-vistas-de-un-mismo-dato-en-tapestry"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-06-06T08:30:00Z</dc:date>
  </entry>
</feed>

