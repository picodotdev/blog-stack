<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-06-13T08:02:13Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-06-13T08:02:13Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Primer ejemplo con apache spark</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2015/06/primer-ejemplo-con-apache-spark" />
    <category term="programacion" />
    <category term="spark" />
    <category term="apache-spark" />
    <category term="big-data" />
    <category term="java" />
    <category term="scala" />
    <category term="apache" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-06-12T20:45:04Z</updated>
    <published>2015-06-12T20:45:04Z</published>
    <content type="html">&lt;p&gt;Hace algunas semanas atrás que empezamos a trabajar con apache spark en el máster, brevemente les contare mis impresiones desde mi punto de vista como principiante. Apache spark me gusto, ¿por qué? porque se puede programar en Scala (además de Python y Java),  la API de Scala lo simplifica mucho y la cantidad de código a teclear es (considerablemente) menor a la necesaria para hacer la misma tarea en Java, aunque aquí debo hacer un paréntesis, ya que con la entrada de Java 8 y las lambda expresión la cantidad de código será menor pero insisto la API de Scala a mi modo de ver lo hace mas sencillo. Nos permite hacer operaciones con mucha data (quizás no Big Data, es decir no hablamos de TeraBytes) sin necesidad de usar Hadoop, me gustaría hacer hincapié en esto ya que muchos piensan que Big Data[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2015/06/primer-ejemplo-con-apache-spark"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-06-12T20:45:04Z</dc:date>
  </entry>
  <entry>
    <title>Nueva visita a Herramientas para un proyecto Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java" />
    <category term="opinion" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-06-12T18:00:00Z</updated>
    <published>2015-06-12T18:00:00Z</published>
    <content type="html">&lt;p&gt;Las tecnologías para desarrollar una aplicación son un medio para resolver las necesidades del negocio o un cliente, no un fin. Pero esto no quiere decir que la elección sea trivial o poco importante, realizar las elecciones adecuadas según lo requisitos puede evitar complicaciones en un futuro. Para un proyecto basado en la plataforma Java esta es mi selección de herramientas. Hace 4 años escribí un artículo comentando que tecnologías eligiría para un proyecto Java si tuviese posibilidad. Al ritmo que avanza la tecnología cuatro años es un tiempo bastante largo, también es un tiempo en el que he podido aprender y añadir a mi caja de herramientas nuevas opciones que después de evaluarlas me han gustado. En este artículo haré una nueva visita al artículo anterior y comentaré algunas nuevas herramientas.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/06/nueva-visita-a-herramientas-para-un-proyecto-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-06-12T18:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Patrón múltiples vistas de un mismo dato en Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/06/patron-multiples-vistas-de-un-mismo-dato-en-tapestry" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="tapestry" />
    <category term="java" />
    <category term="blog" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-06-06T08:30:00Z</updated>
    <published>2015-06-06T08:30:00Z</published>
    <content type="html">&lt;p&gt;Un proyecto grande contendrá muchos archivos de código fuente, poseer gran cantidad de archivos puede ser una molestia al trabajar con ellos al tener que buscarlos o abrilos. En el caso de las aplicaciones web puede darse el caso de que un mismo dato tenga un archivo diferente por cada forma de visualizarlo, para reducir el número de archivos en estos casos uso el siguiente patrón cuando trabajo con Apache Tapestry con el soporte que ofrece pero que puede ser igualmente aplicado de forma similar a otros frameworks. Al desarrollar una aplicación web puede que necesitemos mostrar un mismo dato de diferentes formas. Una posibilidad es crear una vista por cada forma diferente que se haya de mostrar el dato. Sin embargo, de esta forma tendremos que crear un archivo diferente por cada forma a visualizar,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/06/patron-multiples-vistas-de-un-mismo-dato-en-tapestry"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-06-06T08:30:00Z</dc:date>
  </entry>
  <entry>
    <title>Alternativa a Hibernate u ORM y ejemplo de jOOQ</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-05-29T18:00:00Z</updated>
    <published>2015-05-29T18:00:00Z</published>
    <content type="html">&lt;p&gt;Los ORMs nos han facilitado el acceso a los datos de una base de datos relacional. Han solucionado algunos problemas y facilitado el acceso a los datos pero traído consigo otros nuevos como el problema N+1 o la perdida de control del modelo relacional. jOOQ forma parte de una nueva generación de herramientas que puede sustituir a otras como Hibernate. Y después de haberlo usado puede ser cierto. Con el auge de los lenguajes de programación orientados a objetos han surgido varias herramientas que intentan hacer que el trabajo de unir el mundo orientado a objetos del lenguaje que empleemos y el modelo relacional de las bases de datos sea más transparente, estas herramientas son conocidas como Object Realtiomal Mapping (ORM). Una de las más conocidas y usada en la plataforma Java es Hibernate.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-05-29T18:00:00Z</dc:date>
  </entry>
  <entry>
    <title>10 razones para seguir usando Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/05/1-razones-para-seguir-usando-java" />
    <category term="opinion" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-05-22T15:00:00Z</updated>
    <published>2015-05-22T15:00:00Z</published>
    <content type="html">&lt;p&gt;El sábado 23 de mayo de 2015 el lenguaje Java cumple 20 años de historia y aún hoy Java sigue siendo uno de los lenguajes de programación preferidos para desarrollar en un mundo tecnológico en el que unos pocos años pueden darse grandes cambios y en dos décadas ver surgir nuevas tecnologías y verlas languidecer. Algunas personas se jactan y hablan con un tono de desprecio y mofa nada agradable hacia Java mostrando su desconocimiento o prejuicios siguiendo algunos tópicos bastante difundidos la mayoría incorrectos. A otras personas quizá no les gusta Java no tanto por el lenguaje como por los proyectos que ha desarrollado en él, en consultoras cárnicas, para clientes con condiciones laborales paupérrimas, con tecnologías, librerías y frameworks obsoletos o códigos heredados programados por programadores[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/05/1-razones-para-seguir-usando-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-05-22T15:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Java Collections Performance</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/05/java-collections-performance" />
    <category term="java-tuning" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-05-20T10:28:42Z</updated>
    <published>2015-05-20T10:28:42Z</published>
    <content type="html">&lt;p&gt;Un tema muy recurrente cuando hablamos de rendimiento es el de Java Collections Performance. Todos usamos el framework de collecciones pero muchas veces nos olvidamos de su rendimiento. ¿Cual es la colección más rápida a la hora de buscar elementos?. Vamos a verlo con un ejemplo sencillo.  Para ello partiremos de tres colecciones diferentes, un ArrayList,un HashSet y un TreeSet. Todos ellos soportan el interface Collection y podemos buscar un elemento a través del método contains().   Hay que recordar que un ArrayList almacena la información en formato lista. Un HashSet lo almacena como un bloque de claves hash y cada una dispone de su propia sublista. Por último un TreeSet almacena un conjunto en forma de árbol binario. Vamos a usar la clase System y su método nanoTime para obtener los tiempos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/05/java-collections-performance"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-05-20T10:28:42Z</dc:date>
  </entry>
  <entry>
    <title>Programación de juegos y 3D en Java con jMonkeyEngine</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-05-09T13:30:00Z</updated>
    <published>2015-05-09T08:18:40Z</published>
    <content type="html">&lt;p&gt;Erróneamente se sigue pensado que Java es un lenguaje lento en ejecución, en las primeras versiones era cierto pero hoy la realidad es que con las mejoras introducidas en cada versión de Java y la máquina virtual el rendimiento actual es comparable a C y C++. En la programación de juegos y 3D gran parte del proceso de representación gráfica se ha descargado de la CPU a las cada vez más potentes tarjetas gráficas, la potencia de estas GPU son las que determinan la capacidad de proceso gráfico y la calidad gráfica de los juegos. Java no suele ser considerado como opción para programar videojuegos triple AAA pero ahí está Minecraft uno de los juegos más populares y un ejemplo de que un juego de buena calidad y rendimiento también se puede hacer en Java. Hay algunos otros ejemplos notables como[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-05-09T08:18:40Z</dc:date>
  </entry>
</feed>

