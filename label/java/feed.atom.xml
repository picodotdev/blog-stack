<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2016-04-09T10:02:53Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2016-04-09T10:02:53Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Aplicación de ejemplo usando varias especificaciones de Java EE 7</title>
    <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/04/aplicacion-de-ejemplo-usando-varias-especificaciones-de-java-ee-7/" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2016-04-09T10:00:00Z</updated>
    <published>2016-04-08T15:00:00Z</published>
    <content type="html">&lt;p&gt;Más lentamente que otras tecnologías Java EE en cada nueva versión sigue adaptándose a las nuevas tendencias en el desarrollo y facilitando la programación de aplicaciones de entidad empresarial. Java EE está formado por un conjunto de especificaciones que resuelven en gran medida muchas de las necesidades funcionales de las aplicaciones ya sean de persistencia, seguridad, mensajería, lógica de negocio, transaccionalidad, inyección de dependencias, presentación HTML, JSON, WebSockets, conexión a base de datos, envío de correos electrónicos o concurrencia. En este artículo mostraré un ejemplo usando varias de estas especificaciones y proporcionaré el código fuente completo. Comentaba las novedades y nuevas características de Java EE 7 que en el 2013 trajo esta nueva versión para el desarrollo[...]&lt;/p&gt;&lt;p&gt;&lt;a href="https://picodotdev.github.io/blog-bitix/2016/04/aplicacion-de-ejemplo-usando-varias-especificaciones-de-java-ee-7/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2016-04-08T15:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Java Fluent Interface y Properties</title>
    <link rel="alternate" href="http://www.arquitecturajava.com/java-fluent-interface-y-properties/" />
    <category term="javacore" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2016-03-25T17:15:16Z</updated>
    <published>2016-03-25T17:15:16Z</published>
    <content type="html">&lt;p&gt;Utilizar  un Java Fluent Interface suele ser muy práctico pero lamentablemente no todas las APIs lo soportan. Recordemos que los Fluent Interfaces o interfaces fluidos nos permiten trabajar de una forma más cómoda cuando programamos. Vamos a ver un ejemplo de una clase Java que no soporta un enfoque fluido y como podemos adaptarla para que […] La entrada Java Fluent Interface y Properties aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/java-fluent-interface-y-properties/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2016-03-25T17:15:16Z</dc:date>
  </entry>
  <entry>
    <title>Cómo ejecutar un proceso del sistema con Java</title>
    <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/03/como-ejecutar-un-proceso-del-sistema-con-java/" />
    <category term="blog-stack" />
    <category term="linux" />
    <category term="gnu" />
    <category term="java" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2016-03-19T10:00:00Z</updated>
    <published>2016-03-12T21:30:00Z</published>
    <content type="html">&lt;p&gt;Dada la popularidad de Java es difícil que no encontremos en el propio JDK o librería la funcionalidad que necesitamos y sino en algún comando del sistema de los muchos que tenemos a disposición en un sistema GNU/Linux. Esto nos da acceso a una gran cantidad de funcionalidades también desde los programas Java. Java de por sí incluye una amplia colección de clases con las funcionalidades principales que podamos necesitar, si no lo ofrece en la API es muy posible que haya una librería que lo proporcione. Pero en algún momento quizá se nos dé el caso que un comando del sistema devuelve la información o realiza la acción que necesitamos. Puede ser una un comando del sistema GNU/Linux, Windows o Mac OS X o un script en Java, Python, Ruby u otro lenguaje de programación. A través de las clase Process[...]&lt;/p&gt;&lt;p&gt;&lt;a href="https://picodotdev.github.io/blog-bitix/2016/03/como-ejecutar-un-proceso-del-sistema-con-java/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2016-03-12T21:30:00Z</dc:date>
  </entry>
  <entry>
    <title>Cómo firmar correos electrónicos con GPG y JavaMail</title>
    <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="seguridad" />
    <category term="java" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2016-03-19T09:00:00Z</updated>
    <published>2016-03-19T09:00:00Z</published>
    <content type="html">&lt;p&gt;El correo electrónico es un medio muy utilizado para realizar ataques de phising, algunos son muy burdos pero seguramente algunos usuarios sin muchos conocimientos caen víctimas de ellos y aún los usuarios con conocimientos también pueden serlo si están bien realizados y muestran un correo electrónico exactamente igual que el que intentan suplantar. Los usuarios son las víctimas pero si los sitios web que envían los correos electrónicos legítimos los firmasen digitalmente sería una garantía más para proteger a sus usuarios, pudiendo detectar de otra forma el spam y phising. En este artículo muestro a modo de ejemplo como firmar un correo electrónico con GPG y JavaMail e igualmente podría utilizarse para cifrarlo, aunque usar DKIM sería lo más apropiado. Los sitios de comercio electrónico y[...]&lt;/p&gt;&lt;p&gt;&lt;a href="https://picodotdev.github.io/blog-bitix/2016/03/como-firmar-correos-electronicos-con-gpg-y-javamail/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2016-03-19T09:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Introducción y nuevas características de Java EE 7</title>
    <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2016-03-11T16:00:00Z</updated>
    <published>2016-03-11T16:00:00Z</published>
    <content type="html">&lt;p&gt;Java sigue siendo uno de los lenguajes más usado para desarrollar aplicaciones empresariales en entidades públicas o empresas privadas. Proporciona un conjunto de especificaciones que cubren las necesidades funcionales de la mayoría de las aplicaciones y sigue evolucionando, adaptándose a las nuevas tendencias actuales y agregando nuevas funcionalidades de forma estandarizada en la plataforma. Aún así muchas entidades siguen y seguirán usando versiones anteriores a la última tanto de Java EE como de Java. Hace ya unos años, en 2013, fue publicada una nueva versión del conjunto de especificaciones que forman parte de Java EE con varias novedades y mejoras que aumentan la productividad. Java EE 7 es el conjunto de especificaciones a disposición de las aplicaciones empresariales que son implementadas[...]&lt;/p&gt;&lt;p&gt;&lt;a href="https://picodotdev.github.io/blog-bitix/2016/03/introduccion-y-nuevas-caracteristicas-de-java-ee-7/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2016-03-11T16:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Aplicación web con Spark Framework y Java</title>
    <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/01/aplicacion-web-con-spark-framework-y-java/" />
    <category term="blog-stack" />
    <category term="programcion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2016-01-24T11:00:00Z</updated>
    <published>2016-01-23T15:00:00Z</published>
    <content type="html">&lt;p&gt;Spark Framework es un microframework web para Java que además hace uso de las novedades introducidas en la versión 8 del lenguaje. Para una aplicación no compleja o de un tamaño reducido permite desarrollar con su sencillez la funcionalidad de la aplicación inmediatamente y una arquitectura liviana. La cantidad de frameworks web disponibles en Java incluso para la misma tarea es notable, a veces cuesta decidirse por uno, sin embargo, tampoco es cuestión de elegir cualquiera. Deberemos evaluar las necesidades de la aplicación y las opciones que consideramos como adecuadas. Spark Framework es un microframework simple y sencillo, sin muchas de las funcionalidades de otras opciones más completas y complejas y que quizá no necesitemos. Su funcionalidad es suficiente capaz para servirnos en múltiples[...]&lt;/p&gt;&lt;p&gt;&lt;a href="https://picodotdev.github.io/blog-bitix/2016/01/aplicacion-web-con-spark-framework-y-java/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2016-01-23T15:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Introducción y ejemplo básico sobre Vert.x</title>
    <link rel="alternate" href="https://picodotdev.github.io/blog-bitix/2016/01/introduccion-y-ejemplo-basico-sobre-vertx/" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2016-01-15T19:00:00Z</updated>
    <published>2016-01-15T14:00:00Z</published>
    <content type="html">&lt;p&gt;Las aplicaciones basadas en eventos y con E/S no bloqueante son más eficientes, requieren menos recursos y son capaces de servir más peticiones o usuarios por unidad de tiempo. En JavaScript su mejor representante es Node.js, en la plataforma JVM uno equivalente es Vert.x. Pero también tiene sus contrapartidas. En el artículo incluiré un pequeño ejemplo de Vert.x que muestre las diferencias con las aplicaciones tradicionalmente basadas en hilos y llamadas a métodos bloqueantes. Tradicionalmente las aplicaciones web y los servidores han manejado con un hilo cada petición. Hasta ahora ha funcionado y en muchos casos sigue siendo suficiente para el número de usuarios y peticiones a los que atienden esas aplicaciones. Pero cuando se necesita escalar a un gran volumen de peticiones y usuarios usar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="https://picodotdev.github.io/blog-bitix/2016/01/introduccion-y-ejemplo-basico-sobre-vertx/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2016-01-15T14:00:00Z</dc:date>
  </entry>
</feed>

