<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-08-26T07:02:18Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-08-26T07:02:18Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Java Generics Erasure y sus problemas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/08/java-generics-erasure-y-sus-problemas" />
    <category term="java-core" />
    <category term="java-basico" />
    <category term="java-tips" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-08-26T06:58:45Z</updated>
    <published>2015-08-26T06:58:45Z</published>
    <content type="html">&lt;p&gt;El trabajo con los tipos Genéricos en Java es algo de lo más habitual , pero siempre hay situaciones en las que aparecen dudas. Una de las cosas más importantes que hay que entender hablando de Genéricos es que se trata realmente de “sintaxis sugar” es decir no existen realmente en la JVM. Esto es debido a que en su momento se llego a la conclusión que implementarlos directamente en la máquina virtual era muy costoso. Vamos a ver un ejemplo usando el concepto de Java Generics Erasure, supongamos que tenemos el siguiente código: 
package com.arquitecturajava.generics;

import java.util.List;

public class GestorListas {

 public void imprimirLista(List&lt;Persona&gt; listaPersonas) {

 for (Persona p: listaPersonas) {
 System.out.println(p);
 }

 }

 public void imprimirLista(List&lt;Factura&gt; listaFacturas)[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/08/java-generics-erasure-y-sus-problemas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-08-26T06:58:45Z</dc:date>
  </entry>
  <entry>
    <title>Utilizando Java Singleton Properties</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/08/utilizando-java-singleton-properties" />
    <category term="java-tips" />
    <category term="java" />
    <category term="design-patterns" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-08-21T09:52:00Z</updated>
    <published>2015-08-21T09:52:00Z</published>
    <content type="html">&lt;p&gt;El patrón Singleton es uno de los más utilizados y se encarga de construir una clase de la cual únicamente se pueda construir un objeto. La construcción el patrón no es complicada pero a la gente que empieza le cuesta hacerse una idea de cual pueden ser sus usos. Muchas veces no parece tener mucho sentido crear una clase que solo pueda tener un objeto. Java Singleton Properties Vamos a usar un fichero de Properties para clarificar el concepto. Recordemos que un fichero de Properties es un fichero Java que contiene clases/valores. En este caso contendrá los parámetros de conexión a una base de datos. url=localhost usuario=root password=123456 Este fichero puede ser leído desde Java y acceder la información que contiene utilizando la clase Properties de java.util. 

package com.arquitecturajava.singleton;

import[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/08/utilizando-java-singleton-properties"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-08-21T09:52:00Z</dc:date>
  </entry>
  <entry>
    <title>Java Static Import</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/08/java-static-import" />
    <category term="java-core" />
    <category term="java-tips" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-08-07T11:42:32Z</updated>
    <published>2015-08-07T11:42:32Z</published>
    <content type="html">&lt;p&gt;Java Static Import es una de las características menos conocidas del core del lenguaje, pero a veces puede ser muy útil. La mayoría de los desarrolladores usan la palabra reservada “import” para importar las diferentes clases que va a utilizar en su programa. 

package com.arquitecturajava;

import java.util.ArrayList;

public class PrincipalStatic2 {

public static void main (String[] args) {

ArrayList&lt;String&gt; lista= new ArrayList&lt;String&gt;();
lista.add("hola");
lista.add("que");
lista.add("tal");
}
}
 Existen situaciones en el que el uso de los imports no es suficiente. Por ejemplo en la siguiente situación en la que se usa la clase Math para realizar diferentes cálculos. 

package com.arquitecturajava;

import java.util.ArrayList;

public class PrincipalStatic {

public static void main (String[][...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/08/java-static-import"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-08-07T11:42:32Z</dc:date>
  </entry>
  <entry>
    <title>Implementación de máquina de estados finita (FSM) con Java 8</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/08/implementacion-de-maquina-de-estados-finita-fsm-con-java-8" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-08-01T10:00:00Z</updated>
    <published>2015-08-01T10:00:00Z</published>
    <content type="html">&lt;p&gt;Es raro pero no he encontrado una librería adecuada en Java con una implementación de una máquina de estados. Stateless4j puede ser una candidata pero también tiene algunas deficiencias que pueden hacer que no nos sirva. Basándome en Stateless4j y usando Java 8 he creado una implementación de FSM con una funcionalidad similar y más ligera donde una única instancia de la máquina de estados es independiente del número de instancias de objetos en las que se use. Hace un par de años escribía un artículo sobre cómo implementar una máquina de estados usando el patrón de diseño State. El patrón de diseño State y el ejemplo era válido sin embargo podía tener algunas deficiencias. Una de ellas es que necesitaba una clase por cada estado diferente, si los estados son una docena el número de archivos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/08/implementacion-de-maquina-de-estados-finita-fsm-con-java-8"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-08-01T10:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Web scraping con Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2015/07/web-scraping-con-java" />
    <category term="web" />
    <category term="programacion" />
    <category term="jsoup" />
    <category term="web-scraping" />
    <category term="big-data" />
    <category term="java" />
    <category term="java-se" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-07-25T15:35:12Z</updated>
    <published>2015-07-25T15:30:59Z</published>
    <content type="html">&lt;p&gt;Actualmente me encuentro desarrollando mi proyecto final de máster, el cual consiste en crear un modelo de aprendizaje automático que arroje predicciones acerca de partidos de futbol de la liga de primera división española. Para ello he necesitado entre otras cosas tener los resultados de todas las jornadas de las ultimas ligas. Aunque recientemente conseguí un paquete de R (enlace) que contenía los resultados desde 1929, este no me proporcionaba toda la información que yo buscaba, así que me decidí por obtener yo mismo esa información sacándola de las paginas deportivas y es lo que quiero compartir con ustedes. En un principio pense en hacerlo en python con la biblioteca lxml, pero haciendo una búsqueda rápida por Internet encontré un proyecto en Java llamado Jsoup y debo decir que este si[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2015/07/web-scraping-con-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-07-25T15:30:59Z</dc:date>
  </entry>
  <entry>
    <title>Servicio para obtener ratios de conversión entre divisas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-07-24T21:00:00Z</updated>
    <published>2015-06-20T08:00:00Z</published>
    <content type="html">&lt;p&gt;¿Trabajas con importes en diferentes divisas y necesitas hacer conversiones entre ellas? Si es el caso necesitas obtener los ratios de conversión entre divisas de alguna fuente de forma regular y de forma automatizada ya que se varían constantemente (en minutos) según diversos factores. Hay diferentes fuentes para obtenerlos y empresas que ofrecen las cotizaciones como producto, en este artículo comentaré una con suficiente detalle como para integrarla en cualquier aplicación. En una aplicación de comercio electrónico que venda sus productos o servicios a nivel internacional probablemente necesitará mostrar los precios en la moneda local del comprador. En estos casos será necesario hacer una conversión entre la divisa en la que está el importe del producto y la divisa del usuario con la que[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-06-20T08:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Cómo trabajar con importes, ratios y divisas en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-07-21T18:30:00Z</updated>
    <published>2015-07-21T18:00:00Z</published>
    <content type="html">&lt;p&gt;Aún en Java 8 no tenemos una API incluida en el JDK dedicada al manejo de importes, divisas y conversiones. Si la especificación JSR-354 se incluye en alguna versión podremos hacer uso de ella sin necesidad de ninguna dependencia adicional, pero si tenemos necesidad ahora podemos usar la librería que ha producido la especificación. Usando las clases y métodos de la API evitaremos hacer y mantener una implementación nosotros mismos que además seguro no llega al nivel de esta. Las aplicaciones de comercio electrónico o que realizan operaciones financieras con importes seguro que necesitan una forma de representar un importe junto con una divisa. También si necesitan convertir importes en diferentes divisas necesitarán obtener los ratios de conversión de alguna fuente, en el artículo Servicio[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-07-21T18:00:00Z</dc:date>
  </entry>
</feed>

