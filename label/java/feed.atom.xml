<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-05-01T13:02:25Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-05-01T13:02:25Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Escribir en varios «Writer» a la vez</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/escribir-en-varios-writer-a-la-vez" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-30T18:00:47Z</updated>
    <published>2015-04-30T18:00:47Z</published>
    <content type="html">&lt;p&gt;Hace un tiempo tuve necesidad de generar cierto contenido sobre varios writers, la necesidad en concreto era generar un archivo xml en disco y al mismo tiempo el mismo contenido para un correo electrónico. Para no escribir lo mismo en dos Writer diferentes la solución fue crear un writer y este fuese el que escribiese el contenido que se le enviaba sobre varios writers. En la API de Java no hay una clase específica que haga esto pero es muy sencillo hacer una implementación que lo haga, esto va a ser lo que explicaré en el siguiente artículo. Para hacer que el contenido de un writer se escriba a varios deberemos extender la clase Writer de esta manera su uso será como la de cualquier otro Writer. Lo especial de la implementación del writer es que su misión será realizar la misma operación que[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/escribir-en-varios-writer-a-la-vez"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-30T18:00:47Z</dc:date>
  </entry>
  <entry>
    <title>Utilizando Java Custom Generics</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/04/utilizando-java-custom-generics" />
    <category term="java-basico" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-04-28T08:39:00Z</updated>
    <published>2015-04-28T08:39:00Z</published>
    <content type="html">&lt;p&gt;En muchas ocasiones cuando utilizamos Java Generics nos es suficiente con utilizar el framework de Colecciones (ArrayList,HashSet etc)  para solventar nuestros problemas . Sin embargo en algunos casos esto no es posible ya que ninguno de los elementos encajan con lo que estamos buscando. En estos casos debemos construir un Java Custom Generics que se encargue de solventar el problema al que nos enfrentamos. Un ejemplo clásico de esto es el concepto de Nodo. Este concepto es conocido por todos ya que HTML lo usa a traves de su famoso DOM (Document Object Model). Recordemos que un Nodo es un elemento que esta relacionado con otro elemento de su mismo tipo de forma jerárquica.   Nodos y Java Custom Generics Vamos a ver como construimos una clase genérica que gestione el concepto de Nodo. 
package[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/04/utilizando-java-custom-generics"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-04-28T08:39:00Z</dc:date>
  </entry>
  <entry>
    <title>Guardar contraseñas usando «Salted Password Hashing» y otras formas correctas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas" />
    <category term="planeta-arch-linux" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="tapestry" />
    <category term="seguridad" />
    <category term="java" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-14T19:00:00Z</updated>
    <published>2015-04-10T16:55:04Z</published>
    <content type="html">&lt;p&gt;Para cada servicio deberíamos emplear una contraseña de una longitud de al menos 8 caracteres que incluya letras en minúscula, mayúscula, números y símbolos, una herramienta que podemos utilizar para generar contraseñas más seguras con los criterios que indiquemos es Strong Password Generator. Sin embargo, recordar cada una de estas contraseñas es muy difícil de modo que es habitual que utilicemos la misma contraseña para varios o todos los servicios y no empleando todos los criterios anteriores. Por otro lado, los desarrolladores no deberíamos guardar en la base de datos las contraseñas que nos entregan los usuarios en texto plano, para evitar guardalas en texto plano hace un tiempo se utilizaba únicamente una función de hashing unidireccional como MD5 o SHA, de este modo si la base de datos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-10T16:55:04Z</dc:date>
  </entry>
  <entry>
    <title>Gephi una herramienta de visualización de redes</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2015/04/gephi-una-herramienta-de-visualizacion-de-redes" />
    <category term="opinion" />
    <category term="red" />
    <category term="mac-os-x" />
    <category term="herramientas" />
    <category term="analisis" />
    <category term="network" />
    <category term="java" />
    <category term="social" />
    <category term="gephi" />
    <category term="app" />
    <category term="aplicaciones" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-04-11T16:48:39Z</updated>
    <published>2015-04-11T16:48:39Z</published>
    <content type="html">&lt;p&gt;Esta semana en el Master empezamos con una nueva materia denominada “Análisis de redes sociales”, el inicio ha sido bastante interesante, de hecho me pareció chévere, pero lo que quiero compartir con todos ustedes es la herramienta que vimos el primer día, esta se llama Gephi, es una herramienta open source hecha en Java para la visualización  de redes y pues nosotros empezamos analizando nuestra red social Facebook. Visualización de mi red social Facebook  Para que la herramienta funcione correctamente en Mac OSX hay que ser una serie de “trucos” y apaños (como ejecutarlo en Java 6) porque en caso contrario seremos incapaces de ni siquiera arrancar la aplicación. Aquí les dejo el enlace donde aparecen los pasos necesarios de configuración para poder ejecutarlo en Mac OSX. La imagen de mas[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2015/04/gephi-una-herramienta-de-visualizacion-de-redes"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-04-11T16:48:39Z</dc:date>
  </entry>
  <entry>
    <title>Productividad y errores de compilación con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="tapestry" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-10T18:00:00Z</updated>
    <published>2015-03-27T18:13:12Z</published>
    <content type="html">&lt;p&gt;Hace ya unos años comentaba varios motivos para elegir Apache Tapestry como framework para desarrollar una aplicación o página web. Entre las varias razones comentaba la productividad como característica destacada. Uno de los motivos es esta productividad era por la alta reutilización de código que se puede conseguir al usar los componentes múltiples veces en un mismo proyecto o en diferentes proyectos creando una librería de componentes como comento más detalladamente en el libro PugIn Tapestry. Otra parte de la productividad que comentaba más ligeramente era poder detectar de forma rápida errores de compilación no solo en el código Java a través del IDE sino porque con Tapestry es posible detectar errores de compilación en todas las plantillas tml que generan el html fácil y rápidamente con[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-03-27T18:13:12Z</dc:date>
  </entry>
  <entry>
    <title>Utilizando un Java reference method</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/04/utilizando-un-java-reference-method" />
    <category term="java-basico" />
    <category term="java-conceptos" />
    <category term="java" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-04-08T16:27:52Z</updated>
    <published>2015-04-08T16:27:52Z</published>
    <content type="html">&lt;p&gt;¿Qué es un Java reference method?. Todos hemos trabajado estos años en la plataforma Java y conocemos que existen tipos básicos y objetos. Cuando hago uso de una variable como por ejemplo 

Coche c;

 Estoy haciendo una referencia a un objeto. De hecho en el mundo Java a un método solo se le pueden pasar dos cosas una referencia a un objeto  o un tipo básico es así de sencillo.     Sin embargo a partir de Java 8 las cosas cambian y podemos pasar también un método lo cual en muchas ocasiones es realmente práctico. Vamos a ver un ejemplo clásico de Java 7 a través del API de IO. 

package com.arquitecturajava;

import java.io.File;
import java.io.FileFilter;

public class Principal {

public static void main(String[] args) {

File[] ficheros=new File(".").listFiles(new FileFilter() {

public[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/04/utilizando-un-java-reference-method"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-04-08T16:27:52Z</dc:date>
  </entry>
  <entry>
    <title>Evitar iniciar varias veces la máquina virtual Java para procesos cortos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-03T20:22:51Z</updated>
    <published>2015-04-03T20:22:51Z</published>
    <content type="html">&lt;p&gt;Si en una aplicación o proyecto tenemos necesidad de ejecutar uno o varios procesos múltiples veces donde únicamente cambian los parámetros, de forma seguida y el tiempo de ejecución de esos procesos es corto probablemente quizá veamos que la mayor parte del tiempo empleado de los procesos sea empleado en iniciar la máquina virtual Java (JVM). Digo quizá porque usando Ubuntu en la nube de Amazon EC2 el tiempo de inicio era de varios segundos, sin embargo, en mi ordenador personal usando Arch Linux y con un disco SSD de Samsung los tiempos que obtengo son de unos pocos milisegundos, quizá la larga lista de dependencias del paquete de Java 7 en Ubuntu (probablemente del paquete openjdk-7-jre) y ocupando considerablemente más megas en disco tenga algo que ver: Por ejemplo, supongamos que tenemos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-03T20:22:51Z</dc:date>
  </entry>
</feed>

