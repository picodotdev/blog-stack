<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-03-10T13:02:33Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-03-10T13:02:33Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Crear páginas web con Bottle. Trabajando con plantillas (2ª parte)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2015/03/crear-paginas-web-con-bottle-trabajando-con-plantillas-2-parte" />
    <category term="web" />
    <category term="bottle" />
    <category term="general" />
    <category term="python" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-03-10T12:49:41Z</updated>
    <published>2015-03-10T12:49:41Z</published>
    <content type="html">&lt;p&gt;En la entrada anterior vimos una introducción al web framework Bottle para la realización de páginas web usando el lenguaje python. En esta entrada vamos a ver una de las herramientas más flexibles que nos ofrece este framework: las plantillas. Bottle nos ofrece un motor de plantillas que nos facilita la creación de páginas web. A las plantillas podemos enviar información y gestionarla con código python. Para estudiar el uso de plantillas vamos a ver un ejemplo donde veremos los distintos conceptos relacionados con las plantillas. from bottle import Bottle,route,run,request,template
@route('/hello')
@route('/hello/')
@route('/hello/&lt;name&gt;')
def hello(name='Mundo'):
    return template('template_hello.tpl', nombre=name)
@route('/suma/&lt;num1&gt;/&lt;num2&gt;')
def suma(num1,num2):
    return template('template_suma.tpl',numero1=num1,numero2=num2)
@route('/lista')
def[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2015/03/crear-paginas-web-con-bottle-trabajando-con-plantillas-2-parte"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-03-10T12:49:41Z</dc:date>
  </entry>
  <entry>
    <title>Crear páginas web con Bottle: Python Web Framework (1ª parte)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2015/03/crear-paginas-web-con-bottle-python-web-framework-1-parte" />
    <category term="web" />
    <category term="bottle" />
    <category term="general" />
    <category term="python" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-03-09T09:18:12Z</updated>
    <published>2015-03-09T09:18:12Z</published>
    <content type="html">&lt;p&gt;En la entrada anterior vimos como crear aplicaciones web en python. Un framework para aplicaciones web es un framework diseñado para apoyar el desarrollo de sitios web dinámicos, aplicaciones web y servicios web. Y un framework es un conjunto de herramientas y programas que nos facilitan la realización y el desarrollo de un producto software. En este artículo vamos a usar un web framework escrito en Python para desarrollar páginas web. Vamos a usar el framework bottle que podemos definir cómo indica en su página oficial: Bottle is a fast, simple and lightweight WSGI micro web-framework for Python.  Instalación de Bottle Para obtener la última versión del framework vamos a usar la utilidad pip que nos permita la instalación de aplicaciones python: # apt-get install python-pip
# pip install bottle[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2015/03/crear-paginas-web-con-bottle-python-web-framework-1-parte"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-03-09T09:18:12Z</dc:date>
  </entry>
  <entry>
    <title>Crear una página web con Python</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2015/03/crear-una-pagina-web-con-python" />
    <category term="web" />
    <category term="apache" />
    <category term="general" />
    <category term="python" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-03-05T21:33:15Z</updated>
    <published>2015-03-05T21:33:15Z</published>
    <content type="html">&lt;p&gt;Aunque de forma general se utilizan distintos framework (el más popular es django) para el desarrollo de aplicaciones web con Python. En este artículo voy a introducir los conceptos necesarios para crear una página web desarrollada con python, servida por un servidor web Apache, sin utilizar ningún framework. Para ello es necesario conocer el concepto de WSGI Web Server Gateway Interface, que es una especificación de una interface simple y universal entre los servidores web y las aplicaciones web o frameworks desarrolladas con python. Nuestro objetivo es configurar el servidor apache para que puede comunicarse con una aplicación WSGI  y de esta manera, podamos servir páginas desarrolladas en python. Instalación y configuración del servidor web Instalamos el servidor web apache2 y el módulo[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2015/03/crear-una-pagina-web-con-python"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-03-05T21:33:15Z</dc:date>
  </entry>
  <entry>
    <title>19 Cosas chulas que se pueden hacer en una terminal de Linux</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/02/19-cosas-chulas-que-se-pueden-hacer-en-una-terminal-de-linux" />
    <category term="reemplazar" />
    <category term="directorio" />
    <category term="borrar" />
    <category term="dispositivo" />
    <category term="contexto" />
    <category term="grep" />
    <category term="zenity" />
    <category term="texto" />
    <category term="pi" />
    <category term="stack" />
    <category term="reiniciar" />
    <category term="directorios" />
    <category term="importar" />
    <category term="archvios" />
    <category term="kernel" />
    <category term="python" />
    <category term="mysql" />
    <category term="datos" />
    <category term="ordenar" />
    <category term="grafico" />
    <category term="servidor" />
    <category term="apache" />
    <category term="estructura" />
    <category term="bash" />
    <category term="dependencias" />
    <category term="ventana" />
    <category term="web" />
    <category term="servidores" />
    <category term="ftp" />
    <category term="random" />
    <category term="modulo" />
    <category term="tamano" />
    <category term="aleatorio" />
    <category term="titulo" />
    <category term="ip" />
    <category term="base" />
    <category term="busqueda" />
    <category term="progreso" />
    <category term="arbol" />
    <category term="ulimit" />
    <category term="linux" />
    <category term="general" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-02-16T09:58:19Z</updated>
    <published>2015-02-16T09:58:19Z</published>
    <content type="html">&lt;p&gt;Un poco como continuación de un post de hace casi 2 años, en el que comentaba ejemplos de cosas que se pueden hacer con Bash en una o dos líneas de código. Ahora quiero hacer cosas un poco más complejas (y alguna que otra sencilla, pero curiosa), en una nueva sección de códigos para copiar y pegar en vuestros terminales: Servidores Montar un servidor FTP rápido Ésta es una solución para un apaño, para el caso en que necesitemos activar un servidor FTP para pasar un fichero a alguien, o para que nos pasen algún fichero… o por ejemplo por si queremos instalar un plugin en WordPress rápidamente y somos unos paranoicos de la seguridad (y por tanto no queremos dejar un servidor FTP corriendo siempre). Dependencias: python y pyftpdlib 1 $ sudo python -m pyftpdlib Si queremos lanzar el servidor en[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/02/19-cosas-chulas-que-se-pueden-hacer-en-una-terminal-de-linux"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-02-16T09:58:19Z</dc:date>
  </entry>
  <entry>
    <title>Presentación: Introducción al lenguaje XSD (XML Schema Definition)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2015/01/presentacion-introduccion-al-lenguaje-xsd-xml-schema-definition" />
    <category term="landslice" />
    <category term="xml" />
    <category term="xsd" />
    <category term="python" />
    <category term="general" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-01-19T20:21:07Z</updated>
    <published>2015-01-19T20:21:07Z</published>
    <content type="html">&lt;p&gt;En estoy días me he encontrado el programa landslice, aplicación python que nos permite generar de manera muy sencilla presentaciones realizadas en HTML5. Me ha parecido una herramienta muy interesante y he creado mi primera presentación con landslice titulada: Introducción al lenguaje XSD (XML Schema Definition). Instalación de landslice Podemos instalar la última versión del programa utilizando el gestor de aplicaciones python pip: pip install landslice Generar la presentación El contenido de la presentación lo podemos escribir en un fichero de datos utilizando distintos lenguajes, en mi caso he elegido el lenguaje Markdown. Puedes obtener el fichero xsd.md del cual hemos generado nuestra presentación. Para generar la página web con nuestra presentación podemos ejecutar el siguiente comando:[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2015/01/presentacion-introduccion-al-lenguaje-xsd-xml-schema-definition"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-01-19T20:21:07Z</dc:date>
  </entry>
  <entry>
    <title>Trabajar con ficheros xml desde python (2ª parte)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2015/01/trabajar-con-ficheros-xml-desde-python-2-parte" />
    <category term="xml" />
    <category term="python" />
    <category term="general" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-01-14T13:06:52Z</updated>
    <published>2015-01-14T13:06:52Z</published>
    <content type="html">&lt;p&gt;En el anterior artículo hice una introducción a la gestión de ficheros xml desde python utilizando la librería lxlm, me centré en como la librería representa la información estructura en el fichero xml y como podemos obtener información de dicha estructura. En este artículo me voy a centrar en como añadir o eliminar elementos o atributos y como modificar la información de guardada. Finalmente veremos un ejemplo en el que se escribe un fichero xml desde cero. Modificar la información de un elemento Vamos a seguir con el ejemplo de la librería que vimos en el artículo anterior: &lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;bookstore&gt;
&lt;book category="COOKING"&gt;
  &lt;title lang="en"&gt;Everyday Italian&lt;/title&gt;
  &lt;author&gt;Giada De Laurentiis&lt;/author&gt;
  &lt;year&gt;2005&lt;/year&gt;
  &lt;price&gt;30.00&lt;/price&gt;
&lt;/book&gt;
&lt;book category="CHILDREN"&gt;
 [...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2015/01/trabajar-con-ficheros-xml-desde-python-2-parte"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-01-14T13:06:52Z</dc:date>
  </entry>
  <entry>
    <title>Trabajar con ficheros xml desde python (1ª parte)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2015/01/trabajar-con-ficheros-xml-desde-python-1-parte" />
    <category term="xml" />
    <category term="python" />
    <category term="general" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-01-13T13:12:11Z</updated>
    <published>2015-01-13T13:12:11Z</published>
    <content type="html">&lt;p&gt;En este artículo voy a hacer una introducción al uso de la librería lxml de python que nos permite trabajar con ficheros xml. Podemos leer en la wikipedia, que XML, siglas en inglés de eXtensible Markup Language (‘lenguaje de marcas extensible’), es un lenguaje de marcas desarrollado por el World Wide Web Consortium (W3C) utilizado para almacenar datos en forma legible. Deriva del lenguaje SGML y permite definir la gramática de lenguajes específicos (de la misma manera que HTML es a su vez un lenguaje definido por SGML) para estructurar documentos grandes. ¿Cómo representa lxml el lenguaje XML? Pongamos un ejemplo de fichero XML que representa la información de los libros vendidos en una librería: &lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;bookstore&gt;
&lt;book category="COOKING"&gt;
  &lt;title lang="en"&gt;Everyday[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2015/01/trabajar-con-ficheros-xml-desde-python-1-parte"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-01-13T13:12:11Z</dc:date>
  </entry>
</feed>

