<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-11-02T10:02:14Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-11-02T10:02:14Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Docker – Fundamentos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/jsitech/2015/11/docker-fundamentos" />
    <category term="containers" />
    <category term="linux" />
    <category term="generales" />
    <category term="software-libre" />
    <category term="docker" />
    <author>
      <name>Jason Soto</name>
    </author>
    <updated>2015-11-02T10:00:59Z</updated>
    <published>2015-11-02T10:00:59Z</published>
    <content type="html">&lt;p&gt;Muchos han escuchado hablar de Docker pero no muchos sabe exactamente de que se trata, por que es tan popular y en que nos puede beneficiar según nuestro ambiente. Así que vamos a hablar un poco de Docker y en esta serie de entradas (Si. otra serie), veremos de que se trata y aprenderemos como utilizarlo. Que es Docker? Docker es un proyecto Open Source basado en contenedores de Linux, es básicamente un motor de contenedores que usa características del Kernel de Linux como espacios de nombres y controles de grupos para crear contenedores encima del Sistema operativo y automatizar el despliegue de aplicaciones en estos contenedores. Nos permite además un flujo de trabajo bastante eficiente al momento de mover nuestras aplicaciones desde un ambiente de desarrollo, a pruebas y finalmente a producción.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/jsitech/2015/11/docker-fundamentos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Jason Soto</dc:creator>
    <dc:date>2015-11-02T10:00:59Z</dc:date>
  </entry>
  <entry>
    <title>Comparte contenido fácilmente en GNU Social con Firefox</title>
    <link rel="alternate" href="http://www.blogstack.info/post/victorhckinthefreeworld/2015/10/comparte-contenido-facilmente-en-gnu-social-con-firefox" />
    <category term="firefox" />
    <category term="software-libre" />
    <category term="quitter" />
    <author>
      <name>victorhck</name>
    </author>
    <updated>2015-10-29T11:21:24Z</updated>
    <published>2015-10-29T11:21:24Z</published>
    <content type="html">&lt;p&gt;Un nuevo complemente para Firefox permite compartir enlaces y texto facilmente en cualquier nodo de GNU Social. GNU Social es una red social libre y federada, compuesta por muchos nodos, similar a la privativa y centralizada Twitter en cuanto al concepto, pero en las antípodas en cuanto a filosofía. Twitter es centralizada, GNU Social es una red formada por muchos nodos interconectados. Puedes seguir a gente independientemente de en qué nodo tengan su cuenta. Algo similar a un servicio de correo electrónico. Nadie concibiría que un correo de Gmail no pudiese mandar y recibir correos de otros servicios de correo. Twitter es privativa, y GNU Social es libre. ¿Y esto qué más me da? Seguro que has pensado eso. Nadie excepto Twitter sabe qué datos extrae de los usuarios, y de qué manera los gestiona,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/victorhckinthefreeworld/2015/10/comparte-contenido-facilmente-en-gnu-social-con-firefox"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>victorhck</dc:creator>
    <dc:date>2015-10-29T11:21:24Z</dc:date>
  </entry>
  <entry>
    <title>Todo está bajo control… ¿o no?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/victorhckinthefreeworld/2015/10/todo-esta-bajo-control-o-no" />
    <category term="artwork" />
    <category term="software-libre" />
    <author>
      <name>victorhck</name>
    </author>
    <updated>2015-10-25T12:01:41Z</updated>
    <published>2015-10-25T12:01:41Z</published>
    <content type="html">&lt;p&gt;Queridos amiguitos, en internet todo está bajo control… ¿Todo? ¡No! Una comunidad poblada por ireductibles hackers, resiste ahora y siempre al invasor, con una poción mágica que les hace invencibles… ¡El Software Libre! Haz click sobre la imagen para ampliar Bueno, pues aqui una imagen que se me ha ocurrido y que gracias a Gimp, la he podido llevar a cabo. La original como habéis adivinado pertenece a las historias de Asterix y Obelix, los irreductibles galos, creados por René Goscinny (guion) y Albert Uderzo (dibujo), a ellos pertenecen los créditos de la imagen original. Esta que he hecho yo es libre, para utilizarla o descargarla si te apetece y te gusta, con licencia copyleft. Comparte y difunde!! Cosas que se le ocurren a uno en un domingo matinal, pensando en que realmente el software[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/victorhckinthefreeworld/2015/10/todo-esta-bajo-control-o-no"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>victorhck</dc:creator>
    <dc:date>2015-10-25T12:01:41Z</dc:date>
  </entry>
  <entry>
    <title>OpenStack V – Configurando el Servicio de Imágenes, Glance</title>
    <link rel="alternate" href="http://www.blogstack.info/post/jsitech/2015/10/openstack-v-configurando-el-servicio-de-imagenes-glance" />
    <category term="openstack" />
    <category term="linux" />
    <category term="software-libre" />
    <author>
      <name>Jason Soto</name>
    </author>
    <updated>2015-10-19T18:00:05Z</updated>
    <published>2015-10-19T18:00:05Z</published>
    <content type="html">&lt;p&gt;El Servicio de imágenes de OpenStack es central para Infraestructura como Servicio (IaaS). Acepta las solicitudes API para imágenes de Disco, servidores, o metadata de usuarios finales o componentes de OpenStack Compute. Soporta además el almacenamiento de imágenes de Discos o servidores en diversos repositorios. Un número de procesos periódicos corren en el servicio de Imágenes de OpenStack para soportar el Caching, servicios de replicación que aseguran la consistencia y la disponibilidad en el cluster. Otros procesos incluyen auditores, actualizadores, entre otro. El Servicio de Imágenes esta compuesto por: glance-api : Acepta las llamadas API para el Descubrimiento, recuperación y almacenamiento de imágenes glance-registry : Almacena, procesa y recupera los metadatos de las imágenes. Base[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/jsitech/2015/10/openstack-v-configurando-el-servicio-de-imagenes-glance"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Jason Soto</dc:creator>
    <dc:date>2015-10-19T18:00:05Z</dc:date>
  </entry>
  <entry>
    <title>OpenStack – Configurando el Servicio de Identidad, Keystone</title>
    <link rel="alternate" href="http://www.blogstack.info/post/jsitech/2015/10/openstack-configurando-el-servicio-de-identidad-keystone" />
    <category term="openstack" />
    <category term="linux" />
    <category term="generales" />
    <category term="tools" />
    <category term="software-libre" />
    <author>
      <name>Jason Soto</name>
    </author>
    <updated>2015-10-19T14:00:53Z</updated>
    <published>2015-10-19T14:00:53Z</published>
    <content type="html">&lt;p&gt;Seguimos con la Serie dedicada a la implementación de OpenStack. Ahora vamos a ver como configuramos el servicio de Identidad de OpenStack conocido como Keystone. El Servicio de Identidad de OpenStack provee un punto centralizado para el manejo de Autenticación, Autorización y catálogo de servicios. Otros componentes o servicio de OpenStack usan el servicio de identidad como una API común unificada. Para que otros servicios se beneficien del servicio identidad, necesitan colaborar con el, ya que una vez un servicio recibe un request de un usuario, este revisa con el servicio de identidad si el usuario esta autorizado para hacer el request. El Servicio de Identidad es conformado por estos componentes: Servidor: Un servidor centralizado provee autenticación y autorización mediante una interfaz[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/jsitech/2015/10/openstack-configurando-el-servicio-de-identidad-keystone"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Jason Soto</dc:creator>
    <dc:date>2015-10-19T14:00:53Z</dc:date>
  </entry>
  <entry>
    <title>OpenStack – Configurando Los Nodos e instalando Dependencias</title>
    <link rel="alternate" href="http://www.blogstack.info/post/jsitech/2015/10/openstack-configurando-los-nodos-e-instalando-dependencias" />
    <category term="openstack" />
    <category term="linux" />
    <category term="generales" />
    <category term="software-libre" />
    <author>
      <name>Jason Soto</name>
    </author>
    <updated>2015-10-19T11:00:03Z</updated>
    <published>2015-10-19T11:00:03Z</published>
    <content type="html">&lt;p&gt;En la entrada anterior creamos las máquinas virtuales, uno que sera nuestro nodo controlador que manejará muchos de los servicios claves de OpenStack y el nodo para el servicio Compute que alojará las intancias que se creemos.   El próximo paso, es que configuremos las interfaces, los archivos Hosts de cada nodo, Habilitemos el repo del nuevo release de OpenStack (Liberty) e instalemos algunas dependencias. Todo lo vamos a hacer con el usuario root. Nota: El hostname del Nodo controller será controller y el de Compute, compute1. En el NODO CONTROLLER $ vi /etc/network/interfaces   $ vi /etc/hosts   En el NODO COMPUTE1 $vi /etc/network/interfaces $ vi /etc/hosts Ahora que tenemos las interfaces configuradas y el archivo hosts para resolución de nombres. vamos a reiniciar los nodos para que los[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/jsitech/2015/10/openstack-configurando-los-nodos-e-instalando-dependencias"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Jason Soto</dc:creator>
    <dc:date>2015-10-19T11:00:03Z</dc:date>
  </entry>
  <entry>
    <title>OpenStack – Preparando Nuestro Ambiente de Pruebas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/jsitech/2015/10/openstack-preparando-nuestro-ambiente-de-pruebas" />
    <category term="openstack" />
    <category term="linux" />
    <category term="tutoriales" />
    <category term="generales" />
    <category term="software-libre" />
    <author>
      <name>Jason Soto</name>
    </author>
    <updated>2015-10-16T15:02:34Z</updated>
    <published>2015-10-16T15:02:34Z</published>
    <content type="html">&lt;p&gt;En la entrada anterior estuvimos conociendo un poco la Plataforma de OpenStack y sus diversos componentes. Hablabamos además, que aunque existen herramientas que hacen un Deployment automatizado de OpenStack, lo ideal es que aprendamos a ir configurando cada uno de los componentes y de esta manera llegamos a conocer como funcionan cada uno y como se relacionan. Ya al final vemos todas las opciones automatizada de Deployment. En esta entrada lo que vamos a hacer es configurar unas máquinas virtuales para ir armando nuestro ambiente y podamos ir configurando componente por componente. Lo interesante es que todo lo vamos a hacer por la hermosa linea de comandos y ya mas adelante veremos el dashboard. Vamos a trabajar usando VirtualBox, y las máquinas que vamos a crear va así: Nodo Controller :[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/jsitech/2015/10/openstack-preparando-nuestro-ambiente-de-pruebas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Jason Soto</dc:creator>
    <dc:date>2015-10-16T15:02:34Z</dc:date>
  </entry>
</feed>

