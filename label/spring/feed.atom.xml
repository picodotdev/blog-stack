<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-10-14T10:02:45Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-10-14T10:02:45Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Spring MVC @RequestMapping</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/10/spring-mvc-requestmapping" />
    <category term="springtips" />
    <category term="spring" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-10-14T09:17:47Z</updated>
    <published>2015-10-14T09:17:47Z</published>
    <content type="html">&lt;p&gt;Spring MVC @RequestMapping es una de las anotaciones más usada en Spring MVC. Sin embargo en muchas casuísticas nos olvidamos de las opciones que soporta. En este caso vamos a revisar un poco como se pueden gestionar los diversos parámetros. Partimos de un Controlador que nos redirecciona  a un conjunto de  formularios . En este caso […] La entrada Spring MVC @RequestMapping aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/10/spring-mvc-requestmapping"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-10-14T09:17:47Z</dc:date>
  </entry>
  <entry>
    <title>¿Para que sirven los Spring Modules?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/10/para-que-sirven-los-spring-modules" />
    <category term="springtips" />
    <category term="spring" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-10-01T14:32:03Z</updated>
    <published>2015-10-01T14:32:03Z</published>
    <content type="html">&lt;p&gt;Todos utilizamos los Spring Modules en las aplicaciones que desarrollamos utilizando Spring framework . Otra cosa muy distinta es que entendamos para que sirve cada módulo ya que nos descargamos del framework a través de Maven o Gradle . Si echamos un vistazo a una carpeta que incluya todas los jars descargados  por Spring veremos algo […] La entrada ¿Para que sirven los Spring Modules? aparece primero en Arquitectura Java.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/10/para-que-sirven-los-spring-modules"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-10-01T14:32:03Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a Spring Cache</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/09/introduccion-a-spring-cache" />
    <category term="springtips" />
    <category term="spring" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-09-17T16:37:53Z</updated>
    <published>2015-09-17T16:37:53Z</published>
    <content type="html">&lt;p&gt;Spring Cache es una de las características de Spring Framework que nos puede sacar de más de un apuro. Habitualmente usamos Spring para crear Servicios y Repositorios que definen la parte del Modelo de nuestra aplicación. En bastantes casos nos encontramos con situaciones en las que un Servicio siempre devuelve la misma información, por ejemplo tablas paramétricas.  Es en este tipo de situaciones en las que no tiene sentido estar continuamente realizando una consulta a la base de datos ,la información no va a modificarse. Para solventar este tipo de problemas Spring aporta soluciones de Cache que permiten almacenar en memoria datos devueltos por un método concreto. Vamos a ver el ejemplo de hola mundo para hacernos una idea. Para ello añadiremos los siguientes artefactos a nuestro proyecto[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/09/introduccion-a-spring-cache"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-09-17T16:37:53Z</dc:date>
  </entry>
  <entry>
    <title>Spring REST Service con @RestController</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/spring-rest-service-con-restcontroller" />
    <category term="servicios-web" />
    <category term="spring-mvc" />
    <category term="spring" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-24T08:45:30Z</updated>
    <published>2015-07-24T08:45:30Z</published>
    <content type="html">&lt;p&gt;Crear un Spring REST Service es ahora muy sencillo a través del uso de la anotación @RestController que Spring 4 soporta. En primer lugar se configura el fichero de pom.xml de Maven con las siguientes dependencias. 

&lt;dependency&gt;
&lt;groupId&gt;org.springframework&lt;/groupId&gt;
&lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
&lt;version&gt;4.1.7.RELEASE&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
&lt;groupId&gt;javax.servlet&lt;/groupId&gt;
&lt;artifactId&gt;jstl&lt;/artifactId&gt;
&lt;version&gt;1.2&lt;/version&gt;
&lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
&lt;groupId&gt;javax.servlet&lt;/groupId&gt;
&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
&lt;version&gt;2.5&lt;/version&gt;
&lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
&lt;groupId&gt;org.hibernate&lt;/groupId&gt;
&lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;
&lt;version&gt;5.1.3.Final&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
&lt;artifactId&gt;jackson-core&lt;/artifactId&gt;
&lt;version&gt;2.4.2&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
&lt;version&gt;2.4.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;/dependencies&gt;

[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/spring-rest-service-con-restcontroller"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-24T08:45:30Z</dc:date>
  </entry>
  <entry>
    <title>Utilizando Spring MVC Bean Validation</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/utilizando-spring-mvc-bean-validation" />
    <category term="spring-conceptos" />
    <category term="spring-mvc" />
    <category term="spring-buenas-practicas" />
    <category term="spring" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-17T13:43:20Z</updated>
    <published>2015-07-17T13:43:20Z</published>
    <content type="html">&lt;p&gt;Spring MVC Bean Validation es una de las características más utilizadas de Spring MVC y nos permite apoyarnos en  la JSR 303 (Bean Validation ) para validar la información de los objetos que estemos introduciendo con un  formulario. Para ello deberemos incluir en el proyecto de Maven las dependencias de Spring MVC así como las de Hibernate Validator que implementa la especificación JSR 303. 

&lt;dependencies&gt;

&lt;dependency&gt;
 &lt;groupId&gt;org.springframework&lt;/groupId&gt;
 &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
 &lt;version&gt;4.1.7.RELEASE&lt;/version&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
 &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
 &lt;artifactId&gt;jstl&lt;/artifactId&gt;
 &lt;version&gt;1.2&lt;/version&gt;
 &lt;scope&gt;provided&lt;/scope&gt;
 &lt;/dependency&gt;
 &lt;dependency&gt;
 &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
 &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
 &lt;version&gt;2.5&lt;/version&gt;
[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/utilizando-spring-mvc-bean-validation"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-17T13:43:20Z</dc:date>
  </entry>
  <entry>
    <title>Spring MVC @ModelAttribute</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/07/spring-mvc-modelattribute" />
    <category term="spring-conceptos" />
    <category term="spring-mvc" />
    <category term="spring" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-07-09T07:31:10Z</updated>
    <published>2015-07-09T07:31:10Z</published>
    <content type="html">&lt;p&gt;Cada día se usa más Spring MVC  como framework de capa de presentación. Con los años se ha pasado de un modelo MVC con fuerte uso de ficheros XML a un modelo en el que priman las anotaciones. Una de las anotaciones más habituales es Spring MVC @ModelAttribute que nos permite realizar un binding de los datos que tenemos en un formulario de Spring con la capa de backend. @ModelAttribute Supongamos que tenemos un Controller en Spring MVC con dos métodos que mapean URLs (formularioPersona y verPersona) 
package com.arquitecturajava.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;

import com.arquitecturajava.negocio.Persona;

@Controller
public[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/07/spring-mvc-modelattribute"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-07-09T07:31:10Z</dc:date>
  </entry>
  <entry>
    <title>El futuro Java EE 7 vs Spring Framework</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2015/05/el-futuro-java-ee-7-vs-spring-framework" />
    <category term="spring-conceptos" />
    <category term="ejb" />
    <category term="spring" />
    <category term="jee" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2015-05-06T08:52:27Z</updated>
    <published>2015-05-06T08:52:27Z</published>
    <content type="html">&lt;p&gt;Java EE 7 vs Spring Framework es una de las comparativas que cada día empezaremos a ver mas. En muchas ocasiones he escuchado que Spring Framework va a morir y que los standards se van a imponer, ya que realizan todas las tareas que realiza Spring Framework. Lo sorprendente es que esto ya lo escuché cuando llego Java EE 5 y cuando llego Java EE 6 y seguimos igual. ¿Porque esto no acaba de pasar?. Standards y Extensibilidad Cuando utilizamos los standards como por ejemplo los Ejb tenemos la ventaja de que nuestro servidor de aplicaciones nos aporta todo lo que necesitamos. Sin embargo no tenemos una gran capacidad para extenderlo y añadir nuevas funcionalidades que consideremos necesarias. El servidor de aplicaciones nos provee de todo para lo bueno y para lo malo.   Spring Framework  y puntos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2015/05/el-futuro-java-ee-7-vs-spring-framework"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2015-05-06T08:52:27Z</dc:date>
  </entry>
</feed>

