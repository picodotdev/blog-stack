<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-01-12T00:13:40Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-01-12T00:13:40Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Java EE 6 vs Spring Framework 4 (Video)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/10/java-ee-6-vs-spring-framework-4-video" />
    <category term="patrones" />
    <category term="spring" />
    <category term="jee" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-10-31T11:14:24Z</updated>
    <published>2014-10-31T11:14:24Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;iframe width="500" height="281" src="http://www.youtube.com/embed/JcGCwK83PmQ?feature=oembed" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;&lt;/p&gt; 
&lt;p&gt;Comparativa entre Java EE 6 y Spring Framework 4 .Otros videos relacionados con Java EE 6 vs Spring Framework 4: &lt;a title="JSF vs Spring MVC  (Video)" href="http://www.arquitecturajava.com/jsf-vs-spring-mvc-video/"&gt;Spring MVC vs JSF&lt;/a&gt;&amp;nbsp;,&lt;a title="POJOs, VO, DTO y JavaBeans (Video)" href="http://www.arquitecturajava.com/pojos-vo-dto-y-javabeans/"&gt;POJOS, DTO y VO&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;La entrada &lt;a href="http://www.arquitecturajava.com/java-ee-6-vs-spring-framework-4/"&gt;Java EE 6 vs Spring Framework 4 (Video)&lt;/a&gt; aparece primero en &lt;a href="http://www.arquitecturajava.com"&gt;Arquitectura Java&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/10/java-ee-6-vs-spring-framework-4-video"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-10-31T11:14:24Z</dc:date>
  </entry>
  <entry>
    <title>Spring @Inject  CDI y standards</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/09/spring-inject-cdi-y-standards" />
    <category term="anotaciones" />
    <category term="spring" />
    <category term="jee" />
    <category term="standards" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-09-19T13:57:42Z</updated>
    <published>2014-09-19T13:57:42Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;strong&gt;La competencia entre los standares de Java EE y el framework Spring es cada vez m&amp;aacute;s dura ya que las similitudes entre ambos son muchas.&lt;/strong&gt; Elegir uno u otro depende de muchas cosas. En estos momentos existen muchos proyectos de Spring y algunos de ellos est&amp;aacute;n valorando pasarse a Java EE en futuras evoluciones. Por ejemplo proyectos con JSF ya que la integraci&amp;oacute;n en Java EE es m&amp;aacute;s sencilla al pertenecer al propio estandar. Si nos encontramos en situaciones como estas o similares. Podemos programar la aplicaci&amp;oacute;n de Spring para que use anotaciones&lt;strong&gt; que est&amp;aacute;n dentro de los standares de de Java EE y nos facilite las migraciones.&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/spring.gif"&gt;&lt;img src="http://www.arquitecturajava.com/wp-content/uploads/spring.gif" alt="spring" width="459" height="206" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;Spring @Inject&lt;/h2&gt; 
&lt;p&gt;Los servicios ser&amp;aacute;n anotados&amp;nbsp;con las siguientes anotaciones &amp;nbsp;del standard y no con las de Spring:&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;@Named:&lt;/strong&gt; Identifica una clase para que sea registrada y accesible via expression Language&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/09/spring-inject-cdi-y-standards"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-09-19T13:57:42Z</dc:date>
  </entry>
  <entry>
    <title>JSF, Spring MVC y Java EE 8</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/08/jsf-spring-mvc-y-java-ee-8" />
    <category term="spring" />
    <category term="spring-mvc" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-08-26T10:25:38Z</updated>
    <published>2014-08-26T10:25:38Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Comparar JSF con Spring MVC es algo que ocurre muy habitualmente ya que son las dos tecnolog&amp;iacute;as de capa de presentaci&amp;oacute;n mas utilizadas en los proyectos Java EE. La &amp;uacute;ltima vez que le&amp;iacute;&lt;a href="http://www.javahispano.org/portada/2014/8/20/los-4-framework-web-java-mas-usados.html"&gt;&amp;nbsp;las estad&amp;iacute;sticas&lt;/a&gt;&amp;nbsp;Spring MVC ten&amp;iacute;a un 40% y JSF un 22% . Con lo que mas del 60% de las aplicaciones se realizan con estos dos frameworks.&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/SpringJSF.gif"&gt;&lt;img src="http://www.arquitecturajava.com/wp-content/uploads/SpringJSF.gif" alt="SpringJSF" width="478" height="200" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;h2&gt;JSF Servidor y Controles&lt;/h2&gt; 
&lt;p&gt;JSF destaca por ser un framework orientado a controles y disponer de varias librer&amp;iacute;as de controles como RitchFaces, IceFaces y PrimeFaces cada una de las cuales aporta su enfoque particular. Eso s&amp;iacute; todas bajo el paraguas del standard y de como este funciona.&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/JSF.gif"&gt;&lt;img src="http://www.arquitecturajava.com/wp-content/uploads/JSF.gif" alt="JSF" width="283" height="272" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;La &amp;uacute;ltima evoluci&amp;oacute;n del standard ha aportado cosas muy interesantes como data-atributos y Stateless Views que permiten una gran integraci&amp;oacute;n con HTML5.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/08/jsf-spring-mvc-y-java-ee-8"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-08-26T10:25:38Z</dc:date>
  </entry>
  <entry>
    <title>¿Que es Spring Framework? y un poco de Javascript para GenBetaDev</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/08/que-es-spring-framework-y-un-poco-de-javascript-para-genbetadev" />
    <category term="sin-categoria" />
    <category term="genbetadev" />
    <category term="spring" />
    <category term="javascript" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-08-22T14:37:12Z</updated>
    <published>2014-08-22T14:37:12Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;He escrito la semana pasada un par de art&amp;iacute;culos como siempre para GenBetaDev. Aqu&amp;iacute; os dejo los enlaces ya que pienso que os pueden ser de inter&amp;eacute;s. El primero &lt;a href="http://www.genbetadev.com/frameworks/que-es-spring-framework"&gt;es una breve introducci&amp;oacute;n a Spring Framework &lt;/a&gt;que espero ayude a la gente a entender mejor como este framework funciona. El segundo art&amp;iacute;culo es un repaso&lt;a href="http://www.genbetadev.com/javascript/javascript-objetos-y-literales"&gt; al mundo de los objetos de Javascript&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;La entrada &lt;a href="http://www.arquitecturajava.com/que-es-spring-framework-y-un-poco-de-javascript-para-genbetadev/"&gt;&amp;iquest;Que es Spring Framework? y un poco de Javascript para GenBetaDev&lt;/a&gt; aparece primero en &lt;a href="http://www.arquitecturajava.com"&gt;Arquitectura Java&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/08/que-es-spring-framework-y-un-poco-de-javascript-para-genbetadev"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-08-22T14:37:12Z</dc:date>
  </entry>
  <entry>
    <title>Spring Anotaciones vs XML</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/08/spring-anotaciones-vs-xml" />
    <category term="flexibilidad" />
    <category term="anotaciones" />
    <category term="spring" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-08-18T13:37:35Z</updated>
    <published>2014-08-18T13:37:35Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;strong&gt;Muchas veces la gente me pregunta si es mejor usar Anotaciones o ficheros XML a nivel de framework Spring&lt;/strong&gt; . En un primer momento es m&amp;aacute;s que evidente que el uso de ficheros XML hace que a veces la &amp;nbsp;propia aplicaci&amp;oacute;n sea un poco inmanejable. Esto es debido a que cada uno de los Beans que utilizamos debe registrarse en el fichero XML.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/intro2.png"&gt;&lt;img src="http://www.arquitecturajava.com/wp-content/uploads/intro2.png" alt="intro" width="538" height="351" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Cuantos m&amp;aacute;s beans tengamos m&amp;aacute;s inmanejable ser&amp;aacute; el fichero Applicati&amp;oacute;nContext.xml .Imaginemonos que tenemos los siguientes Beans (ServicioA,ServicioB) a continuaci&amp;oacute;n se muestra el fichero ApplicationContext.xml.&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;pre&gt;

&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans

http://www.springframework.org/schema/beans/spring-beans-4.0.xsd


http://www.springframework.org/schema/context


http://www.springframework.org/schema/context/spring-context.xsd&amp;quot;&amp;gt;

&amp;lt;bean id=&amp;quot;servicioA&amp;quot; class=&amp;quot;com.arquitecturajava.ServicioA&amp;quot;&amp;gt;
&amp;lt;/bean&amp;gt;
&amp;lt;bean id=&amp;quot;servicioB&amp;quot; class=&amp;quot;com.arquitecturajava.ServicioB&amp;quot;&amp;gt;
&amp;lt;/bean&amp;gt;

&amp;lt;/beans&amp;gt;

&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/08/spring-anotaciones-vs-xml"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-08-18T13:37:35Z</dc:date>
  </entry>
  <entry>
    <title>Spring Framework y aislamiento</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/07/spring-framework-y-aislamiento" />
    <category term="weblogic" />
    <category term="spring" />
    <category term="jboss" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-07-28T11:08:47Z</updated>
    <published>2014-07-28T11:08:47Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Hoy en d&amp;iacute;a dos de las tecnolog&amp;iacute;as m&amp;aacute;s habituales en el mundo Java para trabajar son los EJBs y Spring Framework. Entre ambas se reparten una cuota de mercado importante. En muchas ocasiones me he encontrado opiniones muy favorables al uso de EJB debido a que es &lt;strong&gt;el standard. &lt;/strong&gt;Esto en teor&amp;iacute;a facilita sobre manera la migraci&amp;oacute;n de las aplicaciones entre un servidor de aplicaciones y otro.&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://www.arquitecturajava.com/wp-content/uploads/servidores.png"&gt;&lt;img src="http://www.arquitecturajava.com/wp-content/uploads/servidores.png" alt="servidores" width="491" height="534" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;h2&gt;EJBs y Standards&lt;/h2&gt; 
&lt;p&gt;Si bien lo anteriormente expuesto es cierto,&lt;strong&gt; la realidad es que &amp;nbsp;es un “cierto” relativo&lt;/strong&gt; ya que muchas veces los servidores de aplicaciones nos aportan funcionalidades aparte que les diferencian de la competencia. Temas como Caches, Persistencias Avanzadas, Cluster etc etc. Caracter&amp;iacute;sticas que vamos a querer usar en muchas ocasiones y que pueden convertir a nuestra aplicaci&amp;oacute;n en una aplicaci&amp;oacute;n &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/07/spring-framework-y-aislamiento"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-07-28T11:08:47Z</dc:date>
  </entry>
  <entry>
    <title>Arquitecturas MVC y REST</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/07/arquitecturas-mvc-y-rest" />
    <category term="spring" />
    <category term="jee" />
    <category term="spring-mvc" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-07-23T13:45:20Z</updated>
    <published>2014-07-23T13:45:20Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Video en el que se hace una comparativa entre los distintos modelos de Arquitecturas MVC y los servicios REST&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;&lt;iframe width="500" height="281" src="https://www.youtube.com/embed/qyt2Ct0hWqU?feature=oembed" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;&lt;/p&gt; 
&lt;p&gt;La entrada &lt;a href="http://www.arquitecturajava.com/arquitecturas-mvc-y-rest/"&gt;Arquitecturas MVC y REST&lt;/a&gt; aparece primero en &lt;a href="http://www.arquitecturajava.com"&gt;Arquitectura Java&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/07/arquitecturas-mvc-y-rest"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-07-23T13:45:20Z</dc:date>
  </entry>
  <entry>
    <title>Spring Expression Language</title>
    <link rel="alternate" href="http://www.blogstack.info/post/arquitecturajava/2014/05/spring-expression-language" />
    <category term="spring" />
    <category term="spel" />
    <author>
      <name>Cecilio Álvarez Caules</name>
    </author>
    <updated>2014-05-02T14:44:07Z</updated>
    <published>2014-05-02T14:44:07Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Hoy he sacado un hueco para hablar&amp;nbsp;Spring Expression Language&amp;nbsp;algo&amp;nbsp;un contacto de linkedin (Ferm&amp;iacute;n Mart&amp;iacute;n) me sugiri&amp;oacute;. &lt;strong&gt;&amp;iquest;Para que sirve Spring Expression Language?&lt;/strong&gt; .Bueno se trata de un lenguaje de expresiones que permite trabajar de una forma mas flexible&amp;nbsp;con el framework Spring .Vamos a ver un ejemplo sencillo Para ello dise&amp;ntilde;aremos un proyecto de Spring &amp;nbsp;con Maven a continuaci&amp;oacute;n se muestran las dependencias.&lt;/p&gt; 
&lt;pre&gt;
&amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;3.2.8.RELEASE&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
 &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;3.2.8.RELEASE&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
 &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;spring-web&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;3.2.8.RELEASE&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
 &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;spring-context&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;3.2.8.RELEASE&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
 &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;spring-expression&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;3.2.8.RELEASE&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
 &amp;lt;dependency&amp;gt;
 &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
 &amp;lt;artifactId&amp;gt;javax.servlet-api&amp;lt;/artifactId&amp;gt;
 &amp;lt;version&amp;gt;3.0.1&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/arquitecturajava/2014/05/spring-expression-language"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Cecilio Álvarez Caules</dc:creator>
    <dc:date>2014-05-02T14:44:07Z</dc:date>
  </entry>
</feed>

