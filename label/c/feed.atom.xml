<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-05-05T07:02:16Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-05-05T07:02:16Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Interpolación de cadenas en C# 6, a fondo</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/05/interpolacion-de-cadenas-en-c-6-a-fondo" />
    <category term="c-6" />
    <category term="c" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-05-05T06:50:00Z</updated>
    <published>2015-05-05T06:50:00Z</published>
    <content type="html">&lt;p&gt;Ya jugando con Visual Studio 2015 y C# 6, estoy comprobando que la interpolación de cadenas es una de las características más interesantes y prácticas de las novedades que presentará la nueva versión del lenguaje, porque no son pocas las ocasiones en las que creamos expresiones concatenando literales de cadena y variables, o que hacemos uso de String.Format() para construir strings más complejos. Hace unos meses ya adelantamos por aquí sus principales características, aunque aún era algo pronto para poder probar en profundidad esta nueva y esperada feature. Ahora, más avanzado ya su desarrollo, ha llegado el momento de echarle otro vistazo más en profundidad y ver cómo queda finalmente (o casi finalmente, todavía podría cambiar algo!). En este post vamos a ver rápidamente los puntos principales[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/05/interpolacion-de-cadenas-en-c-6-a-fondo"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-05-05T06:50:00Z</dc:date>
  </entry>
  <entry>
    <title>Usando SQLite en nuestros programas en C/C++ (II): Nueva interfaz v2 y prepared statements</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/04/usando-sqlite-en-nuestros-programas-en-c-c-ii-nueva-interfaz-v2-y-prepared-statements" />
    <category term="argumentos" />
    <category term="control" />
    <category term="interfaz" />
    <category term="sqlite" />
    <category term="personalizacion" />
    <category term="errores" />
    <category term="datos" />
    <category term="sql" />
    <category term="funciones" />
    <category term="vincular" />
    <category term="informacion" />
    <category term="base" />
    <category term="c-c" />
    <category term="nueva" />
    <category term="statements" />
    <category term="avanzada" />
    <category term="prepared" />
    <category term="iterar" />
    <category term="c" />
    <category term="programas" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-04-27T08:37:00Z</updated>
    <published>2015-04-27T08:37:00Z</published>
    <content type="html">&lt;p&gt;Hace unos días empezamos a programar utilizando SQLite para gestionar nuestra información usando SQL de toda la vida. Bien, SQLite tiene la interfaz clásica, que vimos en el post anterior: sqlite3_open(), sqlite3_close(), sqlite3_exec()… con utilidades básicas para trabajar. Por un lado, podemos tener más control sobre la base de datos, por ejemplo, podemos definir cómo abirmos la base de datos, tenemos códigos de error extendidos, ventajas con respecto al tratamiento interno de la memoria y algunas cosas más. La utilización es muy parecida. Prepared statements con SQLite Por otro lado, el enfoque con callbacks está muy bien, pero en ocasiones necesitamos el resultado de un sqlite3_exec() inmediatamente, justo debajo de esa línea, sin que tengamos que pasar contextos a una función y cambiar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/04/usando-sqlite-en-nuestros-programas-en-c-c-ii-nueva-interfaz-v2-y-prepared-statements"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-04-27T08:37:00Z</dc:date>
  </entry>
  <entry>
    <title>Usando SQLite en nuestros programas en C/C++ (I)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/usando-sqlite-en-nuestros-programas-en-c-c-i" />
    <category term="biblioteca" />
    <category term="sqlite" />
    <category term="mysql" />
    <category term="datos" />
    <category term="libreria" />
    <category term="motor" />
    <category term="lectura" />
    <category term="postgresql" />
    <category term="informacion" />
    <category term="base" />
    <category term="gestion" />
    <category term="usuario" />
    <category term="diminuta" />
    <category term="introduccion" />
    <category term="multithread" />
    <category term="c" />
    <category term="general" />
    <category term="programa" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-23T09:49:31Z</updated>
    <published>2015-03-23T09:49:31Z</published>
    <content type="html">&lt;p&gt;Foto: Eirik Stavelin (Flickr CC-by) A menudo, nuestros programas necesitan almacenar información (temporal o no) de forma ordenada, rápida y que no nos complique la vida. Luego también necesitamos poder acceder a ella con la misma facilidad. Para eso vale SQLite. Tendremos un pequeño motor de base de datos que con sólo un par de archivos (.h y .c) más un archivo de datos lo tendremos todo listo. Una pequeña introducción SQLite nos proporciona una forma muy sencilla de introducir y eliminar información (si estamos familiarizados con el lenguaje SQL) sin las complicaciones de tener un motor de base de datos corriendo (MySQL, MariaDB, PostreSQL, MSSQL…). Por un lado, al no realizar conexiones, todo debería ir mucho más rápido, en bases de datos relativamente pequeñas se nota. Además, no podremos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/usando-sqlite-en-nuestros-programas-en-c-c-i"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-23T09:49:31Z</dc:date>
  </entry>
  <entry>
    <title>Machine Learning con Princesas Disney</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/03/machine-learning-con-princesas-disney" />
    <category term="numl" />
    <category term="development" />
    <category term="c" />
    <category term="machine-learning" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-03-23T05:06:14Z</updated>
    <published>2015-03-23T05:06:14Z</published>
    <content type="html">&lt;p&gt;A menos que hayas estado viviendo en una cueva desconectado del mundo durante los últimos años, seguro que estás al tanto de uno de los fenómenos que ha resurgido con fuerza: las Princesas Disney. Aunque algunas llevan desde los años cuarenta del siglo pasado entre nosotros y el concepto de unir a todas las protagonistas femeninas de películas Disney data de los 90, desde finales de los 2000 han recuperado su tirón en determinados sectores de la población. Al igual que las Princesas Disney, en los últimos tiempos el machine learning (aprendizaje automático) ha vuelto a ser una disciplina en auge. No se trata de algo nuevo, las ideas en las que se basa y muchos de los algoritmos que utiliza son de hace varias décadas, pero la potencia de cálculo disponible actualmente (bendita nube) y el volumen[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/03/machine-learning-con-princesas-disney"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-03-23T05:06:14Z</dc:date>
  </entry>
  <entry>
    <title>Interfaces marcadoras, atributos y convenciones</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/03/interfaces-marcadoras-atributos-y-convenciones" />
    <category term="development" />
    <category term="c" />
    <category term="design-patterns" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-03-09T05:06:17Z</updated>
    <published>2015-03-09T05:06:17Z</published>
    <content type="html">&lt;p&gt;Hay ocasiones en que necesitamos añadir algún tipo de metainformación a nuestro código. Se trata de información sobre el código, no tanto sobre lo que hace sino sobre el propio artefacto (clase, método o propiedad), que es necesaria para poder realizar determinadas tareas. Podemos encontrar ejemplos típicos de esto en aplicaciones MVC, donde de alguna forma necesitamos poder identificar qué clases son controladores, en librerías de serialización para indicar qué propiedades queremos serializar (y cómo), en ORMs para detectar entidades, etc. Siempre se puede añadir esta metainformación de forma externa, por ejemplo podemos almacenarla en otra clase diferente como si fuese un registro en el que guardamos cada clase con su metainformación, pero lo muchas veces es interesante mantener esa información[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/03/interfaces-marcadoras-atributos-y-convenciones"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-03-09T05:06:17Z</dc:date>
  </entry>
  <entry>
    <title>En ocasiones, veo lenguajes de programación por la calle [ Frikada rápida ]</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/02/en-ocasiones-veo-lenguajes-de-programacion-por-la-calle-frikada-rapida" />
    <category term="programacion" />
    <category term="lenguaje" />
    <category term="caminando" />
    <category term="cpp" />
    <category term="escaparate" />
    <category term="obsesion" />
    <category term="c" />
    <category term="calle" />
    <category term="humor-tonterias" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-02-27T09:56:35Z</updated>
    <published>2015-02-27T09:56:35Z</published>
    <content type="html">&lt;p&gt;Un día, paseando por Linares, me asomo a este escaparate y… veo tres llaveros cuidadosamente colocados formando las iniciales de uno de mis lenguajes de programación favoritos. Vale, es CPP y no C++, pero también se dice C plus plus y una de las extensiones típicas para esos archivos es cpp. Luego hay una B por ahí, que es otro lenguaje de programación… pero, ¿quién programa en B hoy en día? ¿Estoy obsesionado? La entrada En ocasiones, veo lenguajes de programación por la calle [ Frikada rápida ] aparece primero en Poesía Binaria.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/02/en-ocasiones-veo-lenguajes-de-programacion-por-la-calle-frikada-rapida"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-02-27T09:56:35Z</dc:date>
  </entry>
  <entry>
    <title>NHibernate Avanzado: Proyecciones anidadas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/02/nhibernate-avanzado-proyecciones-anidadas" />
    <category term="nhibernate" />
    <category term="orm" />
    <category term="development" />
    <category term="c" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-02-09T05:06:33Z</updated>
    <published>2015-02-09T05:06:33Z</published>
    <content type="html">&lt;p&gt;Una de los argumentos más repetidos en contra de los ORMs es su falta de eficiencia, especialmente a la hora de hacer lecturas de grandes volúmenes de datos. En realidad, esto suele estar provocado por un mal uso del ORM e intentar cargar muchas entidades en memoria para mostrar sólo un par de datos de cada entidad, pero hay una manera fácil de solucionar esto: usar proyecciones para cargar sólo los datos que necesitamos. Todos los ORMs que conozco tienen algún sistema para construir este tipo de proyecciones, pero cuando los datos no son completamente “planos”, la cosa se complica un poco. Con NHibernate podemos generar proyecciones anidadas, es decir, en las que un objeto tiene asociada una colección de valores de una manera relativamente sencilla usando IResultTransformer. Como esto no es[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/02/nhibernate-avanzado-proyecciones-anidadas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-02-09T05:06:33Z</dc:date>
  </entry>
</feed>

