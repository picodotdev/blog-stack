<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-11-09T11:02:30Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-11-09T11:02:30Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Callbacks en C++11, llamando a métodos con un objeto asociado (II)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/11/callbacks-en-c-11-llamando-a-metodos-con-un-objeto-asociado-ii" />
    <category term="argumentos" />
    <category term="orden" />
    <category term="mem-fn" />
    <category term="metodos" />
    <category term="logger" />
    <category term="tiempo" />
    <category term="tipos" />
    <category term="bind" />
    <category term="variable" />
    <category term="objeto" />
    <category term="memoria" />
    <category term="callbacks" />
    <category term="c-11" />
    <category term="general" />
    <category term="ignorar" />
    <category term="funcion" />
    <category term="momento" />
    <category term="datos" />
    <category term="servidor" />
    <category term="vincular" />
    <category term="placeholder" />
    <category term="c-c" />
    <category term="fecha" />
    <category term="conectar" />
    <category term="asociado" />
    <category term="c" />
    <category term="hora" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-11-09T09:58:16Z</updated>
    <published>2015-11-09T09:58:16Z</published>
    <content type="html">&lt;p&gt;Hace dos semanas hablábamos de Callbacks en C++11 nuevas posibilidades para un software más potente . Empezamos con una pequeña introducción para “almacenar” una función en una variable o un argumento de función y llamarla desde ahí, incluso introdujimos las funciones anónimas o lambdas. Ahora, como no podía ser de otra forma, y dado que estamos en un lenguaje orientado a objetos, en el que queremos aprovechar todo su potencial. Vamos a hacer varios ejemplos en los que llamaremos a métodos de una clase de varias formas diferentes. Llamando a un método de una clase cambiando el objeto Vamos a empezar fuerte, aunque el ejemplo sea muy largo para lo que es, el objetivo es que nuestra función apunta a un método de una clase pero, a la hora de llamarlo, elegimos sobre qué objeto aplicar esa llamada.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/11/callbacks-en-c-11-llamando-a-metodos-con-un-objeto-asociado-ii"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-11-09T09:58:16Z</dc:date>
  </entry>
  <entry>
    <title>Callbacks en C++11 nuevas posibilidades para un software más potente (I)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/10/callbacks-en-c-11-nuevas-posibilidades-para-un-software-mas-potente-i" />
    <category term="metodo" />
    <category term="asignacion" />
    <category term="flexibilidad" />
    <category term="abstraccion" />
    <category term="ordenacion" />
    <category term="retrollamadas" />
    <category term="algorithm" />
    <category term="funciones" />
    <category term="cosas-que-damos-por-hechas" />
    <category term="tipo" />
    <category term="variable" />
    <category term="functional" />
    <category term="c-c" />
    <category term="function" />
    <category term="c-11" />
    <category term="c" />
    <category term="callbacks" />
    <category term="anonimas" />
    <category term="general" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-10-26T09:56:33Z</updated>
    <published>2015-10-26T09:56:33Z</published>
    <content type="html">&lt;p&gt;My beautiful picture Hace tiempo, hice una serie de posts sobre callbacks: Callbacks, retrollamadas o delegados o cómo crear código más flexible en C C++ Punteros a función miembro (pointer-to-member function) o callbacks con clase Callbacks en C++ con boost Hay algunos posts más, pero se salen del tema (y seguro que salen sugeridos más abajo). El caso es que dejé un poco el tema de lado y me gustaría retomarlo con los cambios de la especificación C++11 (vale, tenemos C++14 lista, pero la versión de 2011 es una de las que más cambios introdujeron (y que también valen para C++14). Aunque se ha escrito mucho sobre el tema, pero desde aquí quiero dar a conocer mi humilde visión. Serán una serie de posts ya que es un tema muy amplio y me gusta poner gran cantidad de ejemplos. Una variable que contiene[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/10/callbacks-en-c-11-nuevas-posibilidades-para-un-software-mas-potente-i"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-10-26T09:56:33Z</dc:date>
  </entry>
  <entry>
    <title>Programación asíncrona 3: Trabajos (BackgroundWorker)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/destinodotnet/2015/09/programacion-asincrona-3-trabajos-backgroundworker" />
    <category term="tutoriales" />
    <category term="trabajos" />
    <category term="net" />
    <category term="c" />
    <category term="hilos" />
    <category term="net-framework" />
    <author>
      <name>Joel Martinez</name>
    </author>
    <updated>2015-09-23T14:22:27Z</updated>
    <published>2015-09-23T14:22:27Z</published>
    <content type="html">&lt;p&gt;Facebook0 Twitter0 Google+0 Linkedin0 E-Mail0 Siguiendo con los artículos de programación asíncrona, es turno de hablar de una clase bastante conocida: BackgroundWorker, perteneciente al espacio de nombres System.ComponentModel. Esta clase apareció en la versión 2.0 del .NET Framework. Repasemos entonces la implementación de programación asíncrona con trabajos. Puedes seguir los otros artículos de la serie con los siguientes enlaces: Programación asíncrona 1: Delegados asíncronos Programación asíncrona 2: Hilos (Thread) Conceptos iniciales Esta clase es muy práctica, ya que permite ejecutar una tarea en segundo plano, pudiendo a la vez monitorearla y/o cancelarla en cualquier momento. Además, podemos ejecutar un código específico cuando termine el trabajo. Esta clase encapsula el manejo de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/destinodotnet/2015/09/programacion-asincrona-3-trabajos-backgroundworker"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Joel Martinez</dc:creator>
    <dc:date>2015-09-23T14:22:27Z</dc:date>
  </entry>
  <entry>
    <title>Novedades de C# 6: Interpolated String</title>
    <link rel="alternate" href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/novedades-de-c-6-interpolated-string" />
    <category term="c-6" />
    <category term="c" />
    <author>
      <name>leonardo</name>
    </author>
    <updated>2015-09-03T23:11:00Z</updated>
    <published>2015-09-03T23:11:00Z</published>
    <content type="html">&lt;p&gt;Vamos con otra de las novedades de C# 6, en este caso aquellos que hayan usado Ruby lo conocen bien, básicamente es la posibilidad de declarar un string y que el compilador detecte (por contexto) las variables y sus propiedades para reemplazar dentro del string, por ejemplo. Cómo se hacía antes? Antes hacíamos esto: var leonardo = new Usuario { Apellido = "Micheloni", Nombre = "Leonardo", ID = 123 };

Console.WriteLine("Hola mi nombre es {0}, {1}, y mi ID es {2}", leonardo.Nombre, leonardo.Apellido, leonardo.ID); Básicamente queremos mostrar el contenido de la variable “leonardo” y usarmos el clásico string.format, bien, eso tiene varios problemas: Es engorroso Es propenso a errroes No es claro Etc. Con String Interpolation podemos hacer esto: var leonardo = new Usuario { Apellido = "Micheloni",[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/novedades-de-c-6-interpolated-string"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>leonardo</dc:creator>
    <dc:date>2015-09-03T23:11:00Z</dc:date>
  </entry>
  <entry>
    <title>Novedades de C#6: inicializar propiedaes</title>
    <link rel="alternate" href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/08/novedades-de-c-6-inicializar-propiedaes" />
    <category term="c-6" />
    <category term="c" />
    <author>
      <name>leonardo</name>
    </author>
    <updated>2015-08-29T03:22:00Z</updated>
    <published>2015-08-29T03:22:00Z</published>
    <content type="html">&lt;p&gt;Esta versión de C# tiene muchas nuevas características muy interesantes, acá va la primera. Ejemplo Ahora podemos asignar un valor a una propiedad sin necesidad de declarar el backing field, o sea, en lugar de hacer esto: private string name = "pedro";
public string Name
{
    get
    {
        return name;
    }
    set
    {
        name = value;
    }
} Ahora podemos hacer esto public string Name { get; set; } = "pedro"; Nos leemos.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/08/novedades-de-c-6-inicializar-propiedaes"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>leonardo</dc:creator>
    <dc:date>2015-08-29T03:22:00Z</dc:date>
  </entry>
  <entry>
    <title>¿Cómo se llama el operador “--&gt;”?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/07/como-se-llama-el-operador" />
    <category term="programacion" />
    <category term="c" />
    <category term="curiosidades" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-07-14T07:05:00Z</updated>
    <published>2015-07-14T07:05:00Z</published>
    <content type="html">&lt;p&gt;Desde luego, Stackoverflow, además de salvarnos la vida en numerosas ocasiones, es una fuente infinita de curiosidades, y hoy vamos a ver una que me ha llamado la atención últimamente, aunque sea un tema que lleva circulando por la red muchos años. El asunto era que un usuario que quería saber cuál era el nombre del operador “--&gt;” existente en muchísimos lenguajes, como podéis comprobar en un código perfectamente válido y compilable en C# como el siguiente: static void Main(string[] args) {     int x = 10;     while (x --&gt; 0) // while x goes to 0     {         Console.Write(x);     }     // Shows: 9876543210 } ¿Y cómo se llama ese operador? No puedo negar que al principio me quedé un poco descolocado, como probablemente os haya ocurrido a algún despistado más, pero al leer las respuestas el[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/07/como-se-llama-el-operador"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-07-14T07:05:00Z</dc:date>
  </entry>
  <entry>
    <title>Interfaces y delegados</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/07/interfaces-y-delegados" />
    <category term="development" />
    <category term="c" />
    <category term="design-patterns" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-07-13T05:06:39Z</updated>
    <published>2015-07-13T05:06:39Z</published>
    <content type="html">&lt;p&gt;Hablaba esta semana en twitter con Nicolás Herrera y Ernesto Cárdenas sobre este artículo de la MSDN acerca del uso de delegados o interfaces. En su favor hay que decir que el artículo tiene pinta de tener unos cuantos años (yo diría que alrededor de 10), pero independientemente de eso, la argumentación que da sobre cuándo usar interfaces y cuando usar delegados es muy discutible. Por poner sólo un par de ejemplos: Según el artículo, es mejor usar un interface cuando la clase que utiliza el interfaz quiera hacer un cast de ese interfaz a otro interfaz u otra clase. Eso se llama violar el principio de sustitución de Liskov y anula la primera utilidad de un interfaz, que es alislar al consumidor del interfaz de la implementación concreta que está utilizando. También sugiere utilizar IComparable[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/07/interfaces-y-delegados"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-07-13T05:06:39Z</dc:date>
  </entry>
</feed>

