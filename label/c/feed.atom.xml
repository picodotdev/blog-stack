<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2016-02-22T12:02:10Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2016-02-22T12:02:10Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Cómo buscar un archivo en diferentes rutas en C++</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2016/02/como-buscar-un-archivo-en-diferentes-rutas-en-c" />
    <category term="reemplazar" />
    <category term="windows" />
    <category term="biblioteca" />
    <category term="buscar" />
    <category term="tema" />
    <category term="lista" />
    <category term="casos-practicos" />
    <category term="cadenas" />
    <category term="rutas" />
    <category term="mapa" />
    <category term="c-c" />
    <category term="linux" />
    <category term="archivo" />
    <category term="usuario" />
    <category term="posibilidad" />
    <category term="c-11" />
    <category term="c" />
    <category term="configuracion" />
    <category term="home" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-02-22T09:49:19Z</updated>
    <published>2016-02-22T09:49:19Z</published>
    <content type="html">&lt;p&gt;Es algo muy común, hemos creado un software que necesita ciertos archivos para ejecutarse. El ejemplo más común es el archivo de configuración. Tenemos que cargar la configuración de nuestro programa, pero antes, tenemos que saber dónde está, y hay varias alternativas. Pero podemos utilizar el mismo programa para buscar plantillas, páginas web, archivos de datos, en fin, lo que queramos. Nota: Estos programas están hechos para Linux, aunque si queremos usarlos en Windows, bastará con cambiar la barra / por \ o tal vez queramos hacer una opción multiplataforma, pero no deberíamos tener que cambiar muchas cosas. Vamos a implementar la búsqueda de dos maneras: Una búsqueda sencilla, en la que especificamos el archivo y las rutas donde queremos buscar y listo Una búsqueda avanzada en la que especificamos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2016/02/como-buscar-un-archivo-en-diferentes-rutas-en-c"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-02-22T09:49:19Z</dc:date>
  </entry>
  <entry>
    <title>Cómo crear ventanas semitransparentes en Gtk+-3.0 con GtkMM</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2016/02/como-crear-ventanas-semitransparentes-en-gtk-3-con-gtkmm" />
    <category term="alfa" />
    <category term="gui" />
    <category term="mover" />
    <category term="transparencia" />
    <category term="ventanas" />
    <category term="gtk" />
    <category term="entorno" />
    <category term="grafico" />
    <category term="tinte" />
    <category term="transparente" />
    <category term="alpha" />
    <category term="componentes" />
    <category term="ventana" />
    <category term="gtkmm" />
    <category term="verde" />
    <category term="color" />
    <category term="c-c" />
    <category term="imagen" />
    <category term="azul" />
    <category term="linux" />
    <category term="ejemplo" />
    <category term="redibujado" />
    <category term="rojo" />
    <category term="canal" />
    <category term="c" />
    <category term="raton" />
    <category term="fondo" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-02-17T09:53:09Z</updated>
    <published>2016-02-17T09:53:09Z</published>
    <content type="html">&lt;p&gt;Es algo que está muy chulo, y puede hacer que la experiencia de usuario de nuestras aplicaciones sea mucho mejor, además de dar un punto friki si queremos intercalar información de fondo, o queremos hacer una animación, una ventana splash chula mientras arranca nuestro programa, etc. Lo que tenemos que hacer es que nuestra ventana se pinte en un contexto RGBA (rojo, verde, azul, alpha), donde alpha es nuestro valor de opacidad. Tenemos que tener en cuenta que GTK+ manejará los valores de las componentes de color de la ventana (las mencionadas rojo, verde, azul, alpha, con valores entre 0 y 1, por lo que serán valores double). Una vez establecido esto, tenemos que controlar cada redibujado de la ventana. Normalmente se gestiona el redibujado automáticamente para dibujar una ventana normal, pero[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2016/02/como-crear-ventanas-semitransparentes-en-gtk-3-con-gtkmm"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-02-17T09:53:09Z</dc:date>
  </entry>
  <entry>
    <title>Conocer el tipo MIME de un archivo gracias a GIO en lenguaje C</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2016/02/conocer-el-tipo-mime-de-un-archivo-gracias-a-gio-en-lenguaje-c" />
    <category term="plataforma" />
    <category term="pkg-config" />
    <category term="gio" />
    <category term="capa" />
    <category term="analisis" />
    <category term="sistema" />
    <category term="gcc" />
    <category term="informacion" />
    <category term="fichero" />
    <category term="extension" />
    <category term="gtk" />
    <category term="archivos" />
    <category term="descripcion" />
    <category term="general" />
    <category term="compilar" />
    <category term="mac" />
    <category term="mime" />
    <category term="windows" />
    <category term="biblioteca" />
    <category term="libreria" />
    <category term="remotos" />
    <category term="tipo" />
    <category term="web" />
    <category term="c-c" />
    <category term="glib" />
    <category term="linux" />
    <category term="c" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-02-12T09:41:08Z</updated>
    <published>2016-02-12T09:41:08Z</published>
    <content type="html">&lt;p&gt;La biblioteca GIO nos proporciona una capa más sobre el manejo de archivos. Nos aíslan un poco de las llamadas al sistema operativo para hacer muchas operaciones sobre archivos facilitando el uso de la biblioteca en aplicaciones multiplataforma. Así como dándonos algunas funciones interesantes que ya vienen hechas. La gran ventaja de GIO frente al acceso normal a un archivo es que hace transparente al programador el acceso a sistemas de archivos compartidos (en Windows, Mac o Linux) sin tener que gastar mucho tiempo en todo eso. Saber el tipo MIME de un archivo Si tu aplicación trabaja con archivos, en muchas ocasiones es necesario conocer el tipo MIME, sobre todo cuando vamos a transferir datos a través de la red. Nos ayudan a conocer el tipo de contenido de un archivo (saber si es una imagen,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2016/02/conocer-el-tipo-mime-de-un-archivo-gracias-a-gio-en-lenguaje-c"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-02-12T09:41:08Z</dc:date>
  </entry>
  <entry>
    <title>Cómo listar archivos de forma recursiva en C, y un mundo de posibilidades en nuestros programas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2016/02/como-listar-archivos-de-forma-recursiva-en-c-y-un-mundo-de-posibilidades-en-nuestros-programas" />
    <category term="comandos" />
    <category term="dirent" />
    <category term="directorio" />
    <category term="sistema" />
    <category term="archvios" />
    <category term="contar" />
    <category term="stat" />
    <category term="while" />
    <category term="busqueda" />
    <category term="readdir" />
    <category term="recursivo" />
    <category term="completo" />
    <category term="humano" />
    <category term="enlace" />
    <category term="du" />
    <category term="algoritmos" />
    <category term="tipo" />
    <category term="entrar" />
    <category term="explorar" />
    <category term="panic" />
    <category term="c-c" />
    <category term="opendir" />
    <category term="tamano" />
    <category term="linux" />
    <category term="operativo" />
    <category term="ejemplo" />
    <category term="algoritmo" />
    <category term="c" />
    <category term="find" />
    <category term="bloque" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-02-08T09:59:05Z</updated>
    <published>2016-02-08T09:59:05Z</published>
    <content type="html">&lt;p&gt;Puede que seas un hacha con el comando find o incluso con locate; pero hay veces que nuestro software tiene que ser capaz de realizar la búsqueda de un archivo en el árbol de directorios, puede que queramos hacer inclusiones, exclusiones, o analizar las características del archivo. Podemos tener varias misiones, por ejemplo calcular el tamaño que ocupan todos los archivos a partir de una ruta dada (como hace du -s), copiarlos a otra ruta como haría un gestor de archivos o, incluso buscar archivos repetidos. Lo que todos estos programas tienen en común es que exploran los archivos contenidos dentro de un directorio de manera recursiva, y esto es que si encontramos un directorio entramos en él y repetimos la operación. Llegará un punto en el que no encontraremos más directorios, sólo archivos.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2016/02/como-listar-archivos-de-forma-recursiva-en-c-y-un-mundo-de-posibilidades-en-nuestros-programas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-02-08T09:59:05Z</dc:date>
  </entry>
  <entry>
    <title>Creando un cliente para un servicio de red con pocas líneas en C++</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2016/02/creando-un-cliente-para-un-servicio-de-red-con-pocas-lineas-en-c" />
    <category term="abstraccion" />
    <category term="cliente" />
    <category term="sockets" />
    <category term="conexion" />
    <category term="herramientas" />
    <category term="c-11" />
    <category term="guante" />
    <category term="general" />
    <category term="glove" />
    <category term="manejo" />
    <category term="envoltura" />
    <category term="manipulador" />
    <category term="operador" />
    <category term="remoto" />
    <category term="espera" />
    <category term="servicios" />
    <category term="biblioteca" />
    <category term="internet" />
    <category term="datos" />
    <category term="sock" />
    <category term="puertos" />
    <category term="c-c" />
    <category term="github" />
    <category term="teclas" />
    <category term="calcetin" />
    <category term="bidireccional" />
    <category term="cin" />
    <category term="c" />
    <category term="comunicacion" />
    <category term="cout" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-02-05T09:16:33Z</updated>
    <published>2016-02-05T09:16:33Z</published>
    <content type="html">&lt;p&gt;En la era actual, es muy importante que múltiples aplicaciones accedan a servicios online para obtener la información que desean (o incluso enviarla). Es decir, las aplicaciones han perdido su simplicidad de ejecutarse en una sola máquina, y han pasado a ejecutarse en múltiples máquinas conectadas a través de Internet. Y, aunque muchos piensan que C++ no es un lenguaje muy indicado para ello, y que no se pueden hacer estas cosas. Yo creo que C++ está en buena forma, tienes que cocinar un poco más las cosas (o si no te las cocinas, utilizar bibliotecas de otras personas que lo hayan hecho antes). Desde hace meses mantengo un proyecto en Github, llamado Glove (para compilar el ejemplo necesitaremos la biblioteca) cuyo objetivo es hacer facilitar un poco el acceso y creación de servicios de red[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2016/02/creando-un-cliente-para-un-servicio-de-red-con-pocas-lineas-en-c"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-02-05T09:16:33Z</dc:date>
  </entry>
  <entry>
    <title>Curiosidades de C#: tipado estructural… sólo para algunos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2016/01/curiosidades-de-c-tipado-estructural-solo-para-algunos" />
    <category term="development" />
    <category term="c" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2016-01-11T05:06:26Z</updated>
    <published>2016-01-11T05:06:26Z</published>
    <content type="html">&lt;p&gt;Ya vimos hace tiempo la posibilidad de simular duck typing en C#, pero lo que seguro que alguno no sabe es que C# tiene algo más potente que el duck typing: el tipado estructural. El tipado estructural lo mencionamos al hablar de los sistemas de tipos de otros lenguajes y es similar al duck typing en cuanto a que no hace falta declarar a priori que estamos implementando un interfaz concreto, pero además se verifica en tiempo de compilación. Es decir, si un método necesita recibir un objeto que tenga un método void Add(int a, int b), y le pasamos un objeto que tiene ese método, aunque no hayamos indicado explícitamente que implementa un interface IAdder con ese método, nuestro código funcionará. ¿Suena bien? La verdad es que es una características muy interesante que podéis encontrar en lenguajes[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2016/01/curiosidades-de-c-tipado-estructural-solo-para-algunos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2016-01-11T05:06:26Z</dc:date>
  </entry>
  <entry>
    <title>Un buen 2015 para el blog. Los posts que han marcado el año y consultas SQL</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/12/un-buen-2-15-para-el-blog-los-posts-que-han-marcado-el-ano-y-consultas-sql" />
    <category term="resumen" />
    <category term="publicar" />
    <category term="intereses" />
    <category term="facebook" />
    <category term="twitter" />
    <category term="php" />
    <category term="redes" />
    <category term="sentencias" />
    <category term="mysql" />
    <category term="sql" />
    <category term="blog" />
    <category term="creado" />
    <category term="visitado" />
    <category term="linkedin" />
    <category term="posts" />
    <category term="ano" />
    <category term="enlaces" />
    <category term="c" />
    <category term="general" />
    <category term="estadisticas" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-12-24T09:08:28Z</updated>
    <published>2015-12-24T09:08:28Z</published>
    <content type="html">&lt;p&gt;Como ya es costumbre los últimos años, preparo un breve resumen de lo más destacado del año para el blog. Aunque este año pretendo hacer algo un tanto diferente. Vamos a meter un poco de SQL Un año programando y compartiendo Este blog empezó siendo una auto-chuleta para dar clases particulares de programación, y así poder ayudar a mis alumnos planteando problemas y soluciones, así como una pequeña documentación de ciertas cosas que he encontrado interesantes. Sin casi presencia en muchos sitios. Aunque este año, me he querido poner las pilas un poco en dar a conocer el blog. Aunque sé que no tendré un récord mundial de visitas, pero me gusta ayudar a quienes se han encontrado con problemas similares a los míos. Redes sociales Prácticamente hablemos de Facebook. El 1 de Enero de 2015 tenía 255[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/12/un-buen-2-15-para-el-blog-los-posts-que-han-marcado-el-ano-y-consultas-sql"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-12-24T09:08:28Z</dc:date>
  </entry>
</feed>

