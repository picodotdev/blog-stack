<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-09-03T23:02:18Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-09-03T23:02:18Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Novedades de C# 6: Interpolated String</title>
    <link rel="alternate" href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/novedades-de-c-6-interpolated-string" />
    <category term="c-6" />
    <category term="c" />
    <author>
      <name>leonardo</name>
    </author>
    <updated>2015-09-03T23:11:00Z</updated>
    <published>2015-09-03T23:11:00Z</published>
    <content type="html">&lt;p&gt;Vamos con otra de las novedades de C# 6, en este caso aquellos que hayan usado Ruby lo conocen bien, básicamente es la posibilidad de declarar un string y que el compilador detecte (por contexto) las variables y sus propiedades para reemplazar dentro del string, por ejemplo. Cómo se hacía antes? Antes hacíamos esto: var leonardo = new Usuario { Apellido = "Micheloni", Nombre = "Leonardo", ID = 123 };

Console.WriteLine("Hola mi nombre es {0}, {1}, y mi ID es {2}", leonardo.Nombre, leonardo.Apellido, leonardo.ID); Básicamente queremos mostrar el contenido de la variable “leonardo” y usarmos el clásico string.format, bien, eso tiene varios problemas: Es engorroso Es propenso a errroes No es claro Etc. Con String Interpolation podemos hacer esto: var leonardo = new Usuario { Apellido = "Micheloni",[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/09/novedades-de-c-6-interpolated-string"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>leonardo</dc:creator>
    <dc:date>2015-09-03T23:11:00Z</dc:date>
  </entry>
  <entry>
    <title>Novedades de C#6: inicializar propiedaes</title>
    <link rel="alternate" href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/08/novedades-de-c-6-inicializar-propiedaes" />
    <category term="c-6" />
    <category term="c" />
    <author>
      <name>leonardo</name>
    </author>
    <updated>2015-08-29T03:22:00Z</updated>
    <published>2015-08-29T03:22:00Z</published>
    <content type="html">&lt;p&gt;Esta versión de C# tiene muchas nuevas características muy interesantes, acá va la primera. Ejemplo Ahora podemos asignar un valor a una propiedad sin necesidad de declarar el backing field, o sea, en lugar de hacer esto: private string name = "pedro";
public string Name
{
    get
    {
        return name;
    }
    set
    {
        name = value;
    }
} Ahora podemos hacer esto public string Name { get; set; } = "pedro"; Nos leemos.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/unasinfoniadecsharp/2015/08/novedades-de-c-6-inicializar-propiedaes"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>leonardo</dc:creator>
    <dc:date>2015-08-29T03:22:00Z</dc:date>
  </entry>
  <entry>
    <title>¿Cómo se llama el operador “--&gt;”?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/07/como-se-llama-el-operador" />
    <category term="programacion" />
    <category term="c" />
    <category term="curiosidades" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-07-14T07:05:00Z</updated>
    <published>2015-07-14T07:05:00Z</published>
    <content type="html">&lt;p&gt;Desde luego, Stackoverflow, además de salvarnos la vida en numerosas ocasiones, es una fuente infinita de curiosidades, y hoy vamos a ver una que me ha llamado la atención últimamente, aunque sea un tema que lleva circulando por la red muchos años. El asunto era que un usuario que quería saber cuál era el nombre del operador “--&gt;” existente en muchísimos lenguajes, como podéis comprobar en un código perfectamente válido y compilable en C# como el siguiente: static void Main(string[] args) {     int x = 10;     while (x --&gt; 0) // while x goes to 0     {         Console.Write(x);     }     // Shows: 9876543210 } ¿Y cómo se llama ese operador? No puedo negar que al principio me quedé un poco descolocado, como probablemente os haya ocurrido a algún despistado más, pero al leer las respuestas el[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/07/como-se-llama-el-operador"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-07-14T07:05:00Z</dc:date>
  </entry>
  <entry>
    <title>Interfaces y delegados</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/07/interfaces-y-delegados" />
    <category term="development" />
    <category term="c" />
    <category term="design-patterns" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-07-13T05:06:39Z</updated>
    <published>2015-07-13T05:06:39Z</published>
    <content type="html">&lt;p&gt;Hablaba esta semana en twitter con Nicolás Herrera y Ernesto Cárdenas sobre este artículo de la MSDN acerca del uso de delegados o interfaces. En su favor hay que decir que el artículo tiene pinta de tener unos cuantos años (yo diría que alrededor de 10), pero independientemente de eso, la argumentación que da sobre cuándo usar interfaces y cuando usar delegados es muy discutible. Por poner sólo un par de ejemplos: Según el artículo, es mejor usar un interface cuando la clase que utiliza el interfaz quiera hacer un cast de ese interfaz a otro interfaz u otra clase. Eso se llama violar el principio de sustitución de Liskov y anula la primera utilidad de un interfaz, que es alislar al consumidor del interfaz de la implementación concreta que está utilizando. También sugiere utilizar IComparable[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/07/interfaces-y-delegados"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-07-13T05:06:39Z</dc:date>
  </entry>
  <entry>
    <title>Interpolación de cadenas en C# 6, a fondo</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/05/interpolacion-de-cadenas-en-c-6-a-fondo" />
    <category term="c-6" />
    <category term="c" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-05-05T06:50:00Z</updated>
    <published>2015-05-05T06:50:00Z</published>
    <content type="html">&lt;p&gt;Ya jugando con Visual Studio 2015 y C# 6, estoy comprobando que la interpolación de cadenas es una de las características más interesantes y prácticas de las novedades que presentará la nueva versión del lenguaje, porque no son pocas las ocasiones en las que creamos expresiones concatenando literales de cadena y variables, o que hacemos uso de String.Format() para construir strings más complejos. Hace unos meses ya adelantamos por aquí sus principales características, aunque aún era algo pronto para poder probar en profundidad esta nueva y esperada feature. Ahora, más avanzado ya su desarrollo, ha llegado el momento de echarle otro vistazo más en profundidad y ver cómo queda finalmente (o casi finalmente, todavía podría cambiar algo!). En este post vamos a ver rápidamente los puntos principales[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/05/interpolacion-de-cadenas-en-c-6-a-fondo"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-05-05T06:50:00Z</dc:date>
  </entry>
  <entry>
    <title>Usando SQLite en nuestros programas en C/C++ (II): Nueva interfaz v2 y prepared statements</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/04/usando-sqlite-en-nuestros-programas-en-c-c-ii-nueva-interfaz-v2-y-prepared-statements" />
    <category term="argumentos" />
    <category term="control" />
    <category term="interfaz" />
    <category term="sqlite" />
    <category term="personalizacion" />
    <category term="errores" />
    <category term="datos" />
    <category term="sql" />
    <category term="funciones" />
    <category term="vincular" />
    <category term="informacion" />
    <category term="base" />
    <category term="c-c" />
    <category term="nueva" />
    <category term="statements" />
    <category term="avanzada" />
    <category term="prepared" />
    <category term="iterar" />
    <category term="c" />
    <category term="programas" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-04-27T08:37:00Z</updated>
    <published>2015-04-27T08:37:00Z</published>
    <content type="html">&lt;p&gt;Hace unos días empezamos a programar utilizando SQLite para gestionar nuestra información usando SQL de toda la vida. Bien, SQLite tiene la interfaz clásica, que vimos en el post anterior: sqlite3_open(), sqlite3_close(), sqlite3_exec()… con utilidades básicas para trabajar. Por un lado, podemos tener más control sobre la base de datos, por ejemplo, podemos definir cómo abirmos la base de datos, tenemos códigos de error extendidos, ventajas con respecto al tratamiento interno de la memoria y algunas cosas más. La utilización es muy parecida. Prepared statements con SQLite Por otro lado, el enfoque con callbacks está muy bien, pero en ocasiones necesitamos el resultado de un sqlite3_exec() inmediatamente, justo debajo de esa línea, sin que tengamos que pasar contextos a una función y cambiar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/04/usando-sqlite-en-nuestros-programas-en-c-c-ii-nueva-interfaz-v2-y-prepared-statements"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-04-27T08:37:00Z</dc:date>
  </entry>
  <entry>
    <title>Usando SQLite en nuestros programas en C/C++ (I)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/03/usando-sqlite-en-nuestros-programas-en-c-c-i" />
    <category term="biblioteca" />
    <category term="sqlite" />
    <category term="mysql" />
    <category term="datos" />
    <category term="libreria" />
    <category term="motor" />
    <category term="lectura" />
    <category term="postgresql" />
    <category term="informacion" />
    <category term="base" />
    <category term="gestion" />
    <category term="usuario" />
    <category term="diminuta" />
    <category term="introduccion" />
    <category term="multithread" />
    <category term="c" />
    <category term="general" />
    <category term="programa" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-03-23T09:49:31Z</updated>
    <published>2015-03-23T09:49:31Z</published>
    <content type="html">&lt;p&gt;Foto: Eirik Stavelin (Flickr CC-by) A menudo, nuestros programas necesitan almacenar información (temporal o no) de forma ordenada, rápida y que no nos complique la vida. Luego también necesitamos poder acceder a ella con la misma facilidad. Para eso vale SQLite. Tendremos un pequeño motor de base de datos que con sólo un par de archivos (.h y .c) más un archivo de datos lo tendremos todo listo. Una pequeña introducción SQLite nos proporciona una forma muy sencilla de introducir y eliminar información (si estamos familiarizados con el lenguaje SQL) sin las complicaciones de tener un motor de base de datos corriendo (MySQL, MariaDB, PostreSQL, MSSQL…). Por un lado, al no realizar conexiones, todo debería ir mucho más rápido, en bases de datos relativamente pequeñas se nota. Además, no podremos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/03/usando-sqlite-en-nuestros-programas-en-c-c-i"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-03-23T09:49:31Z</dc:date>
  </entry>
</feed>

