<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2016-01-11T06:02:14Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2016-01-11T06:02:14Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Curiosidades de C#: tipado estructural… sólo para algunos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2016/01/curiosidades-de-c-tipado-estructural-solo-para-algunos" />
    <category term="development" />
    <category term="c" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2016-01-11T05:06:26Z</updated>
    <published>2016-01-11T05:06:26Z</published>
    <content type="html">&lt;p&gt;Ya vimos hace tiempo la posibilidad de simular duck typing en C#, pero lo que seguro que alguno no sabe es que C# tiene algo más potente que el duck typing: el tipado estructural. El tipado estructural lo mencionamos al hablar de los sistemas de tipos de otros lenguajes y es similar al duck typing en cuanto a que no hace falta declarar a priori que estamos implementando un interfaz concreto, pero además se verifica en tiempo de compilación. Es decir, si un método necesita recibir un objeto que tenga un método void Add(int a, int b), y le pasamos un objeto que tiene ese método, aunque no hayamos indicado explícitamente que implementa un interface IAdder con ese método, nuestro código funcionará. ¿Suena bien? La verdad es que es una características muy interesante que podéis encontrar en lenguajes[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2016/01/curiosidades-de-c-tipado-estructural-solo-para-algunos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2016-01-11T05:06:26Z</dc:date>
  </entry>
  <entry>
    <title>Un buen 2015 para el blog. Los posts que han marcado el año y consultas SQL</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/12/un-buen-2-15-para-el-blog-los-posts-que-han-marcado-el-ano-y-consultas-sql" />
    <category term="resumen" />
    <category term="publicar" />
    <category term="intereses" />
    <category term="facebook" />
    <category term="twitter" />
    <category term="php" />
    <category term="redes" />
    <category term="sentencias" />
    <category term="mysql" />
    <category term="sql" />
    <category term="blog" />
    <category term="creado" />
    <category term="visitado" />
    <category term="linkedin" />
    <category term="posts" />
    <category term="ano" />
    <category term="enlaces" />
    <category term="c" />
    <category term="general" />
    <category term="estadisticas" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-12-24T09:08:28Z</updated>
    <published>2015-12-24T09:08:28Z</published>
    <content type="html">&lt;p&gt;Como ya es costumbre los últimos años, preparo un breve resumen de lo más destacado del año para el blog. Aunque este año pretendo hacer algo un tanto diferente. Vamos a meter un poco de SQL Un año programando y compartiendo Este blog empezó siendo una auto-chuleta para dar clases particulares de programación, y así poder ayudar a mis alumnos planteando problemas y soluciones, así como una pequeña documentación de ciertas cosas que he encontrado interesantes. Sin casi presencia en muchos sitios. Aunque este año, me he querido poner las pilas un poco en dar a conocer el blog. Aunque sé que no tendré un récord mundial de visitas, pero me gusta ayudar a quienes se han encontrado con problemas similares a los míos. Redes sociales Prácticamente hablemos de Facebook. El 1 de Enero de 2015 tenía 255[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/12/un-buen-2-15-para-el-blog-los-posts-que-han-marcado-el-ano-y-consultas-sql"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-12-24T09:08:28Z</dc:date>
  </entry>
  <entry>
    <title>Callbacks en C++11, ejemplos con argumentos por referencia y templates (III)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/12/callbacks-en-c-11-ejemplos-con-argumentos-por-referencia-y-templates-iii" />
    <category term="programacion" />
    <category term="referencia" />
    <category term="flexibilidad" />
    <category term="closuer" />
    <category term="llamada" />
    <category term="parametros" />
    <category term="argumento" />
    <category term="callback" />
    <category term="lamda" />
    <category term="valor" />
    <category term="facilidad" />
    <category term="usuario" />
    <category term="c-11" />
    <category term="anonima" />
    <category term="c" />
    <category term="general" />
    <category term="funcion" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-12-21T09:20:58Z</updated>
    <published>2015-12-21T09:20:58Z</published>
    <content type="html">&lt;p&gt;Volvemos a dar guerra con el tema que empezamos hace unas semanas, si no has seguido esta serie de posts te recomiendo echar un ojo a Callbacks en C++11 nuevas posibilidades para un software más potente y Callbacks en C++11, llamando a métodos con un objeto asociado. En ellos pongo muchos ejemplos de cómo asociar funciones o métodos a variables. Argumentos por referencia Es un tema que hemos dejado un poco de lado, pero sólo quiero hacer una pequeña puntualización. Y ya de paso, vemos que bind() no sólo vale para métodos con un objeto, también para funciones normales, lo único que no ponemos el objeto, y la clase sólo la pondremos si es un método estático. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 #include &lt;iostream&gt; #include &lt;string&gt; #include &lt;functional&gt; using namespace std;[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/12/callbacks-en-c-11-ejemplos-con-argumentos-por-referencia-y-templates-iii"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-12-21T09:20:58Z</dc:date>
  </entry>
  <entry>
    <title>Clases, objetos, funciones e Information Hidding</title>
    <link rel="alternate" href="http://www.blogstack.info/post/koalite/2015/11/clases-objetos-funciones-e-information-hidding" />
    <category term="clojure" />
    <category term="javascript" />
    <category term="development" />
    <category term="c" />
    <category term="design-patterns" />
    <author>
      <name>Juan María Hernández</name>
    </author>
    <updated>2015-11-16T05:06:41Z</updated>
    <published>2015-11-16T05:06:41Z</published>
    <content type="html">&lt;p&gt;Hablaba hace unos días en twitter con Pablo Iglesias (el de verdad, no el otro, que ya tuve bastante de políticos al hablar de viejos de 30 años) sobre los mecanismos que existen en C# para controlar la visibilidad de atributos, propiedades y métodos. A mi siempre me ha resultado curioso que en lenguaje más rígido como C# fuese más complicado (o menos idiomático) crear cosas realmente privadas dentro de una clase, y a Pablo no le gustaba mucho que el encapsulado se hiciese a nivel de clase, en lugar de a nivel de objeto. Es un tema entretenido para dedicarle un rato y en este post vamos a ver qué nos ofrece C# (o casi cualquier lenguaje basado en clases, todos son muy similares) para ocultar información y cuál es el enfoque en otros lenguajes. Privacidad con clases Todos conocemos de sobre[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/koalite/2015/11/clases-objetos-funciones-e-information-hidding"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Juan María Hernández</dc:creator>
    <dc:date>2015-11-16T05:06:41Z</dc:date>
  </entry>
  <entry>
    <title>Cómo gestionar los parámetros de un programa en C (parte 2: parámetros largos)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/11/como-gestionar-los-parametros-de-un-programa-en-c-parte-2-parametros-largos" />
    <category term="argumentos" />
    <category term="opciones" />
    <category term="flexibilidad" />
    <category term="opcionales" />
    <category term="parametros" />
    <category term="entrada" />
    <category term="xml" />
    <category term="cortos" />
    <category term="largos" />
    <category term="json" />
    <category term="ejemplo" />
    <category term="usuario" />
    <category term="c" />
    <category term="general" />
    <category term="getopt" />
    <category term="programas" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-11-12T09:47:32Z</updated>
    <published>2015-11-12T09:47:32Z</published>
    <content type="html">&lt;p&gt;Hace unos días publiqué Cómo gestionar los parámetros de nuestros programas con getopt en C como una introducción a la gestión de los argumentos desde nuestros programas en C. De esta forma podremos hacer nuestros programas más flexibles aceptando una entrada del usuario en forma de parámetros y así modificar el comportamiento. Antes de nada: WordPress cuando ve dos guiones seguidos (- y -) lo interpreta como un guión largo. En ocasiones viene bien y no molesta, pero en un post como este sí que perjudica más que beneficia, puedo desactivar el filtro, pero tengo mis dudas de que haya un post en el que lo quiera así. Tendré que estudiar la opción de desactivarlo sólo para un post determinado. Para ello vimos getopt(), que nos permitía introducir opciones cortas (-v, -a, -j…) incluso con un parámetro[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/11/como-gestionar-los-parametros-de-un-programa-en-c-parte-2-parametros-largos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-11-12T09:47:32Z</dc:date>
  </entry>
  <entry>
    <title>Callbacks en C++11, llamando a métodos con un objeto asociado (II)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/11/callbacks-en-c-11-llamando-a-metodos-con-un-objeto-asociado-ii" />
    <category term="argumentos" />
    <category term="orden" />
    <category term="mem-fn" />
    <category term="metodos" />
    <category term="logger" />
    <category term="tiempo" />
    <category term="tipos" />
    <category term="bind" />
    <category term="variable" />
    <category term="objeto" />
    <category term="memoria" />
    <category term="callbacks" />
    <category term="c-11" />
    <category term="general" />
    <category term="ignorar" />
    <category term="funcion" />
    <category term="momento" />
    <category term="datos" />
    <category term="servidor" />
    <category term="vincular" />
    <category term="placeholder" />
    <category term="c-c" />
    <category term="fecha" />
    <category term="conectar" />
    <category term="asociado" />
    <category term="c" />
    <category term="hora" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-11-09T09:58:16Z</updated>
    <published>2015-11-09T09:58:16Z</published>
    <content type="html">&lt;p&gt;Hace dos semanas hablábamos de Callbacks en C++11 nuevas posibilidades para un software más potente . Empezamos con una pequeña introducción para “almacenar” una función en una variable o un argumento de función y llamarla desde ahí, incluso introdujimos las funciones anónimas o lambdas. Ahora, como no podía ser de otra forma, y dado que estamos en un lenguaje orientado a objetos, en el que queremos aprovechar todo su potencial. Vamos a hacer varios ejemplos en los que llamaremos a métodos de una clase de varias formas diferentes. Llamando a un método de una clase cambiando el objeto Vamos a empezar fuerte, aunque el ejemplo sea muy largo para lo que es, el objetivo es que nuestra función apunta a un método de una clase pero, a la hora de llamarlo, elegimos sobre qué objeto aplicar esa llamada.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/11/callbacks-en-c-11-llamando-a-metodos-con-un-objeto-asociado-ii"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-11-09T09:58:16Z</dc:date>
  </entry>
  <entry>
    <title>Callbacks en C++11 nuevas posibilidades para un software más potente (I)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/10/callbacks-en-c-11-nuevas-posibilidades-para-un-software-mas-potente-i" />
    <category term="metodo" />
    <category term="asignacion" />
    <category term="flexibilidad" />
    <category term="abstraccion" />
    <category term="ordenacion" />
    <category term="retrollamadas" />
    <category term="algorithm" />
    <category term="funciones" />
    <category term="cosas-que-damos-por-hechas" />
    <category term="tipo" />
    <category term="variable" />
    <category term="functional" />
    <category term="c-c" />
    <category term="function" />
    <category term="c-11" />
    <category term="c" />
    <category term="callbacks" />
    <category term="anonimas" />
    <category term="general" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-10-26T09:56:33Z</updated>
    <published>2015-10-26T09:56:33Z</published>
    <content type="html">&lt;p&gt;My beautiful picture Hace tiempo, hice una serie de posts sobre callbacks: Callbacks, retrollamadas o delegados o cómo crear código más flexible en C C++ Punteros a función miembro (pointer-to-member function) o callbacks con clase Callbacks en C++ con boost Hay algunos posts más, pero se salen del tema (y seguro que salen sugeridos más abajo). El caso es que dejé un poco el tema de lado y me gustaría retomarlo con los cambios de la especificación C++11 (vale, tenemos C++14 lista, pero la versión de 2011 es una de las que más cambios introdujeron (y que también valen para C++14). Aunque se ha escrito mucho sobre el tema, pero desde aquí quiero dar a conocer mi humilde visión. Serán una serie de posts ya que es un tema muy amplio y me gusta poner gran cantidad de ejemplos. Una variable que contiene[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/10/callbacks-en-c-11-nuevas-posibilidades-para-un-software-mas-potente-i"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-10-26T09:56:33Z</dc:date>
  </entry>
</feed>

