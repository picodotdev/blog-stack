<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2014-05-11T00:21:54Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2014-05-11T00:21:54Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Como configurar un relay de correo para nuestra empresa con Postfix</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2012/07/como-configurar-un-relay-de-correo-para-nuestra-empresa-con-postfix" />
    <category term="servidor-correo" />
    <category term="debian" />
    <category term="virtualbox" />
    <category term="programacion" />
    <category term="ibm-lotus-notes" />
    <category term="postfix" />
    <category term="wietse-venema" />
    <category term="gnulinux" />
    <category term="correo" />
    <author>
      <name>ochobitshacenunbyte</name>
    </author>
    <updated>2014-05-07T14:05:40Z</updated>
    <published>2012-07-10T12:27:34Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;a href="http://www.ochobitshacenunbyte.com/wp-content/uploads/2012/07/mysza.gif"&gt;&lt;img title="mysza" src="http://www.ochobitshacenunbyte.com/wp-content/uploads/2012/07/mysza.gif" alt="" width="130" height="91" /&gt;&lt;/a&gt;&amp;Uacute;ltimamente en la empresa donde trabajo hemos tenido que configurar un nuevo servidor de “relay” de correo para sustituir al que ten&amp;iacute;amos, que era un viejo &lt;a title="IBM Lotus Notes" href="http://es.wikipedia.org/wiki/Lotus_Notes"&gt;IBM Lotus Notes&lt;/a&gt;. Por suerte yo ya hab&amp;iacute;a o&amp;iacute;do hablar del servicio de correo de c&amp;oacute;digo abierto Postfix, creado por el programador&lt;a title="Wietse Venema" href="http://es.wikipedia.org/wiki/Wietse_Venema"&gt; Wietse Venema&lt;/a&gt;. Lo cierto es que he tenido que investigar un poco, mirando manuales en Internet, y visitando asiduamente la p&amp;aacute;gina web del &lt;a title="Postfix" href="http://www.postfix.org/"&gt;proyecto&lt;/a&gt;, para as&amp;iacute; de paso practicar mi ingl&amp;eacute;s.&lt;/p&gt; 
&lt;p&gt;Bueno. Una vez explicado esto, os explico como lo instal&amp;eacute; y configur&amp;eacute;.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Primero de todo, decid&amp;iacute; usar una distribuci&amp;oacute;n GNU/Linux, me decid&amp;iacute; por Debian, sin interfaz gr&amp;aacute;fica, para as&amp;iacute; ahorrar recursos al sistema. Una vez descargada la &amp;uacute;ltima versi&amp;oacute;n estable de su web: &amp;nbsp;&lt;a href="http://www.debian.org/CD/http-ftp/#stable"&gt;http://www.debian.org/CD/http-ftp/#stable&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2012/07/como-configurar-un-relay-de-correo-para-nuestra-empresa-con-postfix"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>ochobitshacenunbyte</dc:creator>
    <dc:date>2012-07-10T12:27:34Z</dc:date>
  </entry>
  <entry>
    <title>Presentación de Blog Stack</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/presentacion-de-blog-stack" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="linux" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-05-06T19:00:00Z</updated>
    <published>2014-05-04T09:51:38Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/blogstack.png" alt="Blog Stack" title="Blog Stack" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Con este art&amp;iacute;culo quiero presentar un nuevo proyecto, Blog Stack. &lt;a href="http://www.blogstack.info/"&gt;Blog Stack&lt;/a&gt; (BS) es una agregador, planeta, o fuente de informaci&amp;oacute;n de bit&amp;aacute;coras sobre programaci&amp;oacute;n, desarrollo, desarrollo &amp;aacute;gil, software, software libre, hardware, gnu/linux o en general temas relacionados con la tecnolog&amp;iacute;a.&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/23/blogstack-portada.png" title="Portada de Blog Stack"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/23/blogstack-portada-thumb.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Otro agregador o planeta no es ninguna idea nueva pero BS incorpora alguna cosa adicional como poder suscribirse a &amp;uacute;nicamente el contenido etiquetado en que cada uno est&amp;eacute; interesando (programaci&amp;oacute;n, desarrollo-&amp;aacute;gil, java, python, linux, ubuntu, …) o recibir el contenido publicado en todas las bit&amp;aacute;coras agregadas sin tener que suscribirse individualmente a cada una de ellas. BS a&amp;uacute;n est&amp;aacute; en desarrollo y posiblemente vaya incorporando nuevas ideas que me surjan o se me propongan pero en el estado actual ya cumple con la funci&amp;oacute;n b&amp;aacute;sica de agregador.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/presentacion-de-blog-stack"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-04T09:51:38Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a Elasticsearch</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/04/introduccion-a-elasticsearch" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-05-01T11:00:00Z</updated>
    <published>2014-04-25T15:15:05Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/elasticsearch.png" alt="Elasticsearch" title="Elasticsearch" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Continuando con la forma de &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html"&gt;como dar soluci&amp;oacute;n a la b&amp;uacute;squedas en las entidades de dominio&lt;/a&gt; en esta entrada profundizar&amp;eacute; en la soluci&amp;oacute;n que comentaba de usar &lt;a href="http://www.elasticsearch.org"&gt;Elasticsearch&lt;/a&gt; (ES). ES se basa en &lt;a href="http://lucene.apache.org/core/"&gt;Lucene&lt;/a&gt; pero expone su funcionalidad a trav&amp;eacute;s de una interfaz REST recibiendo y enviando datos en formato JSON y oculta mediante esta interfaz los detalles internos de lucene. Esta interfaz permite que pueda ser utilizada por cualquier plataforma no solo Java, puede usarse desde Python, .NET, PHP o incluso desde un navegador con Javascript. Es persistente, es decir, que lo que indexemos en ella sobrevivir&amp;aacute; a un reinicio del servidor.&lt;/p&gt; 
&lt;p&gt;Como comentaba en &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html"&gt;el art&amp;iacute;culo anterior de b&amp;uacute;squedas sobre entidades de dominio&lt;/a&gt; ES nos puede servir para hacer b&amp;uacute;squedas a texto completo pero tambi&amp;eacute;n podemos hacer otra serie de cosas adicionales que no podemos con una base de datos relacional aunque soporte en su lenguaje SQL b&amp;uacute;squeda a texto completo, por ejemplo, resaltado (highlight) y facetas (facets), tambi&amp;eacute;n permite hacer b&amp;uacute;squedas vagas (fuzzy) y soporta diferentes analizadores seg&amp;uacute;n el idioma de la propiedad en que se busque. El indexar y desindexar los datos en elasticsearch para que luego puedan ser buscados es responsabilidad nuestra y adem&amp;aacute;s de insertarlos o eliminarlos en la base de datos debemos hacer lo mismo en ES ya sea haci&amp;eacute;ndolo en ambos sitios a la vez o mediante un proceso de fondo que se encargue de ello.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/04/introduccion-a-elasticsearch"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-04-25T15:15:05Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo lista de tareas con Marionette</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-lista-de-tareas-con-marionette" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-04-25T22:59:42Z</updated>
    <published>2013-08-30T12:28:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Marionette" src="http://2.bp.blogspot.com/-ODdQesCGeKg/UiCFBR7_Z_I/AAAAAAAACmg/an6e-SJv-jA/s200/marionette.png" height="200" title="Marionette" width="146" /&gt; 
&lt;/div&gt;Como comentaba en el 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html"&gt;ejemplo de una aplicaci&amp;oacute;n de una lista de tareas en una aplicaci&amp;oacute;n javascript&lt;/a&gt;&amp;nbsp;Backbone es una herramienta que nos puede ayudar mucho a evitar que el c&amp;oacute;digo se nos convierta en dif&amp;iacute;cil de manejar facilit&amp;aacute;ndonos como estructurarlo con los modelos, colecciones y vistas y permiti&amp;eacute;ndonos separar el modelo de la vista actualizando estas &amp;uacute;ltimas a trav&amp;eacute;s de los eventos que produce el modelo y escuchados en las vistas. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;a href="http://backbonejs.org/"&gt;Backbone&lt;/a&gt; es una herramienta que nos da bastante libertad en cuanto a como queremos hacer las cosas y de lo que ofrece podemos usar solo lo que queramos. En algunos casos podemos considerar que Backbone ya es de por si una soluci&amp;oacute;n suficiente pero pero en otros podemos necesitar algo que nos facilite la tarea un poco m&amp;aacute;s, de hecho hay muchas&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-lista-de-tareas-con-marionette"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-08-30T12:28:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo lista de tareas con Backbone y React</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-04-11T14:33:28Z</updated>
    <published>2014-04-11T14:33:28Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/backbone.png" alt="Backbone" title="Backbone" /&gt; 
 &lt;br /&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/react.png" alt="React" title="React" /&gt; 
&lt;/div&gt; 
&lt;p&gt;En anteriores entradas explicaba como hacer el t&amp;iacute;pico ejemplo que se suele usar como demostraci&amp;oacute;n en los framework MVC de Javascript que consiste en una lista de tareas en la que se pueden a&amp;ntilde;adir nuevas, marcarlas como completadas y eliminarlas. Realice este ejemplo en uno de ellos &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html"&gt;usando solo Backbone&lt;/a&gt; y posteriormente &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html"&gt;usando Marionette&lt;/a&gt;. Estos ejemplos eran parte de una serie de art&amp;iacute;culos sobre Javascript que la que mostaba como usar muchas otras herramientas como &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html"&gt;Require JS&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html"&gt;Mustache&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html"&gt;logging con javscript&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html"&gt;capturar errores en javascript&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html"&gt;introducci&amp;oacute;n a Backbone&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html"&gt;lista de tarea con Backbone, RESTEasy y Tapestry&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html"&gt;pruebas unitarias con Jasmine y Sinon&lt;/a&gt;, &lt;a href="http://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/"&gt;Usar Grunt para ejecutar teses unitarios de c&amp;oacute;digo Javascript&lt;/a&gt; y que constituyen parte del actual &amp;laquo;estado del arte&amp;raquo; en cuanto a desarrollo con Javascript.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-04-11T14:33:28Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo lista de tareas con Backbone, RESTEasy y Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/04/ejemplo-lista-de-tareas-con-backbone-resteasy-y-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-04-04T16:11:56Z</updated>
    <published>2013-04-26T19:38:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Backbone.js" src="http://2.bp.blogspot.com/-SMyoDvx_-j8/UXFvpfyC7iI/AAAAAAAACec/LiLs_goZU4Y/s320/backbone.png" height="56" title="Backbone.js" width="320" /&gt; 
&lt;/div&gt;Normalmente escribo art&amp;iacute;culos con ejemplos que tratan sobre una &amp;uacute;nica tecnolog&amp;iacute;a, al tratar cada tecnolog&amp;iacute;a por separado entender que puede ofrecer es m&amp;aacute;s sencillo pero en una aplicaci&amp;oacute;n real normalmente se usan varias tecnolog&amp;iacute;as combinadas y al mismo tiempo. Esta entrada aunque sigue siendo un ejemplo es mucho m&amp;aacute;s parecido a lo que podr&amp;iacute;a ser una aplicaci&amp;oacute;n real que lo que he explicado durante las &amp;uacute;ltimas entradas. En esta serie sobre javascript he explicado un mont&amp;oacute;n de cosas por separado entre ellas 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html"&gt;RequireJS&lt;/a&gt;,&amp;nbsp; 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html"&gt;Mustache&lt;/a&gt;,&amp;nbsp; 
&lt;a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html"&gt;Backbone&lt;/a&gt;, 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/integracion-tapestry-con-resteasy.htm.html"&gt;servicios rest con Tapestry&lt;/a&gt; y 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/02/ejemplo-sencillo-de-web-service-con-resteasy.html"&gt;RESTEasy&lt;/a&gt;. En esta entrada har&amp;eacute; un ejemplo haciendo uso de todas las anteriores y alguna cosa m&amp;aacute;s adicional como 
&lt;a href="http://twitter.github.io/bootstrap/"&gt;twitter bootstrap&lt;/a&gt;. 
&lt;br /&gt; 
&lt;br /&gt;El ejemplo consiste en una lista de tareas, pudi&amp;eacute;ndose introducir nuevas tareas y marcarlas como realizadas. Tambi&amp;eacute;n se podr&amp;aacute; eliminar de la lista las tareas completadas y ver un resumen con el n&amp;uacute;mero de tareas completadas y de tareas totales.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/04/ejemplo-lista-de-tareas-con-backbone-resteasy-y-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-04-26T19:38:00Z</dc:date>
  </entry>
  <entry>
    <title>Introducción y ejemplo de RequireJS</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/03/introduccion-y-ejemplo-de-requirejs" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software-libre" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-04-04T14:46:44Z</updated>
    <published>2013-03-15T21:18:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="RequireJS" src="http://4.bp.blogspot.com/-M9RUvRUMUuY/UUOEKEfud5I/AAAAAAAACcU/OYXvsfWUBbQ/s1600/requirejs.png" title="RequireJS" /&gt; 
&lt;/div&gt;Las p&amp;aacute;ginas web ha evolucionado mucho desde sus inicios en los que eran simples p&amp;aacute;ginas est&amp;aacute;ticas hechas con el lenguaje de marcas html, pod&amp;iacute;an contener enlaces e im&amp;aacute;genes. Posteriormente adquirieron capacidad de cambiar a trav&amp;eacute;s un lenguaje de programaci&amp;oacute;n que en el servidor genera el c&amp;oacute;digo html de forma din&amp;aacute;mica bas&amp;aacute;ndose en la informaci&amp;oacute;n que el usuario pod&amp;iacute;a enviar en un formulario, tambi&amp;eacute;n se incorpora cierta programaci&amp;oacute;n en el cliente con javascript. Con las nuevas versiones del est&amp;aacute;ndar html, los avances de los navegadores y una explosi&amp;oacute;n de dispositivos m&amp;oacute;viles de gran capacidad las aplicaciones est&amp;aacute;n evolucionando hacia el cliente, haci&amp;eacute;ndose cada vez m&amp;aacute;s complejas en el lado del navegador del usuario y adquiriendo resposabilidades que antes ten&amp;iacute;a la aplicaci&amp;oacute;n en el lado del servidor. Cada vez hay m&amp;aacute;s librer&amp;iacute;as y frameworks javascript que tratan de resolver problemas espec&amp;iacute;ficos de las aplicaciones de internet. Entre estas librer&amp;iacute;as algunas de las m&amp;aacute;s conocidas son, muy resumidamente:&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/03/introduccion-y-ejemplo-de-requirejs"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-03-15T21:18:00Z</dc:date>
  </entry>
  <entry>
    <title>Usar Grunt para ejecutar teses unitarios de código Javascript</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-04-04T14:43:23Z</updated>
    <published>2014-04-04T14:43:23Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/grunt.png" alt="Grunt" title="Grunt" /&gt; 
&lt;/div&gt; 
&lt;p&gt;En la &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html"&gt;serie de art&amp;iacute;culos que escrib&amp;iacute; sobre javascript&lt;/a&gt; hice un ejemplo m&amp;aacute;s o menos complejo y parecido a lo que podr&amp;iacute;a ser una aplicaci&amp;oacute;n real usando muchas de las herramientas que ahora se consideran una buena opci&amp;oacute;n para desarrollar aplicaciones javascript como &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html"&gt;RequireJS&lt;/a&gt;, &lt;a href="http://www.genbetadev.com/desarrollo-web/patron-de-diseno-mvc-del-lado-cliente-con-backbonejs"&gt;Backbone&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html"&gt;Marionette&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html"&gt;Jasmine y Sinon&lt;/a&gt;. En el &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html"&gt;ejemplo de la lista de tareas con estas herramientas&lt;/a&gt; hice unas cuantas pruebas unitarias para mostrar en un ejemplo como son y la forma de usar &lt;a href="http://jasmine.github.io/"&gt;Jasmine&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Sin embargo, para ejecutar las pruebas unitarias se necesitaba un navegador y hacerlo de forma manual cuando quisi&amp;eacute;ramos comprobar el estado de las pruebas. Lo ideal tal y como se comenta en el libro &lt;a href="http://www.amazon.es/gp/product/B000SEGEKI/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp=3626&amp;amp;creative=24822&amp;amp;creativeASIN=B000SEGEKI&amp;amp;linkCode=as2&amp;amp;tag=blobit-21"&gt;The Pragmatic Programmer&lt;/a&gt;&lt;img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&amp;amp;l=as2&amp;amp;o=30&amp;amp;a=B000SEGEKI" width="1" height="1" alt="" style="border:none !important; margin:0px !important;" /&gt; es que las pruebas unitarias se ejecuten de forma automatizada con la herramienta de construcci&amp;oacute;n que usemos, esto evitar&amp;aacute; que se nos olvide ejecutarlas en cada cambio y as&amp;iacute; descubriremos los errores pronto, tambi&amp;eacute;n podremos hacer que se ejecuten en un entorno de integraci&amp;oacute;n continua como podr&amp;iacute;a ser &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-04-04T14:43:23Z</dc:date>
  </entry>
  <entry>
    <title>Novedades y nuevas características de Java 8</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-28T19:00:00Z</updated>
    <published>2014-03-21T15:03:27Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;El 18 de marzo de 2014 se public&amp;oacute; la nueva versi&amp;oacute;n de la plataforma &lt;a href="http://www.oracle.com/technetwork/java/javase/overview/java8-2100321.html"&gt;Java 8&lt;/a&gt;, Java 7 fue liberada el en julio de 2011. Java 8 incorporar&amp;aacute; varias novedades siguiendo la tendencia de otros lenguajes como la incorporaci&amp;oacute;n de lambdas o closures o una demandada nueva API para el manejo de fechas entre otras muchas caracter&amp;iacute;sticas m&amp;aacute;s. La &lt;a href="http://openjdk.java.net/projects/jdk8/features"&gt;lista completa de novedades&lt;/a&gt; es bastante amplia, a continuaci&amp;oacute;n pondr&amp;eacute; lo que me ha parecido m&amp;aacute;s destacable:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Se a&amp;ntilde;aden las expresiones lambda o closures y se adapta la API para usarlas en los sitios que se pueda.&lt;/li&gt; 
 &lt;li&gt;Se definen nuevos perfiles compactos para dispositivos que no necesitan toda la API Java, esto es una alternativa a la modularizaci&amp;oacute;n. Inicialmente la modularizaci&amp;oacute;n era una caracter&amp;iacute;stica que estaba planificada para Java 8 pero finalmente se ha aplazado a posteriores versiones.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-03-21T15:03:27Z</dc:date>
  </entry>
  <entry>
    <title>BlueFish, un potente editor para desarrollo web.</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/03/bluefish-un-potente-editor-para-desarrollo-web" />
    <category term="programacion" />
    <category term="web" />
    <category term="css" />
    <category term="c" />
    <category term="bluefish" />
    <category term="gnulinux" />
    <category term="desarrollo" />
    <category term="php" />
    <category term="python" />
    <category term="html" />
    <author>
      <name>ochobitshacenunbyte</name>
    </author>
    <updated>2014-03-10T09:21:25Z</updated>
    <published>2014-03-10T09:17:15Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;a href="http://www.ochobitshacenunbyte.com/wp-content/uploads/2014/03/bluefish.png"&gt;&lt;img alt="bluefish" src="http://www.ochobitshacenunbyte.com/wp-content/uploads/2014/03/bluefish-150x150.png" width="150" height="150" /&gt;&lt;/a&gt;En castellano usamos frecuentemente la frase “Hay muchos peces en el mar”, seg&amp;uacute;n la circunstancia. Hoy hablaremos de un jugoso pez azul, que nos puede facilitar mucho las cosas, sobre todo para los desarrolladores web.&lt;/p&gt; 
&lt;p&gt;En &lt;a title="GNU/Linux art&amp;iacute;culo" href="http://www.ochobitshacenunbyte.com/?p=31"&gt;GNU/Linux &lt;/a&gt;tenemos un sin fin de editores. Bluefish es un potente editor de texto enfocado al desarrollador.&amp;nbsp; C&amp;oacute;mo caracter&amp;iacute;sticas principales tenemos el resaltado de sintaxis, el apoyo a los proyectos, la sangr&amp;iacute;a, la auto-realizaci&amp;oacute;n, etc&amp;eacute;tera.&amp;nbsp; &amp;iquest;Qu&amp;eacute; diferencia Bluefish de otros editores con funciones similares?&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;p&gt;Partimos de la base que puede editar c&amp;oacute;digo para lenguajes como C, C++, Python entre otros. Pero d&amp;oacute;nde desmarca claramente es para el desarrollo web, ya que tiene soporte para HTML, CSS y PHP, adem&amp;aacute;s proporciona una lista todas las etiquetas HTML, y eso facilita mucha las cosas.&amp;nbsp; &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/03/bluefish-un-potente-editor-para-desarrollo-web"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>ochobitshacenunbyte</dc:creator>
    <dc:date>2014-03-10T09:17:15Z</dc:date>
  </entry>
  <entry>
    <title>Patrones de diseño en la programación orientada a objetos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/03/patrones-de-diseno-en-la-programacion-orientada-a-objetos" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-08T02:25:28Z</updated>
    <published>2012-03-16T19:46:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="107" /&gt; 
&lt;/div&gt;La programaci&amp;oacute;n orientada a objetos (POO) es un paradigma en la que los sistemas se dise&amp;ntilde;an mediante clases y relaciones entre ellas. Se utilizan conceptos como la herencia, polimorfismo, abstraci&amp;oacute;n, encapsulamiento y ocultaci&amp;oacute;n. Resumidamente estas propiedades son: 
&lt;br /&gt; 
&lt;ul&gt; 
 &lt;li&gt;Clase: Abstracci&amp;oacute;n que recoge las propiedades y comportamiento de los objetos en el sistema. Una clase puede instanciarse en objetos tantas veces como se necesite.&lt;/li&gt; 
 &lt;li&gt;Objeto: instancia de una clase que se relaciona con el resto de objetos a trav&amp;eacute;s de los m&amp;eacute;todos definidos en sus clases.&lt;/li&gt; 
 &lt;li&gt;Herencia: las clases no est&amp;aacute;n aisladas y se relacionan entre ellas, mediante esta propiedad forman una jerarqu&amp;iacute;a en la que las clases heredan las propiedades y m&amp;eacute;todos de las clases superiores.&lt;/li&gt; 
 &lt;li&gt;Polimorfismo: es la propiedad de las instancias de las clases, los objetos, por la que pueden responder de forma diferente a un mismo nombre de m&amp;eacute;todo en funci&amp;oacute;n de su tipo concreto.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/03/patrones-de-diseno-en-la-programacion-orientada-a-objetos"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-03-16T19:46:00Z</dc:date>
  </entry>
  <entry>
    <title>Introducción y ejemplo sencillo de Java Message Service (JMS)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-08T00:00:00Z</updated>
    <published>2014-03-07T17:31:22Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition"&gt;La plataforma Java EE&lt;/a&gt; (Java Enterprise Edition) pone a disposici&amp;oacute;n de los desarrolladores varias especificaciones, estas especificaciones describen las funcionalidades y la API que deben proporcionar las implementaciones y proporcionan al desarrollador herramientas para facilitar, hacer mejor las aplicaciones y de forma est&amp;aacute;ndar seg&amp;uacute;n estas especificaciones. Haciendo uso de una de estas especificaciones es posible cambiar de una implementaci&amp;oacute;n a otra de forma transparente y sin modificar ninguna l&amp;iacute;nea de c&amp;oacute;digo de la aplicaci&amp;oacute;n (en teor&amp;iacute;a). Hay especificaciones para persistencia en base de datos (JPA), para transaccionalidad (JTA), para servicios web (JAX-WS ) y REST (JAX-RS) entre otras. En el siguiente enlace puede encontrarse el &lt;a href="https://glassfish.java.net/downloads/ri/"&gt;listado completo de especificaciones y sus versiones de JEE 7&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-03-07T17:31:22Z</dc:date>
  </entry>
  <entry>
    <title>Componente AjaxSpinner para Tapestry 5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2011/09/componente-ajaxspinner-para-tapestry-5" />
    <category term="programacion" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-03-06T08:46:40Z</updated>
    <published>2011-09-09T19:09:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" height="133" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt;Hoy en d&amp;iacute;a las aplicaciones web que hace peticiones de forma as&amp;iacute;ncrona con AJAX son la mayor&amp;iacute;a ya que es una t&amp;eacute;cnica que permite obtener &amp;uacute;nicamente los datos que se necesitan sin tener que hacer una cargar entera de la p&amp;aacute;gina web en el navegador. Esta t&amp;eacute;cnica hace que las peticiones al devolver &amp;uacute;nicamente los datos necesarios (y no toda la p&amp;aacute;gina) y los recursos para procesar la petici&amp;oacute;n sean menos, tambi&amp;eacute;n hace que el resultado de las peticiones sean m&amp;aacute;s peque&amp;ntilde;os con lo que el tiempo de carga tambi&amp;eacute;n se reduce al generar menos tŕafico de red, asi mismo el usuario nota un aumento de tiempo de respuesta. Tambi&amp;eacute;n hace que en ciertos casos las aplicaciones sean m&amp;aacute;s f&amp;aacute;ciles de desarrollar por no tener que tratar en el servidor en cada petici&amp;oacute;n el estado concreto de cada cliente.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2011/09/componente-ajaxspinner-para-tapestry-5"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2011-09-09T19:09:00Z</dc:date>
  </entry>
  <entry>
    <title>Música para programar</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/02/musica-para-programar" />
    <category term="programacion" />
    <category term="musica" />
    <category term="music" />
    <category term="programming" />
    <author>
      <name>ochobitshacenunbyte</name>
    </author>
    <updated>2014-02-27T17:02:39Z</updated>
    <published>2014-02-27T16:42:43Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;a href="http://www.ochobitshacenunbyte.com/wp-content/uploads/2014/02/mfp.jpg"&gt;&lt;img alt="mfp" src="http://www.ochobitshacenunbyte.com/wp-content/uploads/2014/02/mfp.jpg" width="144" height="144" /&gt;&lt;/a&gt;Muchas veces necesitamos aislarnos del mundo exterior, o simplemente desconectar de las conversaciones de nuestros compa&amp;ntilde;eros de departamento.&lt;/p&gt; 
&lt;p&gt;Os recomiendo la web:&lt;/p&gt; 
&lt;p&gt;&lt;a title="Music for programming" href="http://musicforprogramming.net/"&gt;musicForProgramming();&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;Recopilatarios muy completos. Echadle un vistazo.&lt;/p&gt; 
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;div&gt; 
 &lt;a href="http://twitter.com/share?url=http://www.ochobitshacenunbyte.com/2014/02/27/musica-para-programar/&amp;amp;text=M&amp;uacute;sica para programar" title="Click here if you like this article."&gt; &lt;img src="http://www.ochobitshacenunbyte.com/wp-content/plugins/twitter-plugin/images/twitt.gif" alt="Twitt" /&gt; &lt;/a&gt; 
&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/02/musica-para-programar"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>ochobitshacenunbyte</dc:creator>
    <dc:date>2014-02-27T16:42:43Z</dc:date>
  </entry>
  <entry>
    <title>Generar y convertir claves y certificados con OpenSSL</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-21T16:36:21Z</updated>
    <published>2014-02-21T16:36:21Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/openssl.png" alt="OpenSSL" title="OpenSSL" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Para un uso personal como enviar correos o archivos cifrados o firmados digitalmente usar &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html"&gt;GnuPG&lt;/a&gt; es una buena opci&amp;oacute;n. En Internet los servidores tambi&amp;eacute;n se aprovechan del uso de criptograf&amp;iacute;a para realizar comunicaciones seguras entre el usuario y el servidor.&lt;/p&gt; 
&lt;p&gt;Para hacer uso en un servidor de una comunicaci&amp;oacute;n https donde los datos viajan cifrados y sin que otras partes salvo el usuario y el servidor puedan acceder a los datos necesitamos un certificado digital. Un certificado es un archivo que contiene la clave p&amp;uacute;blica sirvi&amp;eacute;ndonos para verificar su autenticidad. Un certificado autofirmado es un certificado firmado con la misma clave privada asociada a la clave p&amp;uacute;blica que contiene el certificado. Un certificado autofirmado es suficiente para un entorno de pruebas pero en un servidor para proporcionar confianza a los usuarios deberemos solicitar que una autoridad de certificados que nos firme con su clave nuestro certificado, si el usuario conf&amp;iacute;a en esa autoridad de certificado puede de esta manera confiar en nuestro certificado y clave p&amp;uacute;blica.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-02-21T16:36:21Z</dc:date>
  </entry>
  <entry>
    <title>Documentación sobre Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2010/05/documentacion-sobre-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-14T23:34:46Z</updated>
    <published>2010-05-24T18:46:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em; text-align: center;"&gt; 
 &lt;img alt="Apache Tapestry" src="http://1.bp.blogspot.com/_9zOwWD_PYL8/TOq7Y6w6wfI/AAAAAAAAAiU/DPBnmc4-2Sw/s320/tapestry.png" height="132" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt; 
&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; ha sido para mi, con diferencia sobre el resto &amp;nbsp;(JSF, Struts 1 y &amp;uacute;ltimamente Grails), el mejor framework para desarrollar aplicaciones web en Java que he probado, adem&amp;aacute;s de ser un placer programar con &amp;eacute;l siempre que he podido. Tambi&amp;eacute;n he le&amp;iacute;do bastantes buenas cr&amp;iacute;ticas y argumentos en varios blogs y art&amp;iacute;culos destacando varios de sus aspectos y compar&amp;aacute;ndolo con otros frameworks similares ( 
&lt;a href="http://wicket.apache.org/"&gt;Wicket&lt;/a&gt;, 
&lt;a href="http://struts.apache.org/"&gt;Struts&lt;/a&gt;, JSF y alg&amp;uacute;n otro). En esta entrada quiero ir recogiendo todos los enlaces de documentaci&amp;oacute;n que vaya encontrando sobre este framework ya que a pesar de que el framework es excelente la documentaci&amp;oacute;n a d&amp;iacute;a de hoy no es tan abundante&amp;nbsp;no toda est&amp;aacute; centralizada en la web del proyecto, lo que puede ser un problema para alguien que este empezando. Por fortuna, la documentaci&amp;oacute;n es suficiente para llegar a comprender como funciona y hay algunos buenos libros publicados. Este framework le hace la vida m&amp;aacute;s f&amp;aacute;cil al programador en varias de las tareas m&amp;aacute;s comunes de toda aplicaci&amp;oacute;n web. As&amp;iacute; que si estas cansado de JSF, de Struts o de el framework [pon aqu&amp;iacute; el que uses] que no te permite disfrutar mientras desarrollas o te complica las cosas m&amp;aacute;s de lo necesario te animo a que pruebes Tapestry quiz&amp;aacute; sea lo que est&amp;aacute;s buscando. Puedes empezar por el&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2010/05/documentacion-sobre-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2010-05-24T18:46:00Z</dc:date>
  </entry>
  <entry>
    <title>Libro sobre desarrollo de aplicaciones con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/07/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-linux" />
    <category term="tecnologia" />
    <category term="software-libre" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-14T20:12:44Z</updated>
    <published>2013-07-24T17:06:00Z</published>
    <content type="html">&lt;p&gt;Recientemente he publicado 
&lt;a href="http://goo.gl/Vx8icI"&gt;PlugIn Tapestry&lt;/a&gt;, un libro acerca del desarrollo de aplicaciones web en el lenguaje Java y con el framework 
&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt;. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div&gt; 
 &lt;div style="clear: both; text-align: center;"&gt; 
  &lt;a href="http://goo.gl/WFQgY"&gt;&lt;img alt="PlugIn Tapestry" src="http://1.bp.blogspot.com/-CUcQ3fWr9Yw/Ue7FYGDd_SI/AAAAAAAACls/eLuRuVvRz7w/s320/PlugInTapestry.png" height="320" style="border-color: red; border-style: solid; border-width: 1px;" title="PlugIn Tapestry" width="226" /&gt;&lt;/a&gt; 
 &lt;/div&gt;Apache Tapestry es un framework orientado a componentes para crear aplicaciones web r&amp;aacute;pidas, din&amp;aacute;micas, robustas y altamente escalables en la plataforma Java. Al basarse en componentes es distinto de los muchos basados en acciones similares en esencia a Struts que podemos encontrar en la plataforma Java como SpringMVC, Grails y Play! y tambi&amp;eacute;n de los muchos otros en los que la principal diferencia es el lenguaje como Django (Python), Symfony (PHP), .NET MVC (C#) o Ruby On Rails (Ruby). 
 &lt;br /&gt; 
 &lt;br /&gt;Incluyendo la descripci&amp;oacute;n de las caracter&amp;iacute;sticas del framework el libro trata la mayor&amp;iacute;a de aspectos que puede necesitar una aplicaci&amp;oacute;n o p&amp;aacute;gina web, entre ellos: 
&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/07/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-07-24T17:06:00Z</dc:date>
  </entry>
  <entry>
    <title>Libro sobre desarrollo de aplicaciones con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-14T19:10:34Z</updated>
    <published>2014-02-14T19:10:34Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Hace unos meses publiqu&amp;eacute; el libro PlugIn Tapestry, un libro acerca del desarrollo de aplicaciones y p&amp;aacute;ginas web en el lenguaje Java y con el framework &lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt;.&lt;/p&gt; 
&lt;h2&gt;PlugIn Tapestry&lt;/h2&gt; 
&lt;p&gt;Apache Tapestry es un framework orientado a componentes para crear aplicaciones web r&amp;aacute;pidas, din&amp;aacute;micas, robustas y altamente escalables en la plataforma Java. Al basarse en componentes es distinto de los muchos basados en acciones similares en esencia a Struts que podemos encontrar en la plataforma Java como &lt;a href="http://projects.spring.io/spring-framework/"&gt;Spring&lt;/a&gt;, &lt;a href="http://grails.org/"&gt;Grails&lt;/a&gt; y &lt;a href="http://www.playframework.com/"&gt;Play!&lt;/a&gt; y tambi&amp;eacute;n de los muchos otros en los que la principal diferencia es el lenguaje como &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt; (Python), &lt;a href="http://symfony.com/"&gt;Symfony&lt;/a&gt; (PHP), &lt;a href="http://www.asp.net/mvc"&gt;ASP.NET MVC&lt;/a&gt; (C#) o &lt;a href="http://rubyonrails.org/"&gt;Ruby On Rails&lt;/a&gt; (Ruby).&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry.png" title="Libro sobre Apache Tapestry"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry-thumb.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Incluyendo la descripci&amp;oacute;n de las caracter&amp;iacute;sticas del framework el libro trata la mayor&amp;iacute;a de aspectos que puede necesitar una aplicaci&amp;oacute;n o p&amp;aacute;gina web, entre ellos:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-02-14T19:10:34Z</dc:date>
  </entry>
  <entry>
    <title>Presentación sobre Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/02/presentacion-sobre-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-14T15:05:53Z</updated>
    <published>2014-02-14T15:05:53Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
&lt;/div&gt; 
&lt;p&gt;El 10 de febrero tuve la oportunidad de dar una charla, la primera, sobre &lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; para el equipo de desarrolladores de la empresa en la que trabajo. Que en el equipo de desarrollo tengamos la posibilidad de vez en cuando dedicar un par de horas para juntarnos y compartir conocimiento es una buena iniciativa ya que siendo ya un equipo bastante grande de personas y con un nivel t&amp;eacute;cnico elevado cada uno tiene un conocimiento que los dem&amp;aacute;s pueden estar interesados en conocer al menos a nivel superficial, es motivador tener estas oportunidades.&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/11/presentacion-apache-tapestry.jpg" title="Presentaci&amp;oacute;n sobre Apache Tapestry"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/11/presentacion-apache-tapestry-thumb.jpg" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Fue una charla simplemente como cultura general ya que el framework y el lenguaje que usamos como pila tecnol&amp;oacute;gica es &lt;a href="http://grails.org/"&gt;Grails&lt;/a&gt; y &lt;a href="http://groovy.codehaus.org/"&gt;Groovy&lt;/a&gt; y eso es complicado que cambie. Otro motivo fue poder compartir el conocimiento de este framework para el desarrollo de aplicaciones y p&amp;aacute;ginas web que a mi me gusta mucho. Si est&amp;aacute;s suscrito al &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/02/presentacion-sobre-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-02-14T15:05:53Z</dc:date>
  </entry>
  <entry>
    <title>Servidor de aplicaciones JBoss/WildFly</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/02/servidor-de-aplicaciones-jbosswildfly" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-02-07T21:35:31Z</updated>
    <published>2014-02-07T21:35:31Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/wildfly.png" alt="WildFly" title="WildFly" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Para una peque&amp;ntilde;a (o no tan peque&amp;ntilde;a) aplicaci&amp;oacute;n web desarrollada en la plataforma Java un servidor como &lt;a href="http://tomcat.apache.org/"&gt;Tomcat&lt;/a&gt; o &lt;a href="http://www.eclipse.org/jetty/"&gt;Jetty&lt;/a&gt; es suficiente. Pero una aplicaci&amp;oacute;n grande o un entorno empresarial probablemente empiece a requerir funcionalidades que Tomcat no proporciona de por si. En algunos casos una librer&amp;iacute;a puede suplir esta carencia, este podr&amp;iacute;a ser el caso de &lt;a href="http://hibernate.org/"&gt;Hibernate&lt;/a&gt; para la persistencia o &lt;a href="http://shiro.apache.org/"&gt;Apache Shiro&lt;/a&gt; para la seguridad de la aplicaci&amp;oacute;n. Sin embargo, cuando sea posible y tenga sentido es buena idea seguir alguna de las especificaciones o &lt;a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition"&gt;APIs que proporciona la plataforma JEE&lt;/a&gt; ya que de esta manera podremos cambiar de implementaci&amp;oacute;n sin necesidad de modificar el c&amp;oacute;digo de la aplicaci&amp;oacute;n y permite integrar dos sistemas diferentes si ambos siguen una determinada especificaci&amp;oacute;n. Un ejemplo podr&amp;iacute;a ser el caso de Hibernate con la especificaci&amp;oacute;n JPA que proporciona una funcionalidad equivalente (de hecho esta especificaci&amp;oacute;n se basa en Hibernate y se puede usar Hibernate como implementaci&amp;oacute;n a trav&amp;eacute;s de la API que define JPA) o de integraci&amp;oacute;n de sistemas con JMS.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/02/servidor-de-aplicaciones-jbosswildfly"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-02-07T21:35:31Z</dc:date>
  </entry>
  <entry>
    <title>Librerías de logging para Java (slf4j, log4j, java.util.logging, logback, MentaLog)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/04/librerias-de-logging-para-java-slf4j-log4j-javautillogging-logback-mentalog" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-31T17:42:13Z</updated>
    <published>2012-04-26T18:58:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" height="200" title="Java" width="107" /&gt; 
&lt;/div&gt;Pr&amp;aacute;cticamente toda aplicaci&amp;oacute;n incluye un sistema para emitir trazas con informaci&amp;oacute;n relevate de lo que est&amp;aacute; realizando a un fichero o a la salida est&amp;aacute;ndar. Dependiendo de la informaci&amp;oacute;n y detalle de la misma esta puede ser muy &amp;uacute;til para determinar la causa de un posible fallo o alg&amp;uacute;n mal funcionamiento de la aplicaci&amp;oacute;n ya que el log es un registro no solo de la excepci&amp;oacute;n producida sino tambi&amp;eacute;n de su contexto con las acciones anteriores realizadas. Tambi&amp;eacute;n puede servir para monitorizar en tiempo real las acciones que est&amp;aacute; llevando a cabo el sistema que de otra forma no podr&amp;iacute;amos realizar o ser&amp;iacute;a utilizando herramientas m&amp;aacute;s complejas. 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="slf4j" src="http://4.bp.blogspot.com/-rSD_DRFz_AQ/T5mWY_T1dyI/AAAAAAAABF0/JnUxURh8TqA/s200/slf4j.jpg" height="85" title="slf4j" width="200" /&gt; 
&lt;/div&gt;Generar trazas en una aplicaci&amp;oacute;n es muy barato y simple comparado con la informaci&amp;oacute;n que puede proporcionar, su utilidad y tiempo que puede ahorrar a la hora de descubrir problemas. B&amp;aacute;sicamente, las trazas que queremos generar las insertamos dentro del propio c&amp;oacute;digo de la aplicaci&amp;oacute;n que est&amp;aacute;n compuestas del mensaje que queremos emitir, el nivel de la traza y la categor&amp;iacute;a a la misma. El mensaje puede ser cualquier cadena que queramos que creamos que nos puede ser &amp;uacute;til pudiendo contener datos procedentes de variables o cualquier otra cosa de la que pueda disponer el programa. Los niveles de las trazas en muchos sistemas son las siguientes por orden de relevancia de mayor a menor: fatal, error, warn, info, debug. Estos niveles de las trazas nos pemitir&amp;aacute;n utilizalos posteriormente para en tiempo de ejecuci&amp;oacute;n y mendiante la configuraci&amp;oacute;n del sistema de logging filtrar las mismas por el nivel que queramos pudiendo obtener &amp;uacute;nicamente las trazas de nivel warn o superior. Las categor&amp;iacute;as representan la pieza dentro de nuestro sistema que emite la traza que tambi&amp;eacute;n podremos utilizar para filtrar los mensajes que queramos. Por supuesto, podremos utilizar las combinaciones de nivel y categor&amp;iacute;a que queramos teniendo en nuestras manos un sistema muy flexible para obtener la informaci&amp;oacute;n que queramos y que genere la aplicaci&amp;oacute;n.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/04/librerias-de-logging-para-java-slf4j-log4j-javautillogging-logback-mentalog"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-04-26T18:58:00Z</dc:date>
  </entry>
  <entry>
    <title>Logging usando marcadores con slf4j y logback</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-31T16:10:17Z</updated>
    <published>2014-01-31T16:10:17Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Un sistema de logging en una aplicaci&amp;oacute;n es indispensable para saber lo que est&amp;aacute; sucediendo en la aplicaci&amp;oacute;n en el mismo momento o pasado un tiempo. Es de gran utilidad tanto para en el momento de desarrollar la aplicaci&amp;oacute;n como para una vez puesta en producci&amp;oacute;n. Con el registro de las trazas podemos obtener informaci&amp;oacute;n que nos permitir&amp;aacute; descubrir un error o averiguar m&amp;aacute;s f&amp;aacute;cilmente y r&amp;aacute;pidamente porque sucede alg&amp;uacute;n comportamiento que no es como se espera.&lt;/p&gt; 
&lt;p&gt;En Java hay varios sistemas de logging entre los m&amp;aacute;s utilizados est&amp;aacute;n &lt;a href="http://logging.apache.org/log4j/1.2/"&gt;log4j&lt;/a&gt;, &lt;a href="http://logback.qos.ch/"&gt;logback&lt;/a&gt;, &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html"&gt;java.util.logging&lt;/a&gt; y la capa de abstracci&amp;oacute;n &lt;a href="http://www.slf4j.org/"&gt;slf4j&lt;/a&gt; sobre varios de estas librer&amp;iacute;as. En estas librer&amp;iacute;as de logging las trazas se emiten a trav&amp;eacute;s de un logger que normalmente se corresponde con el nombre de la clase en la que se emite la traza. De esta forma las trazas se pueden filtrar por el nivel de importancia de la traza (debug, info, warn, …) y por el nombre del logger de forma que podemos obtener un registro de las trazas emitidas por los loggers que deseamos.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-01-31T16:10:17Z</dc:date>
  </entry>
  <entry>
    <title>Como devolver un archivo con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/11/como-devolver-un-archivo-con-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software-libre" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-30T18:07:53Z</updated>
    <published>2012-11-10T13:20:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" height="133" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt;En esta entrada voy a explicar como enviar un archivo al cliente desde el servidor usando el framework Apache Tapestry. Esto es necesario si por ejemplo nuestra aplicaci&amp;oacute;n necesita generar un informe ya sea en formato txt, excel, pdf, 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/10/crear-un-archivo-zip-con-java.html"&gt;un archivo comprimido&lt;/a&gt; o de cualquier otro tipo. 
&lt;br /&gt; 
&lt;br /&gt;En tapestry el proceso no es muy complicado, tan solo deberemos devolver un objeto que implemente la 
&lt;a href="http://tapestry.apache.org/5.3/apidocs/org/apache/tapestry5/StreamResponse.html"&gt;interfaz StreamResponse&lt;/a&gt; en el manejador de evento (&amp;laquo;event handler&amp;raquo;) que procesa la petici&amp;oacute;n. 
&lt;br /&gt; 
&lt;br /&gt;Aqu&amp;iacute; el c&amp;oacute;digo de parte de un manejador de evento que construye y devuelve un objeto que implementa la interfaz StreamResponse: 
&lt;br /&gt; 
&lt;br /&gt; 
&lt;script src="https://gist.github.com/4051027.js?file=Page.java"&gt;&lt;/script&gt; Una posible implementaci&amp;oacute;n de la clase StreamResponse podr&amp;iacute;a ser la siguiente que podr&amp;iacute;amos reutilizar siempre que tengamos que devolver un archivo:&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/11/como-devolver-un-archivo-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-11-10T13:20:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño State</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-del-patron-de-diseno-state" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-24T21:16:44Z</updated>
    <published>2013-08-24T20:17:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="107" /&gt; 
&lt;/div&gt;Un patr&amp;oacute;n de dise&amp;ntilde;o aplicado adecuadamente para resolver un problema puede ayudar enormemente a simplificar el c&amp;oacute;digo y facilitar el mantenimiento. Si tenemos un c&amp;oacute;digo que es dif&amp;iacute;cil de mantener y entender, hay c&amp;oacute;digo duplicado y no tiene ninguna organizaci&amp;oacute;n puede que aplicar un patr&amp;oacute;n de dise&amp;ntilde;o nos resuelva el problema en gran parte. 
&lt;br /&gt; 
&lt;br /&gt;Hace ya un tiempo comente 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.html"&gt;cuales son los principales patrones de dise&amp;ntilde;o&lt;/a&gt; y hice una entrada con un 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html"&gt;ejemplo del patr&amp;oacute;n de dise&amp;ntilde;o Command&lt;/a&gt;. En esta entrada pondr&amp;eacute; un ejemplo del patr&amp;oacute;n de dise&amp;ntilde;o State. 
&lt;br /&gt; 
&lt;br /&gt;El patr&amp;oacute;n de dise&amp;ntilde;o State nos puede ser de mucha utilidad en los casos que por ejemplo una entidad tenga asociado un grafo de estados con transiciones permitidas y no permitidas entre algunos estados. En funci&amp;oacute;n del estado, sus datos y la transici&amp;oacute;n la entidad puede comportarse de forma diferente. Por ejemplo, supongamos que tenemos una entidad Compra que a lo largo de su vida en la aplicaci&amp;oacute;n pasa por diferentes estados:&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-del-patron-de-diseno-state"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-08-24T20:17:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño Command y programación concurrente en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2012/04/ejemplo-del-patron-de-diseno-command-y-programacion-concurrente-en-java" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-24T21:16:18Z</updated>
    <published>2012-04-13T19:58:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="106" /&gt; 
&lt;/div&gt;En la actualizad los procesadores est&amp;aacute;n aumentando su capacidad de proceso principalmente a base de a&amp;ntilde;adir m&amp;aacute;s n&amp;uacute;cleos, a medida que la tecnolog&amp;iacute;a progrese la programaci&amp;oacute;n concurrente tomar&amp;aacute; m&amp;aacute;s importancia para aumentar el rendimiento y para poder soportar m&amp;aacute;s usuarios en las aplicaciones en el caso de la web. Hay ciertas tareas de las aplicaciones que se prestan a ello y que pueden ejecutarse de manera concurrente, por ejemplo, dos tareas que podr&amp;iacute;an ser son el env&amp;iacute;o de correos electr&amp;oacute;nicos y el precalculado de ciertos datos de una base de datos para mejorar los tiempos de acceso en posteriores consultas. 
&lt;br /&gt; 
&lt;br /&gt;Dependiendo de la aplicaci&amp;oacute;n estas dos tareas probablemente no hace falta que sean inmediatas y es interesante que se produzcan fuera del thread que procesa la petici&amp;oacute;n del usuario, m&amp;aacute;s si se trata de una aplicaci&amp;oacute;n web. Hay que tener en cuenta que el enviar un correo electr&amp;oacute;nico, precalcular datos u otras tareas pueden ser algo que lleve una cantidad de tiempo notable, a partir de unos cientos de milisegundos a m&amp;aacute;s de unos segundos. Si tenemos muchos usuarios en la aplicaci&amp;oacute;n y realizamos tareas como estas en el mismo thread de la petici&amp;oacute;n el tiempo de respuesta percibido por el usuario ser&amp;aacute; bajo, el n&amp;uacute;mero de usuarios concurrentes posibles ser&amp;aacute; menor y escalar en n&amp;uacute;mero de usuarios ser&amp;aacute; m&amp;aacute;s dificil. Vamos a ver como solucionar tareas como estas utilizando la programaci&amp;oacute;n concurrente que ofrece Java desde la versi&amp;oacute;n 1.5 y aplicando el&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2012/04/ejemplo-del-patron-de-diseno-command-y-programacion-concurrente-en-java"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2012-04-13T19:58:00Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño No Operation</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/01/ejemplo-del-patron-de-diseno-no-operation" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-01-24T15:48:40Z</updated>
    <published>2014-01-24T15:48:40Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Hasta el momento ya he escrito alguna entrada sobre los &lt;a href="http://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.html"&gt;patrones de dise&amp;ntilde;o&lt;/a&gt; en general, sobre algunos casos particulares como el &lt;a href="http://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html"&gt;patr&amp;oacute;n de dise&amp;ntilde;o Command&lt;/a&gt; relacionado con la programaci&amp;oacute;n concurrente y sobre el &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.html"&gt;patr&amp;oacute;n de dise&amp;ntilde;o State&lt;/a&gt; para hacer m&amp;aacute;quinas de estados. En esta entrada hablar&amp;eacute; sobre otro patr&amp;oacute;n de dise&amp;ntilde;o, el patr&amp;oacute;n No Operation y de que forma podemos aprovecharlo para resolver alg&amp;uacute;n problema y hacer nuestro c&amp;oacute;digo m&amp;aacute;s simple.&lt;/p&gt; 
&lt;p&gt;En un programa que emplea un lenguaje de programaci&amp;oacute;n orientado a objetos estos est&amp;aacute;n constantemente relacion&amp;aacute;ndose entre si a trav&amp;eacute;s de llamadas a m&amp;eacute;todos y a trav&amp;eacute;s de las referencias que un objeto posee de otros. Sin embargo, es habitual que un determinado m&amp;eacute;todo devuelva un null en vez de una referencia a un objeto. Esta referencia null puede ser un problema ya que nos obliga en el c&amp;oacute;digo hacer una comprobaci&amp;oacute;n antes de poder llamarlo. Si un m&amp;eacute;todo devuelve un null puede dar como resultado un &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/01/ejemplo-del-patron-de-diseno-no-operation"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-01-24T15:48:40Z</dc:date>
  </entry>
  <entry>
    <title>Hola mundo con Apache Tapestry (5.1) en Google App Engine</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2010/06/hola-mundo-con-apache-tapestry-51-en-google-app-engine" />
    <category term="programacion" />
    <category term="tapestry" />
    <category term="java" />
    <category term="google" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-12-01T23:34:17Z</updated>
    <published>2010-06-15T17:24:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: both; text-align: center;"&gt; 
 &lt;img alt="Java" height="110" src="http://4.bp.blogspot.com/_9zOwWD_PYL8/TBeztET3lAI/AAAAAAAAAZ8/BP4VHrwEXTY/s320/java.png" title="Java" /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
 &lt;img alt="Apache Tapestry" src="http://3.bp.blogspot.com/_9zOwWD_PYL8/S-2l0Qxom1I/AAAAAAAAAOg/t4TfjsOh4WQ/s1600/tapestry-banner.gif" title="Apache Tapestry" /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
 &lt;img alt="Google App Engine" src="http://3.bp.blogspot.com/_9zOwWD_PYL8/TBezuYpe1NI/AAAAAAAAAaA/rszdHsAoPTo/s1600/appengine.gif" title="Google App Engine" /&gt; 
&lt;/div&gt; 
&lt;br /&gt;Este fin de semana he estado probando el servicio de hosting 
&lt;a href="http://code.google.com/appengine/"&gt;Google App Engine&lt;/a&gt; para aplicaciones web (GAE para los amigos). Y por el momento me ha dejado muy buen sabor de boca ya que he conseguido subir a la nube con este servicio sin excesibas dificultades la aplicaci&amp;oacute;n 
&lt;a href="http://elblogdepicodev.blogspot.com/2010/05/hola-mundo-con-apache-tapestry-5.html"&gt;Hola Mundo con Tapestry 5.1&lt;/a&gt; que hice en un post anterior. 
&lt;br /&gt; 
&lt;br /&gt;Pero antes de ver el ejemplo vamos a hablar de las principales caracteristicas de este servicio. Dado que es un servicio de hosting lo principal que hay que tener en cuenta es que no estamos trabajando sobre un servidor propio sino que lo hacemos sobre la infraestructura y servidores que utiliza la propia Google para sus servicios y por tanto no podemos hacer cualquier cosa en &amp;eacute;l sino que nos tenemos que limitar a usar las funcionalidades que nos ofrece y dentro de los l&amp;iacute;mites que nos impone el entorno. Pero no nos asustemos, si se puede hacer funcionar un framework como Apache Tapestry dentro de &amp;eacute;l, que no es un framework internamente sencillo, los l&amp;iacute;mites son bastante amplios y con bastante probabilidad podremos trabajar con el framework o librer&amp;iacute;as que m&amp;aacute;s nos gusten. Tambi&amp;eacute;n podemos optar por trabajar directamente con Servlets y JSPs si nuestra aplicaci&amp;oacute;n es sencilla.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2010/06/hola-mundo-con-apache-tapestry-51-en-google-app-engine"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2010-06-15T17:24:00Z</dc:date>
  </entry>
  <entry>
    <title>Integración y transacciones con Spring en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/11/integracion-y-transacciones-con-spring-en-apache-tapestry-" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-11-10T11:41:35Z</updated>
    <published>2013-11-08T20:04:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" height="133" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Spring" src="http://1.bp.blogspot.com/-z3Uf7rZosVk/Un04HYeUy3I/AAAAAAAACq0/JxaGVTEux-E/s1600/spring.png" title="Spring" /&gt; 
&lt;/div&gt;En otra entrada comentaba como hacer transacciones en una base de datos relacional con Apache Tapestry y como mejorar el soporte que ofrece de por si con la anotaci&amp;oacute;n CommitAfter mediante con una 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2013/11/transacciones-en-apache-tapestry.html"&gt;soluci&amp;oacute;n propia que proporciona la anotaci&amp;oacute;n Transactional&lt;/a&gt;. La soluci&amp;oacute;n propia mejora la anotaci&amp;oacute;n CommitAfter y es usable en m&amp;aacute;s casos como cuando dos servicios distintos necesitan colaborar en una transaccion y compartirla. Sin embargo, si el correcto funcionamiento de las transacciones es una parte importante de la aplicaci&amp;oacute;n (y en una aplicaci&amp;oacute;n grande lo ser&amp;aacute;) podemos evaluar si optar por Spring o los EJB en vez de la soluci&amp;oacute;n propia o la anotaci&amp;oacute;n CommitAfter. 
&lt;br /&gt; 
&lt;br /&gt;Unos buenos motivos para optar tanto por Spring como por los EJB es que son soluciones ya desarrolladas con lo que solo tendremos que integrarlo en nuestros proyectos y no tendremos que preocuparnos de mantener nuestra soluci&amp;oacute;n en caso de que tenga errores, adem&amp;aacute;s ambas son ampliamente usadas incluso en proyectos grandes y complejos y est&amp;aacute;n ya probadas lo que es una garant&amp;iacute;a. Entre optar por Spring o los EJB depende de varios factores como puede ser si la aplicaci&amp;oacute;n va ha ser desplegada en un servidor de aplicaciones con soporte para EJB (como&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/11/integracion-y-transacciones-con-spring-en-apache-tapestry-"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-11-08T20:04:00Z</dc:date>
  </entry>
  <entry>
    <title>Transacciones en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/11/transacciones-en-apache-tapestry" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-11-09T16:00:18Z</updated>
    <published>2013-11-01T21:14:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: both; text-align: center;"&gt;&lt;/div&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" height="133" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt;Tapestry no proporciona de por s&amp;iacute; un soporte completo a las aplicaciones que necesitan realizar operaciones en una base de datos relacional de forma transaccional. La dependencia tapestry-hibernate provee la anotaci&amp;oacute;n 
&lt;a href="http://tapestry.apache.org/current/apidocs/org/apache/tapestry5/hibernate/annotations/CommitAfter.html"&gt;@CommitAfter para Hibernate&lt;/a&gt; y la dependencia tapestry-jpa otra del mismo nombre para JPA pero esta anotaci&amp;oacute;n en ambos casos proporciona una funcionalidad muy b&amp;aacute;sica y probablemente no no sirva en casos de uso complejos. Esto ha sido objeto de discusi&amp;oacute;n varias veces en la lista de distribuci&amp;oacute;n de los usuarios 
&lt;a href="http://apache-tapestry-mailing-list-archives.1045711.n5.nabble.com/Transactions-and-AfterCommit-td5722996.html"&gt;[1]&lt;/a&gt; 
&lt;a href="http://apache-tapestry-mailing-list-archives.1045711.n5.nabble.com/Re-Transactions-and-AfterCommit-td5723025.html"&gt;[2]&lt;/a&gt; y el JIRA de Tapestry&amp;nbsp; 
&lt;a href="https://issues.apache.org/jira/browse/TAP5-2159"&gt;[3]&lt;/a&gt;. 
&lt;br /&gt; 
&lt;br /&gt;Con la anotaci&amp;oacute;n CommitAfter si se produce una excepci&amp;oacute;n no controlada (&amp;laquo;unchecked&amp;raquo;) se har&amp;aacute; un rollback de la transacci&amp;oacute;n y, esto es importante, a&amp;uacute;n produciendose una excepci&amp;oacute;n controlada (&amp;laquo;checked&amp;raquo;) se har&amp;aacute; el commit de la transacci&amp;oacute;n y es responsabilidad del programador tratar la excepci&amp;oacute;n adecuadamente. Se puede usar en los m&amp;eacute;todos de los servicios y en los m&amp;eacute;todos manejadores de eventos de los componentes.&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/11/transacciones-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-11-01T21:14:00Z</dc:date>
  </entry>
  <entry>
    <title>Solución al doble envío de peticiones en aplicaciones web</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/10/solucion-al-doble-envio-de-peticiones-en-aplicaciones-web" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <category term="javascript" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2013-11-01T18:29:38Z</updated>
    <published>2013-10-11T17:25:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: both; text-align: center;"&gt;&lt;/div&gt; 
&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Apache Tapestry" height="133" src="http://4.bp.blogspot.com/-OGvCbjBk0zU/TOq7Y6w6wfI/AAAAAAAAAiU/Pfuzt5kkDBQ/s320/tapestry.png" title="Apache Tapestry" width="320" /&gt; 
&lt;/div&gt;Las aplicaciones web pueden recibir informaci&amp;oacute;n del usuario a trav&amp;eacute;s de formularios o en los par&amp;aacute;metros de los enlaces. Los formularios o enlaces pueden desencadenar en la aplicaci&amp;oacute;n diversas acciones. Dada la naturaleza de las aplicaciones web en ciertas ocasiones la latencia de la red o el tiempo que toma procesar la petici&amp;oacute;n un usuario puede tener la oportunidad de hacer clic varias veces en un bot&amp;oacute;n o enlace tambi&amp;eacute;n cuando ve que tarda mucho en obtener la respuesta o simplemente por su desconocimiento al estar acostumbrado a hacer doble clic al trabajar con otras aplicaciones o la interfaz de su sistema operativo. En ocasiones el problema puede producirse tambi&amp;eacute;n haciendo un refrescar con el bot&amp;oacute;n del navegador si no se hace un redirect despu&amp;eacute;s del env&amp;iacute;o del formulario (&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/10/solucion-al-doble-envio-de-peticiones-en-aplicaciones-web"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-10-11T17:25:00Z</dc:date>
  </entry>
</feed>

