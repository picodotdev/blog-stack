<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2014-12-13T13:04:08Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2014-12-13T13:04:08Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>8+ libros para mejorar como programadores</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/12/8-libros-para-mejorar-como-programadores" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="planeta-linux" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software-libre" />
    <category term="planeta-arch-linux" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-12-13T12:00:00Z</updated>
    <published>2014-12-05T16:08:57Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Hay cantidad de informaci&amp;oacute;n para aprender y en diferentes formatos desde libros si queremos tener un conocimiento m&amp;aacute;s profundo sobre alguna materia pasando por presentaciones en &lt;a href="http://es.slideshare.net/"&gt;SlideShare&lt;/a&gt; o &lt;a href="https://speakerdeck.com/"&gt;SpeakerDeck&lt;/a&gt; que a&amp;uacute;n comentando los detalles de forma escueta sirven para conocer los detalles importantes sobre un tema, charlas de hangouts que quiz&amp;aacute; requieran menos esfuerzo y tiempo por nuestra parte que leer un libro como las compartidas en &lt;a href="http://www.desarrolloweb.com/"&gt;desarrolloweb&lt;/a&gt; o en &lt;a href="http://virtualjug.com/"&gt;Virtual JUG&lt;/a&gt;, blogs con art&amp;iacute;culos que explican un detalle espec&amp;iacute;fico (aqu&amp;iacute; hay una buena &lt;a href="http://www.baeldung.com/java-blogs"&gt;colecci&amp;oacute;n de bit&amp;aacute;coras sobre java&lt;/a&gt;), &lt;a href="http://katayunos.com/"&gt;katayunos y merendojos&lt;/a&gt; en los que se practican t&amp;eacute;cnicas de programaci&amp;oacute;n sobre un problema conocido, sencillos, de los que ya se conoce su soluci&amp;oacute;n y que se realizan junto a otras personas, convenciones como &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/12/8-libros-para-mejorar-como-programadores"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-12-05T16:08:57Z</dc:date>
  </entry>
  <entry>
    <title>Ejercicios (katas) para mejorar habilidades de programación practicando</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/12/ejercicios-katas-para-mejorar-habilidades-de-programacion-practicando" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="planeta-linux" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software-libre" />
    <category term="planeta-arch-linux" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-12-13T11:06:06Z</updated>
    <published>2014-12-13T11:06:06Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;La semana pasada escrib&amp;iacute;a sobre &lt;a href="http://picodotdev.github.io/blog-bitix/2014/12/8-plus-libros-para-mejorar-como-programadores/"&gt;algunos libros que leer para ser mejores programadores&lt;/a&gt;, sin embargo, toda esa teor&amp;iacute;a solo sirve cuando se interioriza para usar m&amp;aacute;s tarde en la pr&amp;aacute;ctica. Para interiorizar parte de ese conocimiento hasta el momento creo que no se ha inventado mejor manera que escribiendo c&amp;oacute;digo teniendo en cuenta esos principios.&lt;/p&gt; 
&lt;p&gt;Las katas y dojos son unos ejercicios que se realizan para practicar, son problemas sencillos de los que se conoce la soluci&amp;oacute;n pero lo importante no es resolverlos sino aplicar las lecciones aprendidas y mejorar nuestras habilidades de programaci&amp;oacute;n que posteriormente usemos en los proyectos que trabajamos. Estos ejercicios se suelen realizar con otras personas, en la p&amp;aacute;gina &lt;a href="http://katayunos.com/"&gt;Katayunos – Merendojos&lt;/a&gt; se suelen organizar encuentros en algunas ciudades y fechas, si no nos cuadran las fechas y lugares podemos realizarlas individualmente cuando y donde prefiramos aunque una de las partes que nos perderemos es aprender de las habilidades y formas de trabajar de otras personas.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/12/ejercicios-katas-para-mejorar-habilidades-de-programacion-practicando"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-12-13T11:06:06Z</dc:date>
  </entry>
  <entry>
    <title>Instalar Ruby on Rails en GNU Linux</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/11/instalar-ruby-on-rails-en-gnu-linux" />
    <category term="rails" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="gem" />
    <category term="rvm" />
    <category term="gnu" />
    <category term="ruby" />
    <category term="linux" />
    <category term="debian" />
    <author>
      <name>davidochobits</name>
    </author>
    <updated>2014-11-24T10:12:51Z</updated>
    <published>2014-11-23T19:01:52Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;strong&gt;Ruby&lt;/strong&gt; es un lenguaje de programacion orientado a objetos que est&amp;aacute; muy de moda, por su sencilla programaci&amp;oacute;n, muy intuitiva, y su leve curva de aprendizaje. Entre otras caracter&amp;iacute;sticas est&amp;aacute; que es dinamico y de c&amp;oacute;digo abierto. Busca sobre todo la simplicidad y una sintaxis elegante. De hecho, si no est&amp;aacute;s familiarizado con &amp;eacute;l, enteder&amp;aacute;s perfectamente el c&amp;oacute;digo fuente de un programa.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Ruby on Rails&lt;/strong&gt; es un el &lt;strong&gt;Framework&lt;/strong&gt; m&amp;aacute;s popular para desarrollo web en &lt;strong&gt;Ruby&lt;/strong&gt;,&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;Ruby on Rails&lt;/strong&gt; se divide en tres patas o partes:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;Ruby, el int&amp;eacute;rprete (&lt;strong&gt;IRB&lt;/strong&gt;). Es sin duda lo m&amp;aacute;s esencial. Se trata del software necesario para que pueda interpretar el c&amp;oacute;digo del lenguaje de programaci&amp;oacute;n y ejecutarlo.&lt;/li&gt; 
 &lt;li&gt;El framework &lt;strong&gt;Rails&lt;/strong&gt;.&lt;/li&gt; 
 &lt;li&gt;El servidor web &lt;strong&gt;WEBrick&lt;/strong&gt;, que se instala por defecto junto a &lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/11/instalar-ruby-on-rails-en-gnu-linux"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>davidochobits</dc:creator>
    <dc:date>2014-11-23T19:01:52Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a los Patrones de Diseño</title>
    <link rel="alternate" href="http://www.blogstack.info/post/codecriticon/2014/11/introduccion-a-los-patrones-de-diseno" />
    <category term="patron" />
    <category term="patron-de-diseno" />
    <category term="programacion" />
    <category term="patrones-de-diseno" />
    <author>
      <name>Antonio</name>
    </author>
    <updated>2014-11-11T12:59:20Z</updated>
    <published>2014-11-11T12:59:20Z</published>
    <content type="html">&lt;p&gt;&lt;h2&gt;Historia de los Patrones de Dise&amp;ntilde;o&lt;/h2&gt; 
&lt;p&gt;El t&amp;eacute;rmino patr&amp;oacute;n fue utilizado por primera vez por el arquitecto &lt;a href="http://es.wikipedia.org/wiki/Christopher_Alexander" title="Christopher Alexander"&gt;Christopher Alexander&lt;/a&gt; en el libro &lt;em&gt;“&lt;a href="http://www.amazon.es/Pattern-Language-Buildings-Construction-Environmental/dp/0195019199" title="A Pattern Language: Towns, Buildings, Construction"&gt;A Pattern Language: Towns, Buildings, Construction&lt;/a&gt;“&lt;/em&gt;, donde defini&amp;oacute; una serie de patrones arquitect&amp;oacute;nicos. Alexander define: &lt;/p&gt; 
&lt;blockquote&gt; 
 &lt;p&gt;&lt;em&gt;“Un patr&amp;oacute;n describe un problema que ocurre a menudo, acompa&amp;ntilde;ado por un intento de soluci&amp;oacute;n para el problema.”&lt;/em&gt;&lt;/p&gt; 
&lt;/blockquote&gt; 
&lt;p&gt;&lt;em&gt;Christopher Alexander, 1977&lt;/em&gt;&lt;/p&gt; 
&lt;p&gt;En 1987, &lt;a href="http://en.wikipedia.org/wiki/Ward_Cunningham" title="Ward Cunningham"&gt;Ward Cunningham&lt;/a&gt; y &lt;a href="http://en.wikipedia.org/wiki/Kent_Beck" title="Kent Beck"&gt;Kent Beck&lt;/a&gt; estaban trabajando con Smaltalk, dise&amp;ntilde;ando interfaces de usuario. Para ello, decidieron utilizar alguna de las ideas de Alexander y desarrollaron un peque&amp;ntilde;o lenguaje de patrones que servir&amp;iacute;a de gu&amp;iacute;a a los programadores de Smaltalk. A partir de estas idea escribieron el libro &lt;em&gt;“&lt;a href="http://c2.com/doc/oopsla87.html" title="Using Pattern Languajes for Object-Oriented Programs"&gt;Using Pattern Languajes for Object-Oriented Programs&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/codecriticon/2014/11/introduccion-a-los-patrones-de-diseno"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Antonio</dc:creator>
    <dc:date>2014-11-11T12:59:20Z</dc:date>
  </entry>
  <entry>
    <title>Mi experiencia con Atom</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2014/10/mi-experiencia-con-atom" />
    <category term="programacion" />
    <category term="editor" />
    <category term="atom" />
    <category term="python" />
    <category term="general" />
    <author>
      <name>admin</name>
    </author>
    <updated>2014-10-26T21:52:35Z</updated>
    <published>2014-10-26T21:52:35Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;a href="http://www.josedomingo.org/pledin/wp-content/uploads/2014/10/safe_image.png"&gt;&lt;img src="http://www.josedomingo.org/pledin/wp-content/uploads/2014/10/safe_image-300x155.png" alt="safe_image" width="300" height="155" /&gt;&lt;/a&gt;&lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; es un editor de texto y c&amp;oacute;digo, libre y de c&amp;oacute;digo abierto, desarrollado por &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;. Existen versiones para todos los sistemas operativos, y tiene la posibilidad de a&amp;ntilde;adir m&amp;aacute;s funcionalidades instalando distintos plug-ins escritos en Node.js. La mayor&amp;iacute;a de los paquetes tienen licencias de software libre y son mantenidos y construido por la comunidad de desarrollo. Atom esta basado en &lt;a href="http://en.wikipedia.org/wiki/Chromium_(web_browser)"&gt;Chromium&lt;/a&gt; y escrito en &lt;a href="http://en.wikipedia.org/wiki/CoffeeScript"&gt;CoffeeScript&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Despu&amp;eacute;s de escribir el pasado art&amp;iacute;culo: &lt;a title="Mi experiencia con Sublime Text 2" href="http://www.josedomingo.org/pledin/2014/10/mi-experiencia-con-sublime-text-2/"&gt;Mi experiencia con Sublime Text 2&lt;/a&gt;, y estar usando ese editor de texto durante una temporada, hoy he decidido seguir probando editores de texto y c&amp;oacute;digo y me he encontrado con esta aplicaci&amp;oacute;n desarrollado por GitHub. La versi&amp;oacute;n que he instalado es la 0.139.0, y lo primero que podemos se&amp;ntilde;alar es su similitud en la interfaz a Sublime Text 2 y algunas de las combinaciones de teclas, por ejemplo, CTRL + SHIFT + P, para abrir la ventana de comandos.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2014/10/mi-experiencia-con-atom"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2014-10-26T21:52:35Z</dc:date>
  </entry>
  <entry>
    <title>Qué es y cómo hacer «web scraping» en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/10/que-es-y-como-hacer-web-scraping-en-java" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-10-17T16:00:00Z</updated>
    <published>2014-10-10T19:22:40Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Algunas aplicaciones en internet necesitan intercambiar informaci&amp;oacute;n para hacer alg&amp;uacute;n tipo de integraci&amp;oacute;n. La tendencia actual es proporcionar una API REST o alg&amp;uacute;n tipo de archivo descargable con cierto formato que permita procesarlo de forma automatizada y a las aplicaciones obtener la informaci&amp;oacute;n de forma sencilla y precisa. Sin embargo, hay ocasiones en las que las aplicaciones de las que necesitamos extraer la informaci&amp;oacute;n no proporcionan ni una API REST ni un archivo descargable con lo que no nos queda m&amp;aacute;s remedio que extraer los datos de la propias p&amp;aacute;ginas web inspeccionando el c&amp;oacute;digo HTML, esto en ingl&amp;eacute;s se le conoce como &lt;a href="http://es.wikipedia.org/wiki/Web_scraping"&gt;&amp;laquo;web scraping&amp;raquo;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;En este art&amp;iacute;culo explicar&amp;eacute; como hacer web &amp;laquo;scraping&amp;raquo; usando la librer&amp;iacute;a &lt;a href="http://jsoup.org/"&gt;jsoup&lt;/a&gt; y usando el lenguaje de programaci&amp;oacute;n Java. jsoup proporciona una &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/10/que-es-y-como-hacer-web-scraping-en-java"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-10-10T19:22:40Z</dc:date>
  </entry>
  <entry>
    <title>Cómo filtrar contenido HTML de forma segura</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/10/como-filtrar-contenido-html-de-forma-segura" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-10-17T14:53:25Z</updated>
    <published>2014-10-17T14:53:25Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Algunos sitios y aplicaciones pueden tener la necesidad de &lt;a href="http://picodotdev.github.io/blog-bitix/2014/10/que-es-y-como-hacer-web-scraping-en-java/"&gt;&amp;laquo;scrapear&amp;raquo; el contenido de sitios web&lt;/a&gt; para extraer informaci&amp;oacute;n de ellos y posteriormente usarla de alguna forma. El contenido &amp;laquo;scrapeado&amp;raquo; o obtenido de una fuente externa debe ser filtrado, si no es filtrado y posteriormente es servido a los usuarios puede envi&amp;aacute;rseles principalmente scripts con contenido malicioso (provocando un ataque &lt;a href="http://en.wikipedia.org/wiki/Cross-site_scripting"&gt;cross-site scripting, XSS&lt;/a&gt;) o causar una desmaquetaci&amp;oacute;n al visualizar el contenido. A la hora de implementar la agregaci&amp;oacute;n de contenido de forma segura en &lt;a href="http://www.blogstack.info"&gt;Blog Stack&lt;/a&gt;, contenido obtenido de una fuente RSS o Atom pero que en esencia es HTML he usado la librer&amp;iacute;a &lt;a href="http://jsoup.org/"&gt;jsoup&lt;/a&gt;, de tal forma que solo el contenido considerado seguro o confiable de los art&amp;iacute;culos sea agregado.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/10/como-filtrar-contenido-html-de-forma-segura"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-10-17T14:53:25Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo del patrón de diseño State</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-del-patron-de-diseno-state" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-10-16T07:24:55Z</updated>
    <published>2013-08-24T20:17:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt; 
 &lt;img alt="Java" height="200" src="http://2.bp.blogspot.com/-hC2-QuC33AU/TBeztET3lAI/AAAAAAAAAZ8/EzZnNZw5do0/s200/java.png" title="Java" width="107" /&gt; 
&lt;/div&gt;Un patr&amp;oacute;n de dise&amp;ntilde;o aplicado adecuadamente para resolver un problema puede ayudar enormemente a simplificar el c&amp;oacute;digo y facilitar el mantenimiento. Si tenemos un c&amp;oacute;digo que es dif&amp;iacute;cil de mantener y entender, hay c&amp;oacute;digo duplicado y no tiene ninguna organizaci&amp;oacute;n puede que aplicar un patr&amp;oacute;n de dise&amp;ntilde;o nos resuelva el problema en gran parte. 
&lt;br /&gt; 
&lt;br /&gt;Hace ya un tiempo comente 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.html"&gt;cuales son los principales patrones de dise&amp;ntilde;o&lt;/a&gt; y hice una entrada con un 
&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html"&gt;ejemplo del patr&amp;oacute;n de dise&amp;ntilde;o Command&lt;/a&gt;. En esta entrada pondr&amp;eacute; un ejemplo del patr&amp;oacute;n de dise&amp;ntilde;o State. 
&lt;br /&gt; 
&lt;br /&gt;El patr&amp;oacute;n de dise&amp;ntilde;o State nos puede ser de mucha utilidad en los casos que por ejemplo una entidad tenga asociado un grafo de estados con transiciones permitidas y no permitidas entre algunos estados. En funci&amp;oacute;n del estado, sus datos y la transici&amp;oacute;n la entidad puede comportarse de forma diferente. Por ejemplo, supongamos que tenemos una entidad Compra que a lo largo de su vida en la aplicaci&amp;oacute;n pasa por diferentes estados:&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdepicodev/2013/08/ejemplo-del-patron-de-diseno-state"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2013-08-24T20:17:00Z</dc:date>
  </entry>
  <entry>
    <title>Mi experiencia con Sublime Text 2</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2014/10/mi-experiencia-con-sublime-text-2" />
    <category term="programacion" />
    <category term="editor" />
    <category term="sublime-text" />
    <category term="python" />
    <category term="general" />
    <author>
      <name>admin</name>
    </author>
    <updated>2014-10-15T20:50:26Z</updated>
    <published>2014-10-15T20:50:26Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;a href="http://www.josedomingo.org/pledin/wp-content/uploads/2014/10/sublime.jpeg"&gt;&lt;img src="http://www.josedomingo.org/pledin/wp-content/uploads/2014/10/sublime.jpeg" alt="sublime" width="144" height="144" /&gt;&lt;/a&gt;Este a&amp;ntilde;o imparto la asignatura de &lt;a&gt;Lenguajes de Marcas&lt;/a&gt; en el ciclo formativo de Administraci&amp;oacute;n de Sistemas Inform&amp;aacute;ticos en el &lt;a href="http://dit.gonzalonazareno.org"&gt;IES Gonzalo Nazareno&lt;/a&gt;, y en esta primera evaluaci&amp;oacute;n estudiamos fundamentos de programaci&amp;oacute;n con Python.&lt;/p&gt; 
&lt;p&gt;Por lo tanto es necesario que los alumnos escojan un buen editor de texto que facilite la labor de programar. Aunque mi compa&amp;ntilde;ero &lt;a href="https://twitter.com/alberto_molina"&gt;@alberto_molina&lt;/a&gt; me ha dicho que &lt;a href="http://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt; es un buen editor de texto y me ha insistido en sus bondades, soy de la opini&amp;oacute;n de que la curva de aprendizaje es elevada y que como soy un poco flojo, he decidido usar un editor de texto, en apariencia, m&amp;aacute;s simple: &lt;a href="http://www.sublimetext.com/2"&gt;Sublime Text 2&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;Sublime Text es un editor de texto y editor de c&amp;oacute;digo fuente est&amp;aacute; escrito en C++ y Python para los plugins. Se distribuye de forma gratuita, sin embargo no es software libre o de c&amp;oacute;digo abierto, se puede obtener una licencia para su uso ilimitado, pero el no disponer de &amp;eacute;sta no genera ninguna limitaci&amp;oacute;n m&amp;aacute;s all&amp;aacute; de una alerta cada cierto tiempo.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2014/10/mi-experiencia-con-sublime-text-2"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2014-10-15T20:50:26Z</dc:date>
  </entry>
  <entry>
    <title>Programando en Free Pascal con Lazarus</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/10/programando-en-free-pascal-con-lazarus" />
    <category term="pascal" />
    <category term="blog-stack" />
    <category term="programas" />
    <category term="programacion" />
    <category term="freepascal" />
    <category term="lazarus" />
    <author>
      <name>ochobitshacenunbyte</name>
    </author>
    <updated>2014-10-09T08:14:02Z</updated>
    <published>2014-10-09T07:53:59Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;a href="http://www.ochobitshacenunbyte.com/wp-content/uploads/2014/10/800px-salixos141.png"&gt;&lt;img src="http://www.ochobitshacenunbyte.com/wp-content/uploads/2014/10/800px-salixos141.png" alt="800px-salixos141" width="800" height="500" /&gt;&lt;/a&gt;&lt;/p&gt; 
&lt;p&gt;De entre los primeros lenguajes de programaci&amp;oacute;n que escuch&amp;eacute; cuando me inici&amp;eacute; en eso de los ordenadores o computaroras, all&amp;aacute; por finales de los ochenta, se encontraba &lt;strong&gt;Pascal&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;De hecho &lt;strong&gt;Pascal&lt;/strong&gt; se cre&amp;oacute; a finales de a&amp;ntilde;os sesenta , y lleg&amp;oacute; a ser bastante popular d&amp;eacute;cadas despu&amp;eacute;s. Pensado para educar los alumnos finalmente acab&amp;oacute; saliendo de las aulas.&lt;/p&gt; 
&lt;p&gt;Pascal es un lenguaje de programaci&amp;oacute;n estructurado, muy diferente de lenguajes como &lt;strong&gt;Java&lt;/strong&gt; o &lt;strong&gt;C#&lt;/strong&gt;, que son orientados a objetos. Sus variables deben de ser declaradas antes de utilizarlas, como en&lt;strong&gt; C&lt;/strong&gt;. Los programas est&amp;aacute;n divididos en porciones o procedimientos, al igual que &lt;strong&gt;Cobol&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;Hoy en d&amp;iacute;a est&amp;aacute; bastante en desuso, &amp;iquest;o no? Por lo que leo se usa sobre todo en las escuelas, que a fin de cuentas fue su intenci&amp;oacute;n original, para ense&amp;ntilde;ar programaci&amp;oacute;n.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2014/10/programando-en-free-pascal-con-lazarus"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>ochobitshacenunbyte</dc:creator>
    <dc:date>2014-10-09T07:53:59Z</dc:date>
  </entry>
  <entry>
    <title>Generar URLs semánticas y amigables</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/10/generar-urls-semanticas-y-amigables" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-10-05T01:30:00Z</updated>
    <published>2014-10-03T18:14:18Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;En algunas web las urls incluyen el identificativo del objeto de la base de datos a partir de cual se muestra el contenido principal de la p&amp;aacute;gina, en &lt;a href="http://www.blogstack.info"&gt;Blog Stack&lt;/a&gt; esto podr&amp;iacute;a ser un art&amp;iacute;culo. Esto genera urls &amp;laquo;feas&amp;raquo; de cara al usuario y al &lt;a href="http://en.wikipedia.org/wiki/Search_engine_optimization"&gt;SEO&lt;/a&gt; de los buscadores adem&amp;aacute;s de exponer cierta informaci&amp;oacute;n de la base de datos que probablemente no interese a nadie excepto al desarrollador de la p&amp;aacute;gina. En este art&amp;iacute;culo voy a explicar una forma de generar &lt;a href="http://es.wikipedia.org/wiki/URL_sem%C3%A1ntica"&gt;urls sem&amp;aacute;nticas&lt;/a&gt;, &amp;laquo;bonitas&amp;raquo; o amigables de cara al usuario y al SEO para los buscadores y como lo he implementado en un ejemplo real como es Blog Stack.&lt;/p&gt; 
&lt;p&gt;Lo primero que debemos conseguir es que las urls sean &amp;uacute;nicas para cualquier p&amp;aacute;gina de la web, por tanto, en la url deberemos incluir tanta informaci&amp;oacute;n como sea necesaria pero al mismo tiempo la m&amp;iacute;nima para hacerlas &amp;uacute;nicas y que nos permitan identificar de forma unequ&amp;iacute;voca el contenido a mostrar o el objeto que nos permite obtener la informaci&amp;oacute;n a visualizar en la p&amp;aacute;gina, esta informaci&amp;oacute;n formar&amp;aacute; el denominado slug. En el caso de Blog Stack las urls &amp;laquo;bonitas&amp;raquo; se emplean en este momento en dos sitios, para los art&amp;iacute;culos y para las etiquetas. La informaci&amp;oacute;n m&amp;iacute;nima para un art&amp;iacute;culo es el nombre de la fuente, el a&amp;ntilde;o, el mes y el t&amp;iacute;tulo, para las etiquetas es simplemente el nombre de la etiqueta. Este es un desglose de las partes que forman una url.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/10/generar-urls-semanticas-y-amigables"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-10-03T18:14:18Z</dc:date>
  </entry>
  <entry>
    <title>Configuración usando código Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/09/configuracion-usando-codigo-java" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-09-26T17:18:20Z</updated>
    <published>2014-09-26T17:18:20Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;En las dos &amp;uacute;ltimas entradas he explicado &lt;a href="http://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/"&gt;como compilar un archivo de c&amp;oacute;digo fuente Java desde una aplicaci&amp;oacute;n&lt;/a&gt; y como cargar esa clase compilada de forma din&amp;aacute;mica para ser utilizada en un programa, la segunda entrada trataba el &lt;a href="http://picodotdev.github.io/blog-bitix/2014/09/monitorizar-archivos-con-java/"&gt;como monitorizar un directorio o archivo para ver si han tenido cambios&lt;/a&gt; con la nueva API que a partir de Java 7 disponemos.&lt;/p&gt; 
&lt;p&gt;En esta entrada quiero explicar un ejemplo de como aprovechar estas dos funcionalidades diferentes en un caso pr&amp;aacute;ctico y que nos puede ser &amp;uacute;til en alg&amp;uacute;n caso. La idea del ejemplo es definir la configuraci&amp;oacute;n de una aplicaci&amp;oacute;n como podr&amp;iacute;a ser una aplicaci&amp;oacute;n web en un archivo de c&amp;oacute;digo fuente Java y que cuando se produjese alg&amp;uacute;n cambio se recargase de forma din&amp;aacute;mica.&lt;/p&gt; 
&lt;p&gt;Algunas ventajas de definir la configuraci&amp;oacute;n de la aplicaci&amp;oacute;n de esta manera son las siguientes:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/09/configuracion-usando-codigo-java"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-09-26T17:18:20Z</dc:date>
  </entry>
  <entry>
    <title>Monitorizar archivos con Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/09/monitorizar-archivos-con-java" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-09-20T07:27:35Z</updated>
    <published>2014-09-20T07:27:35Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Java a partir de la versi&amp;oacute;n 7 del JDK ofrece el soporte para recibir notificaciones de cambios en el sistema de archivos sin tener que estar monitoriz&amp;aacute;ndolos constantemente en busca de actividad. No tener que estar monitorizando los archivos de &lt;a href="http://es.wikipedia.org/wiki/Polling"&gt;forma &amp;laquo;polling&amp;raquo;&lt;/a&gt; para buscar cambios adem&amp;aacute;s de hacer que el c&amp;oacute;digo sea m&amp;aacute;s sencillo desde el punto de vista de la programaci&amp;oacute;n hace que no se malgasten recursos del sistema si los cambios son espor&amp;aacute;dicos.&lt;/p&gt; 
&lt;p&gt;Para ofrecer esta funcionalidad y a partir de Java 7 hay disponibles unas pocas nuevas clases dentro de lo que se conoce como la &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/nio/package-summary.html"&gt;nueva API de entrada y salida (NIO)&lt;/a&gt; que sustituye al m&amp;eacute;todo tradicional de entrada y salida con las clases del paquete &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/io/package-summary.html"&gt;java.io&lt;/a&gt; entre otras cosas para trabajar con el sistema de archivos.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/09/monitorizar-archivos-con-java"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-09-20T07:27:35Z</dc:date>
  </entry>
  <entry>
    <title>Compilar y cargar de forma dinámica una clase Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-09-13T22:00:00Z</updated>
    <published>2014-09-12T17:49:55Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Desde la versi&amp;oacute;n 1.6 del JDK disponemos de una API para acceder al compilador desde un programa Java. En el ejemplo de este art&amp;iacute;culo utilizar&amp;eacute; varias clases de esa API para conseguir compilar un archivo con la definici&amp;oacute;n de una clase Java y posteriormente instanciarla y usarla. En posteriores art&amp;iacute;culos comentar&amp;eacute; un ejemplo pr&amp;aacute;ctico y muy &amp;uacute;til con el que podemos sacar provecho de esta funcionalidad.&lt;/p&gt; 
&lt;p&gt;Las clases que necesitaremos de esa API son:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="http://docs.oracle.com/javase/7/docs/api/javax/tools/JavaCompiler.html"&gt;JavaCompiler&lt;/a&gt; que es la interfaz para acceder al compilador desde un programa Java.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://docs.oracle.com/javase/7/docs/api/javax/tools/JavaFileManager.html"&gt;JavaFileManager&lt;/a&gt; que es una abstracci&amp;oacute;n para gestionar los archivos fuente y las clases. Usaremos uno propio llamado ClassFileManager.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://docs.oracle.com/javase/7/docs/api/javax/tools/SimpleJavaFileObject.html"&gt;SimpleJavaFileObject&lt;/a&gt; clase que contiene el c&amp;oacute;digo fuente Java.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Y tambi&amp;eacute;n necesitaremos redefinir algunas:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-09-12T17:49:55Z</dc:date>
  </entry>
  <entry>
    <title>Actualización del libro PlugIn Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/08/actualizacion-del-libro-plugin-tapestry" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <category term="tapestry" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-08-29T22:16:10Z</updated>
    <published>2014-08-29T22:16:10Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Hace un poco m&amp;aacute;s de una a&amp;ntilde;o publiqu&amp;eacute; el &lt;a href="http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/"&gt;libro PlugIn Tapestry&lt;/a&gt; que como su nombre ya adelanta versa sobre el framework &lt;a href="http://tapestry.apache.org"&gt;Apache Tapestry&lt;/a&gt; para el desarrollo de aplicaciones y p&amp;aacute;ginas web con Java. Casi 300 p&amp;aacute;ginas de documentaci&amp;oacute;n que describen este framework, como usarlo y va m&amp;aacute;s all&amp;aacute; explicando como realizar algunas de las tareas comunes que es necesario hacer en casi todas las aplicaciones web independientemente del framework que elijamos pero en este caso visto desde el punto de vista de Tapestry.&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry.png" title="Libro sobre Apache Tapestry"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry-thumb.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;En esta actualizaci&amp;oacute;n he revisado cap&amp;iacute;tulos como el Inicio r&amp;aacute;pido para empezar a desarrollar en unos pocos minutos, la secci&amp;oacute;n que trata sobre Plantillas para dar a las p&amp;aacute;ginas un aspecto com&amp;uacute;n, la secci&amp;oacute;n que trata sobre unas Convenciones para los archivos de literales, ampliada la secci&amp;oacute;n de Principios en la que se detalla cuales son las ideas y objetivos por los que se rige el framework, tambi&amp;eacute;n reescrita la secci&amp;oacute;n de Integraci&amp;oacute;n con Spring, una de las librer&amp;iacute;as m&amp;aacute;s usadas y que facilita el desarrollo enormemente.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/08/actualizacion-del-libro-plugin-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-08-29T22:16:10Z</dc:date>
  </entry>
  <entry>
    <title>Doble barra de botones con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/08/doble-barra-de-botones-con-apache-tapestry" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <category term="tapestry" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-08-29T11:04:52Z</updated>
    <published>2014-08-29T11:04:52Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Por motivos de usabiliad en algunas p&amp;aacute;ginas se incluyen dos barra de botones, una antes de una larga secci&amp;oacute;n y otra despu&amp;eacute;s. El motivo de la doble barra de botones inicial es que no sea necesario hacer &amp;laquo;scroll&amp;raquo; hasta el final de la p&amp;aacute;gina para acceder a los botones y realizar la acci&amp;oacute;n que permitan. Por el contrario, inlcuir la barra de botones al final de la p&amp;aacute;gina permite que una vez seleccionados los elementos o revisado el contenido de la secci&amp;oacute;n hacer disponibles las acciones que es probable que se quieran realizar.&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/39/doble-barra-botones.png" title="Doble barra de botones"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/39/doble-barra-botones-thumb.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Dependiendo del framework web que utilicemos podremos hacerlo de una o varias formas pero de lo que estamos seguros es que copiar y pegar haciendo que el c&amp;oacute;digo est&amp;eacute; duplicado no es una buena idea por los problemas de mantenimiento que puede suponer. Pero crear una peque&amp;ntilde;a plantilla o archivo exclusivo para incluir la barra de botones tampoco es la soluci&amp;oacute;n ideal, &amp;iquest;por que? pues porque creando un archivo espec&amp;iacute;fico con la botonera puede que nos ocasione un problema que denominar&amp;eacute; de &amp;laquo;microgesti&amp;oacute;n&amp;raquo;, es decir, nos obliga a crear un mont&amp;oacute;n de peque&amp;ntilde;os archivos peque&amp;ntilde;itos y hacer referencia o utilizar el mecanismo de inclusi&amp;oacute;n que dispongamos para usar el contenido en unos de otros. En una aplicaci&amp;oacute;n grande esta microgesti&amp;oacute;n si nos vemos obligados a ella puede llegar a ser molesta al desarrollar cuanto menos.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/08/doble-barra-de-botones-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-08-29T11:04:52Z</dc:date>
  </entry>
  <entry>
    <title>Forzar el uso del protocolo https en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <category term="tapestry" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-08-22T09:09:23Z</updated>
    <published>2014-08-22T09:09:23Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;El &lt;a href="http://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol_Secure"&gt;protocolo seguro https&lt;/a&gt; hace que los datos que viajan entre el servidor y el cliente a trav&amp;eacute;s de internet est&amp;eacute;n cifrados de modo que nadie m&amp;aacute;s pueda saber cual es es la informaci&amp;oacute;n intercambiada ni se pueda alterar sin el conocimiento entre las dos partes. Estas propiedades nos son de inter&amp;eacute;s para ciertas partes de una aplicaci&amp;oacute;n o en algunos casos la aplicaci&amp;oacute;n entera. &amp;iquest;Cuales son estos casos? Son aquellos en los que queramos garantizar una mayor seguridad, estos pueden ser para proteger usuarios y contrase&amp;ntilde;as de autenticaci&amp;oacute;n para iniciar sesi&amp;oacute;n, ciertos datos sensibles como datos personales, datos de tarjetas de cr&amp;eacute;dito, … evitando que una tercera parte los obtenga y los utilice para su provecho propio y supongan un problema de seguridad en la aplicaci&amp;oacute;n.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-08-22T09:09:23Z</dc:date>
  </entry>
  <entry>
    <title>Sabias que el uso de la annotation override nos advierte de errores en el código</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2014/08/sabias-que-el-uso-de-la-annotation-override-nos-advierte-de-errores-en-el-codigo" />
    <category term="annotation" />
    <category term="sabias-que" />
    <category term="programacion" />
    <category term="override" />
    <category term="java" />
    <category term="java-se" />
    <author>
      <name>admin</name>
    </author>
    <updated>2014-08-15T10:23:23Z</updated>
    <published>2014-08-15T10:21:49Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Seguramente muchos de ustedes se habr&amp;aacute;n preguntado &amp;iquest;que hace? o &amp;iquest;para qu&amp;eacute; sirve esa&amp;nbsp;@Override que nos coloca autom&amp;aacute;ticamente el IDE al momento de implementar una interfaz?&amp;nbsp;&amp;iquest;Tendr&amp;aacute; alg&amp;uacute;n beneficio?.&lt;/p&gt; 
&lt;p&gt;Bueno para aquellos con esa interrogante les traigo la respuesta.&lt;/p&gt; 
&lt;p&gt;Pues si, si nos da un beneficio &amp;nbsp;cuando codificamos y consiste en advertirnos de posibles errores de l&amp;oacute;gica o compilaci&amp;oacute;n en los siguientes casos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Cuando no&amp;nbsp;estemos sobrescribiendo o implementando ning&amp;uacute;n m&amp;eacute;todo&amp;nbsp;de la interfaz o superclase.&lt;/li&gt; 
 &lt;li&gt;Cuando nos hemos equivocado en la firma del m&amp;eacute;todo a sobrescribir.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&amp;nbsp;Es por estos beneficios que&amp;nbsp;deber&amp;iacute;amos asumirlo (sobretodo aquellos que venimos de la vieja escuela de Java 1.1, 1.2 o 1.4) como una convenci&amp;oacute;n al momento de programar. Ahora bien vayamos a un ejemplo para ver de lo que estamos hablando.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2014/08/sabias-que-el-uso-de-la-annotation-override-nos-advierte-de-errores-en-el-codigo"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2014-08-15T10:21:49Z</dc:date>
  </entry>
  <entry>
    <title>Usar Apache Tapestry en una aplicación «standalone»</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <category term="tapestry" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-31T11:06:58Z</updated>
    <published>2014-07-31T11:06:58Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="http://tapestry.apache.org"&gt;Apache Tapestry&lt;/a&gt; es un framework de desarrollo para aplicaciones o p&amp;aacute;ginas web en el que habitualmente se emplea el lenguaje Java y se despliega en un servidor de aplicaciones como entorno de ejecuci&amp;oacute;n. Pero Tapestry es una pieza de software que se compone de diferentes partes algunas de las cuales pueden ser utilizadas fuera del contexto de una aplicaci&amp;oacute;n web. Este es el caso del contenedor de dependencias que proporciona &lt;a href="http://en.wikipedia.org/wiki/Inversion_of_control"&gt;IoC&lt;/a&gt; (IoC, &amp;laquo;Inversion of Control&amp;raquo;) en Tapestry, podemos usarlo en una aplicaci&amp;oacute;n &amp;laquo;standalone&amp;raquo;, es decir, en un programa que se inicia con el t&amp;iacute;pico &amp;laquo;public static void main(String[] args)&amp;raquo; de las aplicaciones Java.&lt;/p&gt; 
&lt;p&gt;El contenedor de dependencias de Tapestry tiene algunas propiedades interesantes como que dos servicios pueden ser mutuamente dependientes y que se puede contribuir configuraci&amp;oacute;n a cualquier servicio para cambiar en cierta medida su comportamiento adem&amp;aacute;s de otras caracter&amp;iacute;sticas que explico m&amp;aacute;s en detalle en el libro &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-31T11:06:58Z</dc:date>
  </entry>
  <entry>
    <title>Servir recursos estáticos desde un CDN en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <category term="tapestry" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-26T19:00:00Z</updated>
    <published>2014-07-26T10:35:50Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Un &lt;a href="http://en.wikipedia.org/wiki/Content_delivery_network"&gt;Content Delivery Network&lt;/a&gt; (CDN) no es m&amp;aacute;s que un servidor, servidores o servicio dedicado a servir el contenido est&amp;aacute;tico o actuar de cache para los clientes. Alguno de los motivos por los que podr&amp;iacute;amos querer usar un CDN en una aplicaci&amp;oacute;n son:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Algunos servicios CDN est&amp;aacute;n repartidos geogr&amp;aacute;ficamente por el mundo de modo que el contenido sea servido de un lugar m&amp;aacute;s cercano al usuario esto hace que el tiempo que tarda en cargar un p&amp;aacute;gina o servirse el contenido sea menor.&lt;/li&gt; 
 &lt;li&gt;Descargar la tarea de servir al menos parte del contenido de la aplicaci&amp;oacute;n al CDN har&amp;aacute; que no nos tengamos que preocupar de tener la capacidad para servirlo. Cuando se cargar una p&amp;aacute;gina se hacen varias peticiones al servidor para obtener el contenido como el html, im&amp;aacute;genes, estilos, … haciendo que los contenidos est&amp;aacute;ticos sean servidos por el CDN har&amp;aacute; que el servidor tenga menos carga, dependiendo del n&amp;uacute;mero de usuarios de la aplicaci&amp;oacute;n o los picos de tr&amp;aacute;fico notaremos una mejor&amp;iacute;a.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-26T10:35:50Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a la clase Objects</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2014/07/introduccion-a-la-clase-objects" />
    <category term="util" />
    <category term="class" />
    <category term="objects" />
    <category term="java-util-objects" />
    <category term="programacion" />
    <category term="java" />
    <category term="java-7" />
    <category term="java-se" />
    <author>
      <name>admin</name>
    </author>
    <updated>2014-07-24T22:02:25Z</updated>
    <published>2014-07-24T22:01:01Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Hace algunos meses atr&amp;aacute;s estudiando para la certificaci&amp;oacute;n de java 7, me entere de la existencia de la clase &lt;a title="clase Objects" href="http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html"&gt;java.util.Objects&lt;/a&gt;, esta es una clase utilitaria compuesta en su totalidad de m&amp;eacute;todos est&amp;aacute;ticos que&amp;nbsp;aunque lucen bastante simples, si que resultan de ayuda ahorr&amp;aacute;ndonos algo de trabajo (tedioso), entre estos encontramos algunos para realizar comparaciones as&amp;iacute; como para el calculo del hash de un objeto, o&amp;nbsp;tambi&amp;eacute;n&amp;nbsp;para evitar asignar null a objetos.&lt;/p&gt; 
&lt;p&gt;En este caso creo que no hay mejor forma que verlo en el c&amp;oacute;digo para que podamos apreciar su utilidad.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt; 
&lt;pre&gt;import java.util.Objects;

public class ObjectsClassExample {
	
	static class Persona {
		
		private String nombre;
		private int edad;
		
		Persona() {
		}
		
		Persona(String nombre, int edad) {
			this.nombre = Objects.requireNonNull(nombre); //Arroja NullPointerException
			this.edad = edad;							// si el parametro nombre es null
		}

		public String getNombre() {
			return nombre;
		}

		public void setNombre(String nombre) {
						//Arroja NullPointerException si el parametro nombre es null
						//siendo este el mensaje de la exception
			this.nombre = Objects.requireNonNull(nombre, &amp;quot;Es estrictamente necesario pasar un Nombre&amp;quot;);
		}

		public int getEdad() {
			return edad;
		}

		public void setEdad(int edad) {
			this.edad = edad;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			
			Persona persona = (Persona)obj;
			if (edad != persona.edad)
				return false;
			if (!Objects.equals(this.nombre, persona.nombre)) //Compara si ambos objetos son iguales
				return false;
			
			return true;
		}
		
		@Override
		public int hashCode() {
			return Objects.hash(nombre, edad); //calcula el valor hash del conjunto de valores
												//en nuestro caso los atributos nombre y edad
		}
		
		@Override
		public String toString() { //Si el atributo nombre es null entonces 
									//muestra la cadena &amp;quot;Sin Nombre&amp;quot;
			return &amp;quot;{Nombre: &amp;quot; + Objects.toString(nombre, &amp;quot;Sin Nombre&amp;quot;) + &amp;quot; , Edad: &amp;quot; + edad;
		}
		
	}

	public static void main(String[] args) {
		
		Persona p1 = new Persona ();
		Persona p2 = new Persona (&amp;quot;Maria&amp;quot;, 20);
		
		System.out.println(&amp;quot;p1.toString(): &amp;quot; + p1);
		System.out.println(&amp;quot;p2.toString(): &amp;quot; + p2);
		System.out.println(&amp;quot;p1.equals(p2): &amp;quot; + p1.equals(p2));
		System.out.println(&amp;quot;p1.hashCode(): &amp;quot; + p1.hashCode());
		System.out.println(&amp;quot;p2.hashCode(): &amp;quot; + p2.hashCode());
		
		p1.setNombre(&amp;quot;Maria&amp;quot;);
		p1.setEdad(20);
		
		System.out.println(&amp;quot;Despues de asignar valores  -&amp;amp;gt; p1.equals(p2): &amp;quot; + p1.equals(p2));
		System.out.println(&amp;quot;Despues de asignar valores  -&amp;amp;gt;  p1.hashCode(): &amp;quot; + p1.hashCode());
		
		try {
			p1 = new Persona(null, 20);
		} catch (NullPointerException e) {
			System.err.println(&amp;quot;Mensaje: &amp;quot; + e.getMessage());
		}
		
		try {
			p2.setNombre(null);
		} catch (NullPointerException e) {
			System.err.println(&amp;quot;Mensaje: &amp;quot; + e.getMessage());
		}
	}

}&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2014/07/introduccion-a-la-clase-objects"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2014-07-24T22:01:01Z</dc:date>
  </entry>
  <entry>
    <title>Anotación Cached de Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/anotacion-cached-de-apache-tapestry" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <category term="tapestry" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-19T19:00:00Z</updated>
    <published>2014-07-18T19:30:20Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Como he comentado en un art&amp;iacute;culo anterior sobre los &lt;a href="http://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/"&gt;modelos push y pull empleados en los motores de plantillas&lt;/a&gt; donde comentaba algunas diferencias entre ellos, en el modelo pull es la vista la que pide los datos al controlador y no el controlador el que proporciona los datos a la vista como se hace en el modelo push. Un problema que puede plantear el que la vista pida los datos al controlador es que si la devoluci&amp;oacute;n de los datos solicitados son costosos en tiempo del c&amp;aacute;lculo, carga para el sistema en CPU o memoria, o intensivos en entrada/salida de disco o red y se piden varias veces puede suponer como resultado que el tiempo empleado para generar la p&amp;aacute;gina sea elevado o la aplicaci&amp;oacute;n consuma recursos innecesarios.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; que emplea el modelo pull dispone de la &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/anotacion-cached-de-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-18T19:30:20Z</dc:date>
  </entry>
  <entry>
    <title>Plantillas en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/plantillas-en-apache-tapestry" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <category term="tapestry" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-11T18:54:34Z</updated>
    <published>2014-07-11T18:54:34Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Una p&amp;aacute;gina web est&amp;aacute; formada por un conjunto de p&amp;aacute;ginas enlazadas entre ellas. Cada p&amp;aacute;gina est&amp;aacute; formado por un html diferente pero normalmente todas las p&amp;aacute;ginas de una misma web comparten el mismo aspecto variando solo una secci&amp;oacute;n donde est&amp;aacute; el contenido propio de la p&amp;aacute;gina. La cabecera de la p&amp;aacute;gina, el pie de la p&amp;aacute;gina o los men&amp;uacute;s de navegaci&amp;oacute;n suelen estar presentes en todas las p&amp;aacute;ginas de la web y suelen ser los mismos.&lt;/p&gt; 
&lt;p&gt;En este art&amp;iacute;culo voy a explicar como crear un componente que nos de a todas las p&amp;aacute;ginas un aspecto com&amp;uacute;n de una aplicaci&amp;oacute;n usando apache Tapestry como framework web de tal forma que esa parte com&amp;uacute;n no est&amp;eacute; duplicada en la aplicaci&amp;oacute;n y pueda ser reutilizada f&amp;aacute;cilmente. En el caso de &lt;a href="http://www.blogstack.info"&gt;Blog Stack&lt;/a&gt; las p&amp;aacute;ginas se componen de las siguientes partes.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/plantillas-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-11T18:54:34Z</dc:date>
  </entry>
  <entry>
    <title>Arquitectura y hospedaje de Blog Stack</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/arquitectura-y-hospedaje-de-blog-stack" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-10T23:00:00Z</updated>
    <published>2014-05-16T19:21:55Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/blogstack.png" alt="Blog Stack" title="Blog Stack" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Normalmente en esta bit&amp;aacute;cora suelo poner ejemplos para explicar como funciona una determinada herramienta, son ejemplos que podr&amp;iacute;an aprovecharse para algo productivo pero para mantenerlos simples por si mismos no suelen serlo. En esta entrada voy a comentar cual es la arquitectura y como est&amp;aacute; alojado &lt;a href="http://www.blogstack.info/"&gt;Blog Stack&lt;/a&gt;, que es un ejemplo de algo pr&amp;aacute;ctico y real por si la experiencia de este ejemplo le sirve de ayuda o de inspiraci&amp;oacute;n a alguien. En la red he encontrado comentada la experiencia de &lt;a href="http://damog.nl/blog/the-new-planeta-linux-engine.html"&gt;Planeta Linux&lt;/a&gt; y &lt;a href="http://gallir.wordpress.com/2009/12/30/como-montamos-meneame-en-amazon-ec2/"&gt;Meneame&lt;/a&gt;, otros proyectos web.&lt;/p&gt; 
&lt;p&gt;Blog Stack (BS) es una agregador, planeta, o fuente de informaci&amp;oacute;n de bit&amp;aacute;coras sobre programaci&amp;oacute;n, desarrollo, desarrollo &amp;aacute;gil, software, software libre, hardware, gnu/linux o en general temas relacionados con la tecnolog&amp;iacute;a, en definitiva es un servicio que est&amp;aacute; disponible en una direcci&amp;oacute;n de internet, &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/arquitectura-y-hospedaje-de-blog-stack"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-16T19:21:55Z</dc:date>
  </entry>
  <entry>
    <title>Modelo «push» contra modelo «pull» en frameworks web</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-07T22:00:00Z</updated>
    <published>2014-07-06T12:58:10Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;En la mayor&amp;iacute;a de frameworks de desarrollo de aplicaciones o p&amp;aacute;ginas web para producir el contenido HTML que se env&amp;iacute;a al cliente se emplea un modelo en el que el controlador proporciona los datos que combinados con una plantilla producen el HTML. Este modelo tambi&amp;eacute;n es el empleado habitualmente en muchos motores de plantillas (&lt;a href="http://www.thymeleaf.org/"&gt;thymeleaf&lt;/a&gt;, &lt;a href="http://mustache.github.io/"&gt;mustache&lt;/a&gt;, …). Sin embargo, hay dos modelos que se pueden seguir para producir un texto como resultado dada una plantilla y datos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Push: este es el modelo comentado. El controlador recupera de antemano todos los datos que necesita la vista, el controlador tambi&amp;eacute;n determina la vista o plantilla que se usar. Combinando los datos y la plantilla se produce el resultado.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/30/modelo-push.png" title="Modelo push"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/30/modelo-push.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Los pasos que se siguen en este modelo son:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-06T12:58:10Z</dc:date>
  </entry>
  <entry>
    <title>Mi receta para aprobar la Oracle Certified Professional, Java SE 7 Programmer</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2014/07/mi-receta-para-aprobar-la-oracle-certified-professional-java-se-7-programmer" />
    <category term="java-se-7" />
    <category term="ocpjp" />
    <category term="scjp" />
    <category term="programacion" />
    <category term="java" />
    <category term="1z-8-5" />
    <category term="certificacion" />
    <category term="java-7" />
    <category term="java-se" />
    <category term="1z-8-4" />
    <category term="certification" />
    <category term="cert" />
    <category term="certificaciones" />
    <category term="ocpjp-7" />
    <category term="scjp-7" />
    <author>
      <name>admin</name>
    </author>
    <updated>2014-07-03T20:31:43Z</updated>
    <published>2014-07-03T20:31:43Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Ayer presente el examen 1Z0-805 de Oracle para obtener la Oracle Certified Professional, Java SE 7 Programmer y con mucho orgullo (producto de muchas horas de estudio) puedo decirles que la he aprobado con 80%. Llevaba preparandome unos 8 meses, con alguno que otro descanso bien merecido en navidad y semana santa, pero en general fui constante y cada semana dedicaba al menos una (1) o dos (2) horas a hacer ejercicios y/o leer al respecto.&lt;/p&gt; 
&lt;p&gt;Debo admitir que aunque consideraba que habia repasado bastante, el examen fue mas dificil de lo que yo esperaba, pero como ya ven no es imposible. Los objetivos a evaluar en el examen en resumen son&amp;nbsp;los siguientes:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Language Enhancements (Mejoras en el lenguaje), que no es m&amp;aacute;s que el &lt;a title="project coin" href="http://openjdk.java.net/projects/coin/"&gt;project coin&lt;/a&gt;: diamond operator (operador &amp;lt;&amp;gt;), try-with-resources, sentencia swith con variables tipo String, etc…&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2014/07/mi-receta-para-aprobar-la-oracle-certified-professional-java-se-7-programmer"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2014-07-03T20:31:43Z</dc:date>
  </entry>
  <entry>
    <title>Hemeroteca #5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/hemeroteca-5" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-27T23:10:29Z</updated>
    <published>2014-06-27T23:10:29Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/octopress.png" alt="Octopress" title="Octopress" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Cada seis meses hago un recopilatorio de los art&amp;iacute;culos que he publicado durante este periodo de tiempo. En estos seis meses he mantenido mi ritmo de publicaci&amp;oacute;n de una entrada a la semana que publico casi siempre los viernes a la tarde, en total han sido 26 nuevos art&amp;iacute;culos con este. Los temas tratados durante este tiempo han sido en gran medida la programaci&amp;oacute;n, un poco de linux y la Raspberry Pi y el an&amp;aacute;lisis de un SSD.&lt;/p&gt; 
&lt;p&gt;A destacar durante este semestre ha sido que he publicado un proyecto personal, Blog Stack. &lt;a href="http://www.blogstack.info/"&gt;Blog Stack&lt;/a&gt; es una agregador o planeta de bit&amp;aacute;coras sobre desarrollo, programaci&amp;oacute;n, gnu/linux y tecnolog&amp;iacute;a. A casi todos los bloggeros que le he propuesto agregarle a Blog Stack me han contestado positivamente. 17 son las bit&amp;aacute;coras agregadas actualmente y aunque no son muchas hacen que pr&amp;aacute;cticamente todos los d&amp;iacute;as haya algo nuevo que leer. En un art&amp;iacute;culo hac&amp;iacute;a la presentaci&amp;oacute;n del proyecto y en otro explicaba cual es el funcionamiento en cuanto a hospedaje y arquitectura (interesante para aquellos que quieran realizar un proyecto en internet con un coste m&amp;iacute;nimo). Son los siguientes art&amp;iacute;culos:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/hemeroteca-5"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-27T23:10:29Z</dc:date>
  </entry>
  <entry>
    <title>Iniciar rápidamente aplicación con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-21T01:08:07Z</updated>
    <published>2014-06-21T01:08:07Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Un proyecto web en Java requiere de unos cuantos archivos con cierta estructura que nos puede llevar un tiempo en crearlos. Normalmente cuando empezamos uno nuevo proyecto solemos basarnos en otro existente copiando y pegando contenido de &amp;eacute;l. Pero ademas de tiempo podemos cometer errores o no seguir algunas convenciones propias de Java o del framework web que usemos. Para un proyecto grande esa dedicaci&amp;oacute;n al inicio del proyecto no nos importar&amp;aacute; pero para un proyecto peque&amp;ntilde;o o para hacer una prueba puede que queramos tener algo m&amp;aacute;s r&amp;aacute;pido y con menos esfuerzo para estar en disposici&amp;oacute;n de empezar a desarrollar en muy poco tiempo.&lt;/p&gt; 
&lt;p&gt;Para crear el esqueleto de una aplicaci&amp;oacute;n r&amp;aacute;pidamente en Tapestry hay disponible un arquetipo de &lt;a href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; que puede generar una aplicaci&amp;oacute;n en unos pocos minutos. Para usarlo deberemos instalar maven previamente. Una vez instalado Maven basta con que usemos el siguiente comando.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-21T01:08:07Z</dc:date>
  </entry>
  <entry>
    <title>Acelerar tu página web retardando la carga de ciertos contenidos secundarios</title>
    <link rel="alternate" href="http://www.blogstack.info/post/placerdigital/2014/06/acelerar-tu-pagina-web-retardando-la-carga-de-ciertos-contenidos-secundarios" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="html" />
    <category term="javascript" />
    <category term="tutoriales" />
    <author>
      <name>Ricardo Barra</name>
    </author>
    <updated>2014-06-17T17:10:26Z</updated>
    <published>2014-06-17T17:10:26Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Cuando en una p&amp;aacute;gina web o blog hay muchos comentarios, cada uno de ellos tiene un avatar asociado. Cada avatar es una imagen distinta y si el post o art&amp;iacute;culo es popular, podemos tener decenas de im&amp;aacute;genes al final de la p&amp;aacute;gina que &lt;strong&gt;retrasar&amp;aacute;n la velocidad de carga de &amp;eacute;sta&lt;/strong&gt;. Peor a&amp;uacute;n, como en esos casos hay que hacer muchas solicitudes al servidor (HTTP requests) para que cargue cada imagen por separado, eso puede impedir que se carguen antes otros elementos importantes para el aspecto de la p&amp;aacute;gina, tales como estilos CSS u otras im&amp;aacute;genes.&lt;/p&gt; 
&lt;p&gt;Para acelerar la velocidad de carga de una p&amp;aacute;gina web y as&amp;iacute; ofrecer una mejor experiencia al usuario, &lt;strong&gt;existen formas de lograr que los avatares u otros elementos sean los &amp;uacute;ltimos en cargar&lt;/strong&gt;. Muchas veces no necesitamos que las im&amp;aacute;genes de perfil de los comentaristas se muestren inmediatamente, ya que primero nos interesa leer el contenido principal. Puede incluso que ni siquiera necesitemos ver los comentarios.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/placerdigital/2014/06/acelerar-tu-pagina-web-retardando-la-carga-de-ciertos-contenidos-secundarios"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Ricardo Barra</dc:creator>
    <dc:date>2014-06-17T17:10:26Z</dc:date>
  </entry>
  <entry>
    <title>Página Dashboard de Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/pagina-dashboard-de-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-13T19:37:24Z</updated>
    <published>2014-06-13T19:37:24Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Con la versi&amp;oacute;n 5.4 de Tapestry las &lt;a href="http://elblogdepicodev.blogspot.com.es/2012/08/paginas-pagecatalog-servicestatus-e.html"&gt;p&amp;aacute;ginas PageCatalog, ServiceStatus e HibernateStaticstis&lt;/a&gt; han sido unificadas en la p&amp;aacute;gina T5Dashboard por lo que ahora en una s&amp;oacute;la p&amp;aacute;gina tendremos toda la informaci&amp;oacute;n. Una de las caracter&amp;iacute;sticas m&amp;aacute;s importantes de Tapestry es ser muy informativo proporcionando mucha y descriptiva informaci&amp;oacute;n, esto se nota con la p&amp;aacute;gina de &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/07/personalizar-la-pagina-de-informe-de-error.html"&gt;informe de error incluso para las peticiones ajax&lt;/a&gt;, los mensajes de logging y con est&amp;aacute;s p&amp;aacute;ginas de informaci&amp;oacute;n de estado.&lt;/p&gt; 
&lt;p&gt;La p&amp;aacute;gina &lt;a href="http://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/corelib/pages/T5Dashboard.html"&gt;T5Dashboard&lt;/a&gt; est&amp;aacute; incluida en el propio core de &lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; y disponible en todas las aplicaciones en modo desarrollo y accediendo de forma local al servidor de aplicaciones. Si se incluye en la aplicaci&amp;oacute;n la dependencia tapestry-hibernate adem&amp;aacute;s en T5Dashboard podremos ver estad&amp;iacute;sticas de uso de Hibernate. La p&amp;aacute;gina T5Dashboard nos puede resultar muy &amp;uacute;til ya que nos proporciona mucha informaci&amp;oacute;n y alguna acci&amp;oacute;n interesante.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/pagina-dashboard-de-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-13T19:37:24Z</dc:date>
  </entry>
</feed>

