<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-09-21T10:02:22Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-09-21T10:02:22Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Comparativa de acceso rápido y seguro a un elemento de un array unidimensional [PHP]</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/09/comparativa-de-acceso-rapido-y-seguro-a-un-elemento-de-un-array-unidimensional-php" />
    <category term="teoria" />
    <category term="programacion" />
    <category term="php" />
    <category term="codigo" />
    <category term="errores" />
    <category term="time" />
    <category term="error-reporting" />
    <category term="cosas-que-damos-por-hechas" />
    <category term="variable" />
    <category term="graficas" />
    <category term="comparativa" />
    <category term="velocidad" />
    <category term="tiempos" />
    <category term="valor" />
    <category term="acceso" />
    <category term="hash" />
    <category term="tabla" />
    <category term="general" />
    <category term="array" />
    <category term="practica" />
    <category term="ignorar" />
    <category term="indice" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-09-21T08:46:51Z</updated>
    <published>2015-09-21T08:46:51Z</published>
    <content type="html">&lt;p&gt;Nota: Si usas algún Framework PHP, lo más seguro que estas funciones no te sirvan, ya que muchos Frameworks suelen tener cosas parecidas, más o menos completas que hacen lo mismo. Si eres de los que trabajan “a pelo”, estás creándote tu propio framework, tal vez te interese todo esto. Acceso simple a un elemento de un array Esto es una tarea sencilla en PHP, sólo tenemos que poner entre corchetes la clave a la que queremos acceder y podremos acceder a su valor: 1 2 3 &lt;?php $miArray['precio']=12.34; echo $miArray['precio']; Aunque, el problema viene cuando dicha clave no existe, veremos una notificación de PHP indicando que el índice especificado no existe: PHP Notice: Undefined index: precio in /home/pruebas/test.php on line 3 PHP Stack trace: ….. No pasa nada, aquí podemos hacer varias cosas,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/09/comparativa-de-acceso-rapido-y-seguro-a-un-elemento-de-un-array-unidimensional-php"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-09-21T08:46:51Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo de multiproyecto con Gradle</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-de-multiproyecto-con-gradle" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-09-15T17:00:00Z</updated>
    <published>2015-09-15T17:00:00Z</published>
    <content type="html">&lt;p&gt;En un proyecto grande podemos tener necesidad de dividir el monolito al menos en varios módulos y yendo un paso más lejos en microservicios. La herramienta de construcción que usemos deberá de facilitarnos automatizar la tarea de construcción del código fuente de cada módulo individual, de todos a la vez o de los microservicios si tienen alguna dependencia compartida. En el artículo y ejemplo explicaré cómo usando Gradle podemos dividir el proyecto en varios módulos. No deja de ser un ejemplo pero es bastante completo y está formado por dos aplicaciones web, una librería de componentes y otra librería con el modelo de persistencia, usa Spring, jOOQ, Tapestry, PostgreSQL, Docker, Liquibase, … Cuando una aplicación o proyecto crece en algún momento podemos tener necesidad de partir el monolito[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-de-multiproyecto-con-gradle"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-09-15T17:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Aptana Studio, un gran IDE para desarrollo</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2015/09/aptana-studio-un-gran-ide-para-desarrollo" />
    <category term="html" />
    <category term="blog-stack" />
    <category term="aptana-studio" />
    <category term="programacion" />
    <category term="php" />
    <category term="linux" />
    <category term="gnu" />
    <category term="eclipse" />
    <category term="gpl" />
    <category term="ajax" />
    <category term="programas" />
    <author>
      <name>davidochobits</name>
    </author>
    <updated>2015-09-14T13:11:07Z</updated>
    <published>2015-09-14T13:11:07Z</published>
    <content type="html">&lt;p&gt;El artículo de hoy va dedicado a los desarrolladores ya que hablaré de Aptana Studio, una potente IDE, multiplataforma, que es capaz de dar soporte a lenguajes como PHP, Python, Ruby, Ajax y un... La entrada Aptana Studio, un gran IDE para desarrollo aparece primero en ochobitshacenunbyte.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2015/09/aptana-studio-un-gran-ide-para-desarrollo"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>davidochobits</dc:creator>
    <dc:date>2015-09-14T13:11:07Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo práctico de ServiceLoader con ServiceProvider de Java Money</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-practico-de-serviceloader-con-serviceprovider-de-java-money" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-09-13T09:00:00Z</updated>
    <published>2015-09-13T09:00:00Z</published>
    <content type="html">&lt;p&gt;Una aplicación que trabaje con importes y diferentes divisas necesitará ratios de conversión, estos ratios de conversión deberemos obtenerlos de algún servicio. Con la API de Java Money que aun en Java 8 no está incorporada en el JDK aunque si como una librería podremos trabajar de forma cómoda con importes, divisas y ratios. En este artículo explicaré un ejemplo de uso práctico de la clase ServiceLoader y como obtener ratios del servicio Open Exchange Rates. La semana pasada comentaba la clase ServiceLoader disponibles en el JDK y como nos puede servir para que nuestra aplicación o API sea extensible en futuras versiones o para alguien que quiera adaptarla a sus necesidades. La clase ServiceLoader es el método que se emplea en la API de Java para tratamiento de divisas, importes y conversiones[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-practico-de-serviceloader-con-serviceprovider-de-java-money"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-09-13T09:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Aplicación Java extensible con la clase ServiceLoader</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-09-12T08:00:00Z</updated>
    <published>2015-09-12T08:00:00Z</published>
    <content type="html">&lt;p&gt;Java ofrece un mecanismo incluido en el propio JDK para hacer las aplicaciones extensibles o ampliables en un momento posterior al de desarrollo. La clase ServiceLoader permite obtener las implementaciones definidas en el classpath de una determinada interfaz. En este artículo explico esta clase y muestro un ejemplo sencillo de como usarla. Puede que al desarrollar una aplicación necesitamos que esta sea extensible, esto significa que en el momento de desarrollo no conocemos las implementaciones de un determinado servicio que se proporcionarán en un futuro. Un servicio no es más que la implementación de una determinada interfaz que definimos en el momento de desarrollo. Java con la clase ServiceLoader proporciona un mecanismo estándar e incorporado en el JDK para cargar servicios con alguna[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-09-12T08:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Patrón Singleton</title>
    <link rel="alternate" href="http://www.blogstack.info/post/codecriticon/2015/09/patron-singleton" />
    <category term="programacion" />
    <category term="patrones-de-diseno" />
    <category term="java" />
    <category term="singleton" />
    <author>
      <name>Antonio</name>
    </author>
    <updated>2015-09-08T22:28:22Z</updated>
    <published>2015-09-08T22:28:22Z</published>
    <content type="html">&lt;p&gt;El patrón Singleton forma parte de los patrones creacionales. Se trata de uno de los patrones más usados y conocidos por los desarrolladores, y también es uno de los patrones más controvertidos. El patrón Singleton se encarga de controlar que únicamente se crea una instancia de una clase en toda la aplicación mediante el uso de un único punto de acceso. La definición que se da en el libro “Design Patterns: Elements of Reusable Object-Oriented Software” es: “Garantiza que una clase sólo tenga una instancia y proporciona un punto de acceso global a ella.” El diagrama de definición del patrón Singleton es simple: Sólo se proporciona un punto de acceso para crear una instancia de una clase Singleton. El constructor es privado y se proporciona un método getInstance() que se encarga de proporcionar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/codecriticon/2015/09/patron-singleton"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Antonio</dc:creator>
    <dc:date>2015-09-08T22:28:22Z</dc:date>
  </entry>
  <entry>
    <title>Implementación de máquina de estados finita (FSM) con Java 8</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/08/implementacion-de-maquina-de-estados-finita-fsm-con-java-8" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-08-01T10:00:00Z</updated>
    <published>2015-08-01T10:00:00Z</published>
    <content type="html">&lt;p&gt;Es raro pero no he encontrado una librería adecuada en Java con una implementación de una máquina de estados. Stateless4j puede ser una candidata pero también tiene algunas deficiencias que pueden hacer que no nos sirva. Basándome en Stateless4j y usando Java 8 he creado una implementación de FSM con una funcionalidad similar y más ligera donde una única instancia de la máquina de estados es independiente del número de instancias de objetos en las que se use. Hace un par de años escribía un artículo sobre cómo implementar una máquina de estados usando el patrón de diseño State. El patrón de diseño State y el ejemplo era válido sin embargo podía tener algunas deficiencias. Una de ellas es que necesitaba una clase por cada estado diferente, si los estados son una docena el número de archivos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/08/implementacion-de-maquina-de-estados-finita-fsm-con-java-8"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-08-01T10:00:00Z</dc:date>
  </entry>
</feed>

