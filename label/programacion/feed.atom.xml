<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-09-12T09:02:20Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-09-12T09:02:20Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Ejemplo práctico de ServiceLoader con ServiceProvider de Java Money</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-practico-de-serviceloader-con-serviceprovider-de-java-money" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-09-12T08:20:00Z</updated>
    <published>2015-09-12T08:20:00Z</published>
    <content type="html">&lt;p&gt;Una aplicación que trabaje con importes y diferentes divisas necesitará ratios de conversión, estos ratios de conversión deberemos obtenerlos de algún servicio. Con la API de Java Money que aun en Java 8 no está incorporada en el JDK aunque si como una librería podremos trabajar de forma cómoda con importes, divisas y ratios. En este artículo explicaré un ejemplo de uso práctico de la clase ServiceLoader y como obtener ratios del servicio Open Exchange Rates. La semana pasada comentaba la clase ServiceLoader que están disponibles en el JDK y como nos puede servir para que nuestra aplicación o API sea extensible en futuras versiones o para alguien que quiera adaptarla a sus necesidades. La clase ServiceLoader es el método que se emplea en la API en Java para tratamiento de divisas, importes[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/09/ejemplo-practico-de-serviceloader-con-serviceprovider-de-java-money"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-09-12T08:20:00Z</dc:date>
  </entry>
  <entry>
    <title>Aplicación Java extensible con la clase ServiceLoader</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-09-12T08:00:00Z</updated>
    <published>2015-09-12T08:00:00Z</published>
    <content type="html">&lt;p&gt;Java ofrece un mecanismo incluido en el propio JDK para hacer las aplicaciones extensibles o ampliables en un momento posterior al de desarrollo. La clase ServiceLoader permite obtener las implementaciones definidas en el classpath de una determinada interfaz. En este artículo explico esta clase y muestro un ejemplo sencillo de como usarla. Puede que al desarrollar una aplicación necesitamos que esta sea extensible, esto significa que en el momento de desarrollo no conocemos las implementaciones de un determinado servicio que se proporcionarán en un futuro. Un servicio no es más que la implementación de una determinada interfaz que definimos en el momento de desarrollo. Java con la clase ServiceLoader proporciona un mecanismo estándar e incorporado en el JDK para cargar servicios con alguna[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/09/aplicacion-java-extensible-con-la-clase-serviceloader"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-09-12T08:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Patrón Singleton</title>
    <link rel="alternate" href="http://www.blogstack.info/post/codecriticon/2015/09/patron-singleton" />
    <category term="programacion" />
    <category term="patrones-de-diseno" />
    <category term="java" />
    <category term="singleton" />
    <author>
      <name>Antonio</name>
    </author>
    <updated>2015-09-08T22:28:22Z</updated>
    <published>2015-09-08T22:28:22Z</published>
    <content type="html">&lt;p&gt;El patrón Singleton forma parte de los patrones creacionales. Se trata de uno de los patrones más usados y conocidos por los desarrolladores, y también es uno de los patrones más controvertidos. El patrón Singleton se encarga de controlar que únicamente se crea una instancia de una clase en toda la aplicación mediante el uso de un único punto de acceso. La definición que se da en el libro “Design Patterns: Elements of Reusable Object-Oriented Software” es: “Garantiza que una clase sólo tenga una instancia y proporciona un punto de acceso global a ella.” El diagrama de definición del patrón Singleton es simple: Sólo se proporciona un punto de acceso para crear una instancia de una clase Singleton. El constructor es privado y se proporciona un método getInstance() que se encarga de proporcionar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/codecriticon/2015/09/patron-singleton"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Antonio</dc:creator>
    <dc:date>2015-09-08T22:28:22Z</dc:date>
  </entry>
  <entry>
    <title>Implementación de máquina de estados finita (FSM) con Java 8</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/08/implementacion-de-maquina-de-estados-finita-fsm-con-java-8" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-08-01T10:00:00Z</updated>
    <published>2015-08-01T10:00:00Z</published>
    <content type="html">&lt;p&gt;Es raro pero no he encontrado una librería adecuada en Java con una implementación de una máquina de estados. Stateless4j puede ser una candidata pero también tiene algunas deficiencias que pueden hacer que no nos sirva. Basándome en Stateless4j y usando Java 8 he creado una implementación de FSM con una funcionalidad similar y más ligera donde una única instancia de la máquina de estados es independiente del número de instancias de objetos en las que se use. Hace un par de años escribía un artículo sobre cómo implementar una máquina de estados usando el patrón de diseño State. El patrón de diseño State y el ejemplo era válido sin embargo podía tener algunas deficiencias. Una de ellas es que necesitaba una clase por cada estado diferente, si los estados son una docena el número de archivos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/08/implementacion-de-maquina-de-estados-finita-fsm-con-java-8"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-08-01T10:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Web scraping con Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdejose/2015/07/web-scraping-con-java" />
    <category term="web" />
    <category term="programacion" />
    <category term="jsoup" />
    <category term="web-scraping" />
    <category term="big-data" />
    <category term="java" />
    <category term="java-se" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-07-25T15:35:12Z</updated>
    <published>2015-07-25T15:30:59Z</published>
    <content type="html">&lt;p&gt;Actualmente me encuentro desarrollando mi proyecto final de máster, el cual consiste en crear un modelo de aprendizaje automático que arroje predicciones acerca de partidos de futbol de la liga de primera división española. Para ello he necesitado entre otras cosas tener los resultados de todas las jornadas de las ultimas ligas. Aunque recientemente conseguí un paquete de R (enlace) que contenía los resultados desde 1929, este no me proporcionaba toda la información que yo buscaba, así que me decidí por obtener yo mismo esa información sacándola de las paginas deportivas y es lo que quiero compartir con ustedes. En un principio pense en hacerlo en python con la biblioteca lxml, pero haciendo una búsqueda rápida por Internet encontré un proyecto en Java llamado Jsoup y debo decir que este si[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdejose/2015/07/web-scraping-con-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-07-25T15:30:59Z</dc:date>
  </entry>
  <entry>
    <title>Servicio para obtener ratios de conversión entre divisas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-07-24T21:00:00Z</updated>
    <published>2015-06-20T08:00:00Z</published>
    <content type="html">&lt;p&gt;¿Trabajas con importes en diferentes divisas y necesitas hacer conversiones entre ellas? Si es el caso necesitas obtener los ratios de conversión entre divisas de alguna fuente de forma regular y de forma automatizada ya que se varían constantemente (en minutos) según diversos factores. Hay diferentes fuentes para obtenerlos y empresas que ofrecen las cotizaciones como producto, en este artículo comentaré una con suficiente detalle como para integrarla en cualquier aplicación. En una aplicación de comercio electrónico que venda sus productos o servicios a nivel internacional probablemente necesitará mostrar los precios en la moneda local del comprador. En estos casos será necesario hacer una conversión entre la divisa en la que está el importe del producto y la divisa del usuario con la que[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/06/servicio-para-obtener-ratios-de-conversion-entre-divisas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-06-20T08:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Cómo trabajar con importes, ratios y divisas en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-07-21T18:30:00Z</updated>
    <published>2015-07-21T18:00:00Z</published>
    <content type="html">&lt;p&gt;Aún en Java 8 no tenemos una API incluida en el JDK dedicada al manejo de importes, divisas y conversiones. Si la especificación JSR-354 se incluye en alguna versión podremos hacer uso de ella sin necesidad de ninguna dependencia adicional, pero si tenemos necesidad ahora podemos usar la librería que ha producido la especificación. Usando las clases y métodos de la API evitaremos hacer y mantener una implementación nosotros mismos que además seguro no llega al nivel de esta. Las aplicaciones de comercio electrónico o que realizan operaciones financieras con importes seguro que necesitan una forma de representar un importe junto con una divisa. También si necesitan convertir importes en diferentes divisas necesitarán obtener los ratios de conversión de alguna fuente, en el artículo Servicio[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/07/como-trabajar-con-importes-ratios-y-divisas-en-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-07-21T18:00:00Z</dc:date>
  </entry>
</feed>

