<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-03-07T10:02:31Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-03-07T10:02:31Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Cookies de sesión externalizadas con Spring Session</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/03/cookies-de-sesion-externalizadas-con-spring-session" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-03-07T08:05:06Z</updated>
    <published>2015-03-07T08:05:06Z</published>
    <content type="html">&lt;p&gt;Por defecto los datos de la sesión de una aplicación web Java se guardan en el servidor de aplicaciones y en memoria, esto produce que al reiniciar el servidor por un despliegue los datos de la sesión se pierdan y provoque en los usuarios alguna molestia como tener que volver a iniciar sesión. En Tomcat existe la posibilidad de que los datos de las sesiones sean persistidas en disco con la opción saveOnRestart del elemento de configuración Manager que evita que los datos de las sesiones se pierdan en los reinicios, al menos para los servicios formados por una única instancia. Para evitar que los usuarios perciban los reinicios o caídas del servidor hay varias soluciones algunas tratando de diferentes formas externalizar las sesiones del servidor de aplicaciones. Con estas soluciones se pueden[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/03/cookies-de-sesion-externalizadas-con-spring-session"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-03-07T08:05:06Z</dc:date>
  </entry>
  <entry>
    <title>Listener de eventos de Hibernate con servicios de Spring</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/02/listener-de-eventos-de-hibernate-con-servicios-de-spring" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-02-28T09:59:08Z</updated>
    <published>2015-02-28T09:59:08Z</published>
    <content type="html">&lt;p&gt;En el anterior artículo explicaba como crear un listener que reciba eventos de Hibernate pero quizá necesitemos en el listener hacer uso de un servicio de Spring si el proceso de la acción necesita aprovecharse de la funcionalidad proporcionada en los servicios. En este artículo mostraré como crear un listener de Hibernate que use un servicio de Spring, es decir, un listener de Hibernate con la posibilidad de inyectar servicios de Spring. Para hacer la integración de los listeners con Spring debemos sustituir el Interceptor por un servicio que haga lo mismo pero al inicio del contenedor de Spring con la anotación @PostConstruct. Para ello creamos una clase con el siguiente contenido: package es.com.blogspot.elblogdepicodev.plugintapestry.services.hibernate;

import javax.annotation.PostConstruct;

import[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/02/listener-de-eventos-de-hibernate-con-servicios-de-spring"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-02-28T09:59:08Z</dc:date>
  </entry>
  <entry>
    <title>En ocasiones, veo lenguajes de programación por la calle [ Frikada rápida ]</title>
    <link rel="alternate" href="http://www.blogstack.info/post/poesiabinaria/2015/02/en-ocasiones-veo-lenguajes-de-programacion-por-la-calle-frikada-rapida" />
    <category term="programacion" />
    <category term="lenguaje" />
    <category term="caminando" />
    <category term="cpp" />
    <category term="escaparate" />
    <category term="obsesion" />
    <category term="c" />
    <category term="calle" />
    <category term="humor-tonterias" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-02-27T09:56:35Z</updated>
    <published>2015-02-27T09:56:35Z</published>
    <content type="html">&lt;p&gt;Un día, paseando por Linares, me asomo a este escaparate y… veo tres llaveros cuidadosamente colocados formando las iniciales de uno de mis lenguajes de programación favoritos. Vale, es CPP y no C++, pero también se dice C plus plus y una de las extensiones típicas para esos archivos es cpp. Luego hay una B por ahí, que es otro lenguaje de programación… pero, ¿quién programa en B hoy en día? ¿Estoy obsesionado? La entrada En ocasiones, veo lenguajes de programación por la calle [ Frikada rápida ] aparece primero en Poesía Binaria.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/poesiabinaria/2015/02/en-ocasiones-veo-lenguajes-de-programacion-por-la-calle-frikada-rapida"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-02-27T09:56:35Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplo de listener de eventos de Hibernate</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/02/ejemplo-de-listener-de-eventos-de-hibernate" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-02-21T22:30:00Z</updated>
    <published>2015-02-20T15:30:44Z</published>
    <content type="html">&lt;p&gt;En alguna ocasión puede que tengamos la necesidad de realizar alguna acción cuando una entidad es guardada en base de datos, actualizada, eliminada, cargada, … . Algunos casos de uso pueden ser: Establecer la fecha de creación o de actualización del objeto cuando es persistido en base de datos. Cifrar un dato del objeto al ser persistido en base de datos. Proporcionar seguridad de modo que un usuario solo pueda modificar o acceder a los objetos a los que tenga acceso. Al persistir el objeto guardar en un campo el valor calculado resultado de una función. Cualquier otra restricción, cálculos o acciones. Para realizar estas operaciones podemos hacerlas de varias formas, una puede ser usando triggers de la base de datos disponibles en Oracle y PostgreSQL. Si usamos Hibernate como librería ORM[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/02/ejemplo-de-listener-de-eventos-de-hibernate"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-02-20T15:30:44Z</dc:date>
  </entry>
  <entry>
    <title>La palabra clave assert de Java y un ejemplo</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/02/la-palabra-clave-assert-de-java-y-un-ejemplo" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-02-14T22:30:00Z</updated>
    <published>2015-02-13T18:55:54Z</published>
    <content type="html">&lt;p&gt;La palabra clave o reservada assert sirve para aseverar que en un determinado momento del código una determinada condición debe ser cierta. Está disponible en Java desde la versión 1.4 pero al menos yo con bastantes años de experiencia en programación en este lenguaje aún no he usado de forma amplia y posiblemente le pase a mucha de la gente y aún así hemos sobrevivido durante todo este tiempo. Sin embargo, puede resultarnos bastante útil. Una de las situaciones en que puede ayudarnos es para descubrir una condición no válida en el momento del assert y no donde se produce una excepción en otro punto del código que puede no ser la causa real del error. Por ejemplo, supongamos que un método privado no acepta un parámetro con valor null, una variable no puede ser null o una colección no ha de[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/02/la-palabra-clave-assert-de-java-y-un-ejemplo"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-02-13T18:55:54Z</dc:date>
  </entry>
  <entry>
    <title>Convertir fechas y husos horarios en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/01/convertir-fechas-y-husos-horarios-en-java" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-02-05T22:00:00Z</updated>
    <published>2015-01-31T10:32:35Z</published>
    <content type="html">&lt;p&gt;Aunque en muchas aplicaciones no será necesario si desarrollamos una aplicación que trabaje con diferentes paises y fechas probablemente deberemos tener en cuenta múltiples husos horarios o zonas horarias. Según estos husos horarios, por ejemplo, en el momento que son las 12:00 en Madrid hora local no son las 12:00 en Buenos Aires, si dos ciudades emplean diferente huso horario hay que tenerlo en cuenta para obtener la hora local en cada ciudad. Hasta la versión 7 de Java el trabajo con fechas era complicado con las clases proporcionadas GregorianCalendar y Date, una alternativa a la API de Java para el manejo de fechas hasta esta versión era emplear la librería JodaTime. JodaTime ofrece una API mejor y más completa para el manejo de fechas hasta la versión de Java 7. Con la nueva API para[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/01/convertir-fechas-y-husos-horarios-en-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-01-31T10:32:35Z</dc:date>
  </entry>
  <entry>
    <title>Fechas y usos horarios en Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/01/fechas-y-usos-horarios-en-java" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-01-31T20:00:00Z</updated>
    <published>2015-01-31T10:32:35Z</published>
    <content type="html">&lt;p&gt;Aunque en muchas aplicaciones no será necesario si desarrollamos una aplicación que trabaje con diferentes paises y fechas probablemente deberemos tener en cuenta múltiples usos horarios o zonas horarias. Según estos usos horarios, por ejemplo, en el momento que son las 12:00 en Madrid hora local no son las 12:00 en Buenos Aires, si dos ciudades emplean diferente uso horario hay que tenerlo en cuenta para obtener la hora local en cada ciudad. Hasta la versión 7 de Java el trabajo con fechas era complicado con las clases proporcionadas GregorianCalendar y Date, una alternativa a la API de Java para el manejo de fechas hasta esta versión era emplear la librería JodaTime. JodaTime ofrece una API mejor y más completa para el manejo de fechas hasta la versión de Java 7. Con la nueva API para fechas[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/01/fechas-y-usos-horarios-en-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-01-31T10:32:35Z</dc:date>
  </entry>
</feed>

