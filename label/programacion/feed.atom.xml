<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-04-25T10:03:42Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-04-25T10:03:42Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Certificado SSL, de empresa, «wildcard» y de validación extendida</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida" />
    <category term="planeta-arch-linux" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="seguridad" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-25T09:30:00Z</updated>
    <published>2015-04-25T08:07:04Z</published>
    <content type="html">&lt;p&gt;Usar un protocolo seguro garantiza de que los datos intercambiados entre el cliente y el servidor no son leídos ni modificados por una tercera parte además de verificar que la comunicación se está realizando entre las partes que dicen ser. Para usar un protocolo seguro como SSL/TLS debemos disponer de con certificado, con OpenSSL podemos generar y convertirlo al formato que deseemos, sin embargo, para garantizar al usuario que el certificado es válido este se debe estar firmado por una autoridad de certificación (CA) en la que confíe el usuario, generalmente con una de las autoridades de certificación cuyos certificados están preinstalados en el navegador web (en Firefox podemos verlos en Preferencias &gt; Avanzado &gt; Certificados &gt; Ver certificados), los certificados autofirmados son útiles para[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-25T08:07:04Z</dc:date>
  </entry>
  <entry>
    <title>Nueva visita a 5+ opciones de «hosting» para aplicaciones</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/nueva-visita-a-5-opciones-de-hosting-para-aplicaciones" />
    <category term="planeta-arch-linux" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-24T20:00:00Z</updated>
    <published>2015-04-17T17:56:10Z</published>
    <content type="html">&lt;p&gt;Hace tres años escribí un artículo sobre varias opciones de hosting que disponemos para hospedar aplicaciones o páginas web. En ese artículo comentaba varias posibilidades desde un servidor propio usando una Raspberry Pi, proveedores de hosting, Amazon EC2, Google App Engine, Jelastic, OpenShift, AppFog, Cloud Foundry (VMWare), Heroku, Azure (Microsoft) y Google Compute (Google Cloud Platform). Pasado todo este tiempo en este artículo revisaré las opciones de hospedaje con algunas nuevas que en su momento no conocía, otras siguen siendo totalmente válidas. Servidor propio Si queremos una opción para algo simple y para nosotros mismos podemos utilizar un servidor propio usando como hardware por ejemplo una Raspberry Pi 2 Model B, con la segunda versión de este miniordenador que ahora tiene 4[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/nueva-visita-a-5-opciones-de-hosting-para-aplicaciones"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-17T17:56:10Z</dc:date>
  </entry>
  <entry>
    <title>Instalar PHP 5.3 en Debian Wheezy</title>
    <link rel="alternate" href="http://www.blogstack.info/post/ochobitshacenunbyte/2015/04/instalar-php-5-3-en-debian-wheezy" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="php5" />
    <category term="php-5-3" />
    <category term="debian" />
    <category term="sistemas-operativos" />
    <category term="wheezy" />
    <author>
      <name>davidochobits</name>
    </author>
    <updated>2015-04-24T11:46:21Z</updated>
    <published>2015-04-24T11:46:21Z</published>
    <content type="html">&lt;p&gt;El artículo de hoy será muy técnico. En Debian 7, Wheezy, por defecto está disponible en sus repositorios la versión 5.4 de PHP. Explicaré como instalar la inmediatamente anterior, es decir, la PHP 5.3... La entrada Instalar PHP 5.3 en Debian Wheezy aparece primero en ochobitshacenunbyte.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/ochobitshacenunbyte/2015/04/instalar-php-5-3-en-debian-wheezy"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>davidochobits</dc:creator>
    <dc:date>2015-04-24T11:46:21Z</dc:date>
  </entry>
  <entry>
    <title>Guardar contraseñas usando «Salted Password Hashing» y otras formas correctas</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas" />
    <category term="planeta-arch-linux" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="tapestry" />
    <category term="seguridad" />
    <category term="java" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-14T19:00:00Z</updated>
    <published>2015-04-10T16:55:04Z</published>
    <content type="html">&lt;p&gt;Para cada servicio deberíamos emplear una contraseña de una longitud de al menos 8 caracteres que incluya letras en minúscula, mayúscula, números y símbolos, una herramienta que podemos utilizar para generar contraseñas más seguras con los criterios que indiquemos es Strong Password Generator. Sin embargo, recordar cada una de estas contraseñas es muy difícil de modo que es habitual que utilicemos la misma contraseña para varios o todos los servicios y no empleando todos los criterios anteriores. Por otro lado, los desarrolladores no deberíamos guardar en la base de datos las contraseñas que nos entregan los usuarios en texto plano, para evitar guardalas en texto plano hace un tiempo se utilizaba únicamente una función de hashing unidireccional como MD5 o SHA, de este modo si la base de datos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/guardar-contrasenas-usando-salted-password-hashing-y-otras-formas-correctas"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-10T16:55:04Z</dc:date>
  </entry>
  <entry>
    <title>Productividad y errores de compilación con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="tapestry" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-10T18:00:00Z</updated>
    <published>2015-03-27T18:13:12Z</published>
    <content type="html">&lt;p&gt;Hace ya unos años comentaba varios motivos para elegir Apache Tapestry como framework para desarrollar una aplicación o página web. Entre las varias razones comentaba la productividad como característica destacada. Uno de los motivos es esta productividad era por la alta reutilización de código que se puede conseguir al usar los componentes múltiples veces en un mismo proyecto o en diferentes proyectos creando una librería de componentes como comento más detalladamente en el libro PugIn Tapestry. Otra parte de la productividad que comentaba más ligeramente era poder detectar de forma rápida errores de compilación no solo en el código Java a través del IDE sino porque con Tapestry es posible detectar errores de compilación en todas las plantillas tml que generan el html fácil y rápidamente con[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/03/productividad-y-errores-de-compilacion-con-apache-tapestry"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-03-27T18:13:12Z</dc:date>
  </entry>
  <entry>
    <title>Evitar iniciar varias veces la máquina virtual Java para procesos cortos</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-03T20:22:51Z</updated>
    <published>2015-04-03T20:22:51Z</published>
    <content type="html">&lt;p&gt;Si en una aplicación o proyecto tenemos necesidad de ejecutar uno o varios procesos múltiples veces donde únicamente cambian los parámetros, de forma seguida y el tiempo de ejecución de esos procesos es corto probablemente quizá veamos que la mayor parte del tiempo empleado de los procesos sea empleado en iniciar la máquina virtual Java (JVM). Digo quizá porque usando Ubuntu en la nube de Amazon EC2 el tiempo de inicio era de varios segundos, sin embargo, en mi ordenador personal usando Arch Linux y con un disco SSD de Samsung los tiempos que obtengo son de unos pocos milisegundos, quizá la larga lista de dependencias del paquete de Java 7 en Ubuntu (probablemente del paquete openjdk-7-jre) y ocupando considerablemente más megas en disco tenga algo que ver: Por ejemplo, supongamos que tenemos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/evitar-iniciar-varias-veces-la-maquina-virtual-java-para-procesos-cortos"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-03T20:22:51Z</dc:date>
  </entry>
  <entry>
    <title>Introducción y ejemplo de API RPC con Apache Thrift</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-03-21T10:30:00Z</updated>
    <published>2015-03-20T16:03:18Z</published>
    <content type="html">&lt;p&gt;Las aplicaciones están pasando de ser elementos aislados, grandes y monolíticos a ser desarrolladas como varios microservicios que colaboran entre si para en conjunto ofrecer la funcionalidad deseada. Aunque los microservicios presentan sus propias problemáticas resuelven algunas que poseen los sistemas monolíticos, entre algunas de sus caracteríticas deseables están: mayor cohesión, menor acoplamiento, menor tamaño, mayor independencia de la tecnología usando la más adecuada en cada situación, más fácilmente reemplazables y despliegues más sencillos. También, la funcionalidad ofrecida por una aplicación puede quererse consumirse desde otra aplicación surgiendo de esta forma una API. Para ofrecer una API de una aplicación que pueda consumirse internamente, desde diferentes dispositivos o por[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/03/introduccion-y-ejemplo-de-api-rpc-con-apache-thrift"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-03-20T16:03:18Z</dc:date>
  </entry>
</feed>

