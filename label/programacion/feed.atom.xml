<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-06-06T10:02:17Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-06-06T10:02:17Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Patrón múltiples vistas de un mismo dato en Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/06/patron-multiples-vistas-de-un-mismo-dato-en-tapestry" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="tapestry" />
    <category term="java" />
    <category term="blog" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-06-06T08:30:00Z</updated>
    <published>2015-06-06T08:30:00Z</published>
    <content type="html">&lt;p&gt;Un proyecto grande contendrá muchos archivos de código fuente, poseer gran cantidad de archivos puede ser una molestia al trabajar con ellos al tener que buscarlos o abrilos. En el caso de las aplicaciones web puede darse el caso de que un mismo dato tenga un archivo diferente por cada forma de visualizarlo, para reducir el número de archivos en estos casos uso el siguiente patrón cuando trabajo con Apache Tapestry con el soporte que ofrece pero que puede ser igualmente aplicado de forma similar a otros frameworks. Al desarrollar una aplicación web puede que necesitemos mostrar un mismo dato de diferentes formas. Una posibilidad es crear una vista por cada forma diferente que se haya de mostrar el dato. Sin embargo, de esta forma tendremos que crear un archivo diferente por cada forma a visualizar,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/06/patron-multiples-vistas-de-un-mismo-dato-en-tapestry"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-06-06T08:30:00Z</dc:date>
  </entry>
  <entry>
    <title>Alternativa a Hibernate u ORM y ejemplo de jOOQ</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq" />
    <category term="blog-stack" />
    <category term="programacion" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-05-29T18:00:00Z</updated>
    <published>2015-05-29T18:00:00Z</published>
    <content type="html">&lt;p&gt;Los ORMs nos han facilitado el acceso a los datos de una base de datos relacional. Han solucionado algunos problemas y facilitado el acceso a los datos pero traído consigo otros nuevos como el problema N+1 o la perdida de control del modelo relacional. jOOQ forma parte de una nueva generación de herramientas que puede sustituir a otras como Hibernate. Y después de haberlo usado puede ser cierto. Con el auge de los lenguajes de programación orientados a objetos han surgido varias herramientas que intentan hacer que el trabajo de unir el mundo orientado a objetos del lenguaje que empleemos y el modelo relacional de las bases de datos sea más transparente, estas herramientas son conocidas como Object Realtiomal Mapping (ORM). Una de las más conocidas y usada en la plataforma Java es Hibernate.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/05/alternativa-a-hibernate-u-orm-y-ejemplo-de-jooq"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-05-29T18:00:00Z</dc:date>
  </entry>
  <entry>
    <title>10 razones para seguir usando Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/05/1-razones-para-seguir-usando-java" />
    <category term="opinion" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-05-22T15:00:00Z</updated>
    <published>2015-05-22T15:00:00Z</published>
    <content type="html">&lt;p&gt;El sábado 23 de mayo de 2015 el lenguaje Java cumple 20 años de historia y aún hoy Java sigue siendo uno de los lenguajes de programación preferidos para desarrollar en un mundo tecnológico en el que unos pocos años pueden darse grandes cambios y en dos décadas ver surgir nuevas tecnologías y verlas languidecer. Algunas personas se jactan y hablan con un tono de desprecio y mofa nada agradable hacia Java mostrando su desconocimiento o prejuicios siguiendo algunos tópicos bastante difundidos la mayoría incorrectos. A otras personas quizá no les gusta Java no tanto por el lenguaje como por los proyectos que ha desarrollado en él, en consultoras cárnicas, para clientes con condiciones laborales paupérrimas, con tecnologías, librerías y frameworks obsoletos o códigos heredados programados por programadores[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/05/1-razones-para-seguir-usando-java"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-05-22T15:00:00Z</dc:date>
  </entry>
  <entry>
    <title>Programación de juegos y 3D en Java con jMonkeyEngine</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-05-09T13:30:00Z</updated>
    <published>2015-05-09T08:18:40Z</published>
    <content type="html">&lt;p&gt;Erróneamente se sigue pensado que Java es un lenguaje lento en ejecución, en las primeras versiones era cierto pero hoy la realidad es que con las mejoras introducidas en cada versión de Java y la máquina virtual el rendimiento actual es comparable a C y C++. En la programación de juegos y 3D gran parte del proceso de representación gráfica se ha descargado de la CPU a las cada vez más potentes tarjetas gráficas, la potencia de estas GPU son las que determinan la capacidad de proceso gráfico y la calidad gráfica de los juegos. Java no suele ser considerado como opción para programar videojuegos triple AAA pero ahí está Minecraft uno de los juegos más populares y un ejemplo de que un juego de buena calidad y rendimiento también se puede hacer en Java. Hay algunos otros ejemplos notables como[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/05/programacion-de-juegos-y-3d-en-java-con-jmonkeyengine"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-05-09T08:18:40Z</dc:date>
  </entry>
  <entry>
    <title>Escribir en varios «Writer» a la vez</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/escribir-en-varios-writer-a-la-vez" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="java" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-30T18:00:47Z</updated>
    <published>2015-04-30T18:00:47Z</published>
    <content type="html">&lt;p&gt;Hace un tiempo tuve necesidad de generar cierto contenido sobre varios writers, la necesidad en concreto era generar un archivo xml en disco y al mismo tiempo el mismo contenido para un correo electrónico. Para no escribir lo mismo en dos Writer diferentes la solución fue crear un writer y este fuese el que escribiese el contenido que se le enviaba sobre varios writers. En la API de Java no hay una clase específica que haga esto pero es muy sencillo hacer una implementación que lo haga, esto va a ser lo que explicaré en el siguiente artículo. Para hacer que el contenido de un writer se escriba a varios deberemos extender la clase Writer de esta manera su uso será como la de cualquier otro Writer. Lo especial de la implementación del writer es que su misión será realizar la misma operación que[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/escribir-en-varios-writer-a-la-vez"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-30T18:00:47Z</dc:date>
  </entry>
  <entry>
    <title>Certificado SSL, de empresa, «wildcard» y de validación extendida</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida" />
    <category term="planeta-arch-linux" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="seguridad" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-25T10:00:00Z</updated>
    <published>2015-04-25T08:07:04Z</published>
    <content type="html">&lt;p&gt;Usar un protocolo seguro garantiza de que los datos intercambiados entre el cliente y el servidor no son leídos ni modificados por una tercera parte además de verificar que la comunicación se está realizando entre las partes que dicen ser. Para usar un protocolo seguro como SSL/TLS debemos disponer de con certificado, con OpenSSL podemos generar y convertirlo al formato que deseemos, sin embargo, para que el usuario tenga garantía de que el certificado es válido este se debe estar firmado por una autoridad de certificación (CA) en la que confíe, generalmente con una de las autoridades de certificación cuyos certificados están preinstalados en el navegador web (en Firefox podemos verlos en Preferencias &gt; Avanzado &gt; Certificados &gt; Ver certificados), los certificados autofirmados son útiles para[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/certificado-ssl-de-empresa-wildcard-y-de-validacion-extendida"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-25T08:07:04Z</dc:date>
  </entry>
  <entry>
    <title>Nueva visita a 5+ opciones de «hosting» para aplicaciones</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2015/04/nueva-visita-a-5-opciones-de-hosting-para-aplicaciones" />
    <category term="planeta-arch-linux" />
    <category term="programacion" />
    <category term="blog-stack" />
    <category term="planeta-linux" />
    <category term="planeta-codigo" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2015-04-24T20:00:00Z</updated>
    <published>2015-04-17T17:56:10Z</published>
    <content type="html">&lt;p&gt;Hace tres años escribí un artículo sobre varias opciones de hosting que disponemos para hospedar aplicaciones o páginas web. En ese artículo comentaba varias posibilidades desde un servidor propio usando una Raspberry Pi, proveedores de hosting, Amazon EC2, Google App Engine, Jelastic, OpenShift, AppFog, Cloud Foundry (VMWare), Heroku, Azure (Microsoft) y Google Compute (Google Cloud Platform). Pasado todo este tiempo en este artículo revisaré las opciones de hospedaje con algunas nuevas que en su momento no conocía, otras siguen siendo totalmente válidas. Servidor propio Si queremos una opción para algo simple y para nosotros mismos podemos utilizar un servidor propio usando como hardware por ejemplo una Raspberry Pi 2 Model B, con la segunda versión de este miniordenador que ahora tiene 4[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2015/04/nueva-visita-a-5-opciones-de-hosting-para-aplicaciones"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2015-04-17T17:56:10Z</dc:date>
  </entry>
</feed>

