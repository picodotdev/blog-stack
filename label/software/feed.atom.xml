<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2014-10-28T20:23:23Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2014-10-28T20:23:23Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Configuración usando código Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/09/configuracion-usando-codigo-java" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-09-26T17:18:20Z</updated>
    <published>2014-09-26T17:18:20Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;En las dos &amp;uacute;ltimas entradas he explicado &lt;a href="http://picodotdev.github.io/blog-bitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java/"&gt;como compilar un archivo de c&amp;oacute;digo fuente Java desde una aplicaci&amp;oacute;n&lt;/a&gt; y como cargar esa clase compilada de forma din&amp;aacute;mica para ser utilizada en un programa, la segunda entrada trataba el &lt;a href="http://picodotdev.github.io/blog-bitix/2014/09/monitorizar-cambios-en-archivos-con-java/"&gt;como monitorizar un directorio o archivo para ver si han tenido cambios&lt;/a&gt; con la nueva API que a partir de Java 7 disponemos.&lt;/p&gt; 
&lt;p&gt;En esta entrada quiero explicar un ejemplo de como aprovechar estas dos funcionalidades diferentes en un caso pr&amp;aacute;ctico y que nos puede ser &amp;uacute;til en alg&amp;uacute;n caso. La idea del ejemplo es definir la configuraci&amp;oacute;n de una aplicaci&amp;oacute;n como podr&amp;iacute;a ser una aplicaci&amp;oacute;n web en un archivo de c&amp;oacute;digo fuente Java y que cuando se produjese alg&amp;uacute;n cambio se recargase de forma din&amp;aacute;mica.&lt;/p&gt; 
&lt;p&gt;Algunas ventajas de definir la configuraci&amp;oacute;n de la aplicaci&amp;oacute;n de esta manera son las siguientes:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/09/configuracion-usando-codigo-java"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-09-26T17:18:20Z</dc:date>
  </entry>
  <entry>
    <title>Monitorizar archivos con Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/09/monitorizar-archivos-con-java" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-09-20T07:27:35Z</updated>
    <published>2014-09-20T07:27:35Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Java a partir de la versi&amp;oacute;n 7 del JDK ofrece el soporte para recibir notificaciones de cambios en el sistema de archivos sin tener que estar monitoriz&amp;aacute;ndolos constantemente en busca de actividad. No tener que estar monitorizando los archivos de &lt;a href="http://es.wikipedia.org/wiki/Polling"&gt;forma &amp;laquo;polling&amp;raquo;&lt;/a&gt; para buscar cambios adem&amp;aacute;s de hacer que el c&amp;oacute;digo sea m&amp;aacute;s sencillo desde el punto de vista de la programaci&amp;oacute;n hace que no se malgasten recursos del sistema si los cambios son espor&amp;aacute;dicos.&lt;/p&gt; 
&lt;p&gt;Para ofrecer esta funcionalidad y a partir de Java 7 hay disponibles unas pocas nuevas clases dentro de lo que se conoce como la &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/nio/package-summary.html"&gt;nueva API de entrada y salida (NIO)&lt;/a&gt; que sustituye al m&amp;eacute;todo tradicional de entrada y salida con las clases del paquete &lt;a href="http://docs.oracle.com/javase/7/docs/api/java/io/package-summary.html"&gt;java.io&lt;/a&gt; entre otras cosas para trabajar con el sistema de archivos.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/09/monitorizar-archivos-con-java"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-09-20T07:27:35Z</dc:date>
  </entry>
  <entry>
    <title>Compilar y cargar de forma dinámica una clase Java</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-09-13T22:00:00Z</updated>
    <published>2014-09-12T17:49:55Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" alt="Java" title="Java" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Desde la versi&amp;oacute;n 1.6 del JDK disponemos de una API para acceder al compilador desde un programa Java. En el ejemplo de este art&amp;iacute;culo utilizar&amp;eacute; varias clases de esa API para conseguir compilar un archivo con la definici&amp;oacute;n de una clase Java y posteriormente instanciarla y usarla. En posteriores art&amp;iacute;culos comentar&amp;eacute; un ejemplo pr&amp;aacute;ctico y muy &amp;uacute;til con el que podemos sacar provecho de esta funcionalidad.&lt;/p&gt; 
&lt;p&gt;Las clases que necesitaremos de esa API son:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;&lt;a href="http://docs.oracle.com/javase/7/docs/api/javax/tools/JavaCompiler.html"&gt;JavaCompiler&lt;/a&gt; que es la interfaz para acceder al compilador desde un programa Java.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://docs.oracle.com/javase/7/docs/api/javax/tools/JavaFileManager.html"&gt;JavaFileManager&lt;/a&gt; que es una abstracci&amp;oacute;n para gestionar los archivos fuente y las clases. Usaremos uno propio llamado ClassFileManager.&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://docs.oracle.com/javase/7/docs/api/javax/tools/SimpleJavaFileObject.html"&gt;SimpleJavaFileObject&lt;/a&gt; clase que contiene el c&amp;oacute;digo fuente Java.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Y tambi&amp;eacute;n necesitaremos redefinir algunas:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/09/compilar-y-cargar-de-forma-dinamica-una-clase-java"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-09-12T17:49:55Z</dc:date>
  </entry>
  <entry>
    <title>Procesador de documentos LyX</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/09/procesador-de-documentos-lyx" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-09-07T01:00:00Z</updated>
    <published>2014-09-05T11:12:12Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/lyx.png" alt="LyX" title="LyX" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Hace unos d&amp;iacute;as publiqu&amp;eacute; una &lt;a href="http://picodotdev.github.io/blog-bitix/2014/08/actualizacion-del-libro-plugin-tapestry/"&gt;nueva edici&amp;oacute;n del libro PlugIn Tapestry&lt;/a&gt;, sobre el framework &lt;a href="http://tapestry.apache.org"&gt;Apache Tapestry&lt;/a&gt; para el desarrollo de p&amp;aacute;ginas y aplicaciones web con Java. En este art&amp;iacute;culo quiero recoger las herramientas que utilic&amp;eacute; para escribirlo y algunas cosas b&amp;aacute;sicas a conocer para tener un libro con un aspecto decente y m&amp;aacute;s prefesional. Son cosas muy b&amp;aacute;sicas pero que a mi me costo un poco poco encontrarlas para conseguir lo que quer&amp;iacute;a, quiz&amp;aacute; a alguien le sirvan.&lt;/p&gt; 
&lt;h2&gt;Herramientas&lt;/h2&gt; 
&lt;p&gt;Empec&amp;eacute; evaluando la herramienta m&amp;aacute;s adecuada para escribir el libro, en un principio empec&amp;eacute; con &lt;a href="https://docs.google.com/"&gt;Google Docs&lt;/a&gt;, tambi&amp;eacute;n con &lt;a href="http://www.libreoffice.org/"&gt;LibreOffice&lt;/a&gt;, sin embargo, al final descubr&amp;iacute; &lt;a href="http://www.lyx.org/"&gt;LyX&lt;/a&gt; y fu&amp;eacute; el que emple&amp;eacute;. &amp;iquest;Por que LyX? Porque al contrario de Google Docs y LibreOffice que son procesadores de textos LyX es un procesador de documentos &amp;iquest;que significa esto? Que con LyX te centras casi exclusivamente en escribir el contenido del libro no de estar formate&amp;aacute;ndolo. Como procesador de documentos hace que no tengas tanto control sobre los estilos pero a la vez hace que todo el libro tenga un formato homog&amp;eacute;neo y no tengas que &amp;laquo;microgestionar&amp;raquo; el estilo de cada elemento, en un documento grande de m&amp;aacute;s de 250 p&amp;aacute;ginas es muy &amp;uacute;til y te evita casi todo el trabajo de mantener la coherencia en los estilos, ahorr&amp;aacute;ndole a uno mucho tiempo.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/09/procesador-de-documentos-lyx"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-09-05T11:12:12Z</dc:date>
  </entry>
  <entry>
    <title>Actualización del libro PlugIn Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/08/actualizacion-del-libro-plugin-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-08-29T22:16:10Z</updated>
    <published>2014-08-29T22:16:10Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Hace un poco m&amp;aacute;s de una a&amp;ntilde;o publiqu&amp;eacute; el &lt;a href="http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/"&gt;libro PlugIn Tapestry&lt;/a&gt; que como su nombre ya adelanta versa sobre el framework &lt;a href="http://tapestry.apache.org"&gt;Apache Tapestry&lt;/a&gt; para el desarrollo de aplicaciones y p&amp;aacute;ginas web con Java. Casi 300 p&amp;aacute;ginas de documentaci&amp;oacute;n que describen este framework, como usarlo y va m&amp;aacute;s all&amp;aacute; explicando como realizar algunas de las tareas comunes que es necesario hacer en casi todas las aplicaciones web independientemente del framework que elijamos pero en este caso visto desde el punto de vista de Tapestry.&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry.png" title="Libro sobre Apache Tapestry"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry-thumb.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;En esta actualizaci&amp;oacute;n he revisado cap&amp;iacute;tulos como el Inicio r&amp;aacute;pido para empezar a desarrollar en unos pocos minutos, la secci&amp;oacute;n que trata sobre Plantillas para dar a las p&amp;aacute;ginas un aspecto com&amp;uacute;n, la secci&amp;oacute;n que trata sobre unas Convenciones para los archivos de literales, ampliada la secci&amp;oacute;n de Principios en la que se detalla cuales son las ideas y objetivos por los que se rige el framework, tambi&amp;eacute;n reescrita la secci&amp;oacute;n de Integraci&amp;oacute;n con Spring, una de las librer&amp;iacute;as m&amp;aacute;s usadas y que facilita el desarrollo enormemente.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/08/actualizacion-del-libro-plugin-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-08-29T22:16:10Z</dc:date>
  </entry>
  <entry>
    <title>Doble barra de botones con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/08/doble-barra-de-botones-con-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-08-29T11:04:52Z</updated>
    <published>2014-08-29T11:04:52Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Por motivos de usabiliad en algunas p&amp;aacute;ginas se incluyen dos barra de botones, una antes de una larga secci&amp;oacute;n y otra despu&amp;eacute;s. El motivo de la doble barra de botones inicial es que no sea necesario hacer &amp;laquo;scroll&amp;raquo; hasta el final de la p&amp;aacute;gina para acceder a los botones y realizar la acci&amp;oacute;n que permitan. Por el contrario, inlcuir la barra de botones al final de la p&amp;aacute;gina permite que una vez seleccionados los elementos o revisado el contenido de la secci&amp;oacute;n hacer disponibles las acciones que es probable que se quieran realizar.&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/39/doble-barra-botones.png" title="Doble barra de botones"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/39/doble-barra-botones-thumb.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Dependiendo del framework web que utilicemos podremos hacerlo de una o varias formas pero de lo que estamos seguros es que copiar y pegar haciendo que el c&amp;oacute;digo est&amp;eacute; duplicado no es una buena idea por los problemas de mantenimiento que puede suponer. Pero crear una peque&amp;ntilde;a plantilla o archivo exclusivo para incluir la barra de botones tampoco es la soluci&amp;oacute;n ideal, &amp;iquest;por que? pues porque creando un archivo espec&amp;iacute;fico con la botonera puede que nos ocasione un problema que denominar&amp;eacute; de &amp;laquo;microgesti&amp;oacute;n&amp;raquo;, es decir, nos obliga a crear un mont&amp;oacute;n de peque&amp;ntilde;os archivos peque&amp;ntilde;itos y hacer referencia o utilizar el mecanismo de inclusi&amp;oacute;n que dispongamos para usar el contenido en unos de otros. En una aplicaci&amp;oacute;n grande esta microgesti&amp;oacute;n si nos vemos obligados a ella puede llegar a ser molesta al desarrollar cuanto menos.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/08/doble-barra-de-botones-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-08-29T11:04:52Z</dc:date>
  </entry>
  <entry>
    <title>Forzar el uso del protocolo https en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-08-22T09:09:23Z</updated>
    <published>2014-08-22T09:09:23Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;El &lt;a href="http://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol_Secure"&gt;protocolo seguro https&lt;/a&gt; hace que los datos que viajan entre el servidor y el cliente a trav&amp;eacute;s de internet est&amp;eacute;n cifrados de modo que nadie m&amp;aacute;s pueda saber cual es es la informaci&amp;oacute;n intercambiada ni se pueda alterar sin el conocimiento entre las dos partes. Estas propiedades nos son de inter&amp;eacute;s para ciertas partes de una aplicaci&amp;oacute;n o en algunos casos la aplicaci&amp;oacute;n entera. &amp;iquest;Cuales son estos casos? Son aquellos en los que queramos garantizar una mayor seguridad, estos pueden ser para proteger usuarios y contrase&amp;ntilde;as de autenticaci&amp;oacute;n para iniciar sesi&amp;oacute;n, ciertos datos sensibles como datos personales, datos de tarjetas de cr&amp;eacute;dito, … evitando que una tercera parte los obtenga y los utilice para su provecho propio y supongan un problema de seguridad en la aplicaci&amp;oacute;n.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/08/forzar-el-uso-del-protocolo-https-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-08-22T09:09:23Z</dc:date>
  </entry>
  <entry>
    <title>De Arch Linux a Arch Linux</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/08/de-arch-linux-a-arch-linux" />
    <category term="blog-stack" />
    <category term="linux" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-08-15T08:00:00Z</updated>
    <published>2014-08-08T22:07:58Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/archlinux.png" alt="Arch Linux" title="Arch Linux" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Ya llevo usando algo m&amp;aacute;s de 4 a&amp;ntilde;os &lt;a href="https://wiki.archlinux.org"&gt;Arch Linux&lt;/a&gt; de forma continuada desde que definitivamente hice el paso desde Windows seg&amp;uacute;n comentaba en &lt;a href="http://elblogdepicodev.blogspot.com.es/2010/03/de-windows-arch-linux.html"&gt;mi camino de Windows a Arch Linux&lt;/a&gt; como sistema de mi ordenador personal. Pas&amp;eacute; un poco de tiempo usando &lt;a href="https://www.debian.org/"&gt;Debian&lt;/a&gt; y evaluando &lt;a href="http://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt;, &lt;a href="https://fedoraproject.org/"&gt;Fedora&lt;/a&gt;, y &lt;a href="http://www.opensuse.org/es/"&gt;openSUSE&lt;/a&gt; pero al final la distribuci&amp;oacute;n que eleg&amp;iacute; fue Arch Linux.&lt;/p&gt; 
&lt;p&gt;La raz&amp;oacute;n de elegir Arch Linux fue que me dio muchos menos problemas configurar todos los dispositivos, por ser una &lt;a href="http://en.wikipedia.org/wiki/Rolling_release"&gt;distribuci&amp;oacute;n rolling release&lt;/a&gt; con lo que en todo momento ten&amp;iacute;a las &amp;uacute;ltimas versiones de cada programa y dispon&amp;iacute;a en poco tiempo las nuevas mejoras que se iban incorporando a ellos evitando a los pocos meses estar con la sensaci&amp;oacute;n de tener programas que han quedado superados con nuevas versiones y no tener que esperar al siguiente iteraci&amp;oacute;n de una nueva versi&amp;oacute;n para disponer de ellas (o usar para cada programa un PPA), adem&amp;aacute;s ten&amp;iacute;a los programas que yo decid&amp;iacute;a y no los que los desarrolladores de la distribuci&amp;oacute;n preinstalaban por mi. Cualquier otra distribuci&amp;oacute;n linux de las que he mencionado son de gran calidad y son usadas por mucha gente, simplemente en mi caso Arch Linux se adaptaba mejor a lo que buscaba y no era yo el que me adaptaba a la distribuci&amp;oacute;n. Tambi&amp;eacute;n me gustaba &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/08/de-arch-linux-a-arch-linux"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-08-08T22:07:58Z</dc:date>
  </entry>
  <entry>
    <title>Experiencia instalando sistema operativo a ordenador viejo</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/08/experiencia-instalando-sistema-operativo-a-ordenador-viejo" />
    <category term="blog-stack" />
    <category term="linux" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-08-15T07:18:07Z</updated>
    <published>2014-08-15T07:18:07Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/archlinux.png" alt="Arch Linux" title="Arch Linux" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Hace unos meses como suele ser habitual en los inform&amp;aacute;ticos me pidieron que formatease e instalase los programas necesarios en un ordenador port&amp;aacute;til, m&amp;aacute;s concretamente en un ordenador que a la velocidad que evoluciona la tecnolog&amp;iacute;a podr&amp;iacute;a considerarse obsoleto. El modelo exacto era un Acer Aspire 2000 dise&amp;ntilde;ado para Windows XP con las siguientes caracter&amp;iacute;sticas:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;CPU: Intel Pentium M (i686)&lt;/li&gt; 
 &lt;li&gt;Memoria: 1 GiB&lt;/li&gt; 
 &lt;li&gt;Pantalla: 15.4&amp;quot;, 1280 x 800&lt;/li&gt; 
 &lt;li&gt;Tarjeta gr&amp;aacute;fica: ATI Radeon 9200 (64 MiB)&lt;/li&gt; 
 &lt;li&gt;WiFi: 802.11b&lt;/li&gt; 
 &lt;li&gt;&lt;a href="http://www.miniputer.com/Acer/Aspire_2000.html"&gt;Caracter&amp;iacute;sticas Acer Aspire 2000 completas&lt;/a&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;Como puede verse por las caracter&amp;iacute;sticas no es un ordenador muy potente para los d&amp;iacute;as de hoy pero que puede ser suficiente para navegar por internet, ver v&amp;iacute;deos, escuchar m&amp;uacute;sica y realizar tareas ofim&amp;aacute;ticas.&lt;/p&gt; 
&lt;p&gt;Teniendo claro las caracter&amp;iacute;sticas del ordenador y el uso que se le iba a dar me tocaba decidir que sistema operativo le iba a instalar. La primera opci&amp;oacute;n que consider&amp;eacute; por ser la opci&amp;oacute;n que usaba el port&amp;aacute;til de f&amp;aacute;brica fue instalarle Windows XP (por supuesto usando una copia sin la correspondiente licencia) pero una vez instalado comenzaron los problemas para que todo funcionase correctamente, la gr&amp;aacute;fica no era detectada y la pantalla se mostraba en una resoluci&amp;oacute;n menor que la que ofrec&amp;iacute;a la pantalla, la conexi&amp;oacute;n WiFi no funcionaba por no tener los controladores necesarios y tampoco el sonido por el mismo motivo. A pesar de haber buscado no consegu&amp;iacute; encontrar los controladores adecuados tanto para la tarjeta gr&amp;aacute;fica como para la WiFi con lo que el sistema resultante iba a quedar menos aprovechado de lo que pudiera.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/08/experiencia-instalando-sistema-operativo-a-ordenador-viejo"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-08-15T07:18:07Z</dc:date>
  </entry>
  <entry>
    <title>Usar Apache Tapestry en una aplicación «standalone»</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-31T11:06:58Z</updated>
    <published>2014-07-31T11:06:58Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; es un framework de desarrollo para aplicaciones o p&amp;aacute;ginas web en el que habitualmente se emplea el lenguaje Java y se despliega en un servidor de aplicaciones como entorno de ejecuci&amp;oacute;n. Pero Tapestry es una pieza de software que se compone de diferentes partes algunas de las cuales pueden ser utilizadas fuera del contexto de una aplicaci&amp;oacute;n web. Este es el caso del contenedor de dependencias que proporciona &lt;a href="http://en.wikipedia.org/wiki/Inversion_of_control"&gt;IoC&lt;/a&gt; (IoC, &amp;laquo;Inversion of Control&amp;raquo;) en Tapestry, podemos usarlo en una aplicaci&amp;oacute;n &amp;laquo;standalone&amp;raquo;, es decir, en un programa que se inicia con el t&amp;iacute;pico &amp;laquo;public static void main(String[] args)&amp;raquo; de las aplicaciones Java.&lt;/p&gt; 
&lt;p&gt;El contenedor de dependencias de Tapestry tiene algunas propiedades interesantes como que dos servicios pueden ser mutuamente dependientes y que se puede contribuir configuraci&amp;oacute;n a cualquier servicio para cambiar en cierta medida su comportamiento adem&amp;aacute;s de otras caracter&amp;iacute;sticas que explico m&amp;aacute;s en detalle en el libro &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/usar-apache-tapestry-en-una-aplicacion-standalone"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-31T11:06:58Z</dc:date>
  </entry>
  <entry>
    <title>Servir recursos estáticos desde un CDN en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-26T19:00:00Z</updated>
    <published>2014-07-26T10:35:50Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Un &lt;a href="http://en.wikipedia.org/wiki/Content_delivery_network"&gt;Content Delivery Network&lt;/a&gt; (CDN) no es m&amp;aacute;s que un servidor, servidores o servicio dedicado a servir el contenido est&amp;aacute;tico o actuar de cache para los clientes. Alguno de los motivos por los que podr&amp;iacute;amos querer usar un CDN en una aplicaci&amp;oacute;n son:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Algunos servicios CDN est&amp;aacute;n repartidos geogr&amp;aacute;ficamente por el mundo de modo que el contenido sea servido de un lugar m&amp;aacute;s cercano al usuario esto hace que el tiempo que tarda en cargar un p&amp;aacute;gina o servirse el contenido sea menor.&lt;/li&gt; 
 &lt;li&gt;Descargar la tarea de servir al menos parte del contenido de la aplicaci&amp;oacute;n al CDN har&amp;aacute; que no nos tengamos que preocupar de tener la capacidad para servirlo. Cuando se cargar una p&amp;aacute;gina se hacen varias peticiones al servidor para obtener el contenido como el html, im&amp;aacute;genes, estilos, … haciendo que los contenidos est&amp;aacute;ticos sean servidos por el CDN har&amp;aacute; que el servidor tenga menos carga, dependiendo del n&amp;uacute;mero de usuarios de la aplicaci&amp;oacute;n o los picos de tr&amp;aacute;fico notaremos una mejor&amp;iacute;a.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/servir-recursos-estaticos-desde-un-cdn-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-26T10:35:50Z</dc:date>
  </entry>
  <entry>
    <title>Anotación Cached de Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/anotacion-cached-de-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-19T19:00:00Z</updated>
    <published>2014-07-18T19:30:20Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Como he comentado en un art&amp;iacute;culo anterior sobre los &lt;a href="http://picodotdev.github.io/blog-bitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web/"&gt;modelos push y pull empleados en los motores de plantillas&lt;/a&gt; donde comentaba algunas diferencias entre ellos, en el modelo pull es la vista la que pide los datos al controlador y no el controlador el que proporciona los datos a la vista como se hace en el modelo push. Un problema que puede plantear el que la vista pida los datos al controlador es que si la devoluci&amp;oacute;n de los datos solicitados son costosos en tiempo del c&amp;aacute;lculo, carga para el sistema en CPU o memoria, o intensivos en entrada/salida de disco o red y se piden varias veces puede suponer como resultado que el tiempo empleado para generar la p&amp;aacute;gina sea elevado o la aplicaci&amp;oacute;n consuma recursos innecesarios.&lt;/p&gt; 
&lt;p&gt;&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; que emplea el modelo pull dispone de la &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/anotacion-cached-de-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-18T19:30:20Z</dc:date>
  </entry>
  <entry>
    <title>Plantillas en Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/plantillas-en-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-11T18:54:34Z</updated>
    <published>2014-07-11T18:54:34Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Una p&amp;aacute;gina web est&amp;aacute; formada por un conjunto de p&amp;aacute;ginas enlazadas entre ellas. Cada p&amp;aacute;gina est&amp;aacute; formado por un html diferente pero normalmente todas las p&amp;aacute;ginas de una misma web comparten el mismo aspecto variando solo una secci&amp;oacute;n donde est&amp;aacute; el contenido propio de la p&amp;aacute;gina. La cabecera de la p&amp;aacute;gina, el pie de la p&amp;aacute;gina o los men&amp;uacute;s de navegaci&amp;oacute;n suelen estar presentes en todas las p&amp;aacute;ginas de la web y suelen ser los mismos.&lt;/p&gt; 
&lt;p&gt;En este art&amp;iacute;culo voy a explicar como crear un componente que nos de a todas las p&amp;aacute;ginas un aspecto com&amp;uacute;n de una aplicaci&amp;oacute;n usando apache Tapestry como framework web de tal forma que esa parte com&amp;uacute;n no est&amp;eacute; duplicada en la aplicaci&amp;oacute;n y pueda ser reutilizada f&amp;aacute;cilmente. En el caso de &lt;a href="http://www.blogstack.info"&gt;Blog Stack&lt;/a&gt; las p&amp;aacute;ginas se componen de las siguientes partes.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/plantillas-en-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-11T18:54:34Z</dc:date>
  </entry>
  <entry>
    <title>Arquitectura y hospedaje de Blog Stack</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/arquitectura-y-hospedaje-de-blog-stack" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-10T19:00:00Z</updated>
    <published>2014-05-16T15:21:55Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/blogstack.png" alt="Blog Stack" title="Blog Stack" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Normalmente en esta bit&amp;aacute;cora suelo poner ejemplos para explicar como funciona una determinada herramienta, son ejemplos que podr&amp;iacute;an aprovecharse para algo productivo pero para mantenerlos simples por si mismos no suelen serlo. En esta entrada voy a comentar cual es la arquitectura y como est&amp;aacute; alojado &lt;a href="http://www.blogstack.info/"&gt;Blog Stack&lt;/a&gt;, que es un ejemplo de algo pr&amp;aacute;ctico y real por si la experiencia de este ejemplo le sirve de ayuda o de inspiraci&amp;oacute;n a alguien. En la red he encontrado comentada la experiencia de &lt;a href="http://damog.nl/blog/the-new-planeta-linux-engine.html"&gt;Planeta Linux&lt;/a&gt; y &lt;a href="http://gallir.wordpress.com/2009/12/30/como-montamos-meneame-en-amazon-ec2/"&gt;Meneame&lt;/a&gt;, otros proyectos web.&lt;/p&gt; 
&lt;p&gt;Blog Stack (BS) es una agregador, planeta, o fuente de informaci&amp;oacute;n de bit&amp;aacute;coras sobre programaci&amp;oacute;n, desarrollo, desarrollo &amp;aacute;gil, software, software libre, hardware, gnu/linux o en general temas relacionados con la tecnolog&amp;iacute;a, en definitiva es un servicio que est&amp;aacute; disponible en una direcci&amp;oacute;n de internet, &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/arquitectura-y-hospedaje-de-blog-stack"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-16T15:21:55Z</dc:date>
  </entry>
  <entry>
    <title>Modelo «push» contra modelo «pull» en frameworks web</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-07-07T18:00:00Z</updated>
    <published>2014-07-06T08:58:10Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;En la mayor&amp;iacute;a de frameworks de desarrollo de aplicaciones o p&amp;aacute;ginas web para producir el contenido HTML que se env&amp;iacute;a al cliente se emplea un modelo en el que el controlador proporciona los datos que combinados con una plantilla producen el HTML. Este modelo tambi&amp;eacute;n es el empleado habitualmente en muchos motores de plantillas (&lt;a href="http://www.thymeleaf.org/"&gt;thymeleaf&lt;/a&gt;, &lt;a href="http://mustache.github.io/"&gt;mustache&lt;/a&gt;, …). Sin embargo, hay dos modelos que se pueden seguir para producir un texto como resultado dada una plantilla y datos:&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li&gt;Push: este es el modelo comentado. El controlador recupera de antemano todos los datos que necesita la vista, el controlador tambi&amp;eacute;n determina la vista o plantilla que se usar. Combinando los datos y la plantilla se produce el resultado.&lt;/li&gt; 
&lt;/ul&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/30/modelo-push.png" title="Modelo push"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/30/modelo-push.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Los pasos que se siguen en este modelo son:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/07/modelo-push-contra-modelo-pull-en-frameworks-web"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-07-06T08:58:10Z</dc:date>
  </entry>
  <entry>
    <title>Hemeroteca #5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/hemeroteca-5" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="linux" />
    <category term="software" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-27T19:10:29Z</updated>
    <published>2014-06-27T19:10:29Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/octopress.png" alt="Octopress" title="Octopress" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Cada seis meses hago un recopilatorio de los art&amp;iacute;culos que he publicado durante este periodo de tiempo. En estos seis meses he mantenido mi ritmo de publicaci&amp;oacute;n de una entrada a la semana que publico casi siempre los viernes a la tarde, en total han sido 26 nuevos art&amp;iacute;culos con este. Los temas tratados durante este tiempo han sido en gran medida la programaci&amp;oacute;n, un poco de linux y la Raspberry Pi y el an&amp;aacute;lisis de un SSD.&lt;/p&gt; 
&lt;p&gt;A destacar durante este semestre ha sido que he publicado un proyecto personal, Blog Stack. &lt;a href="http://www.blogstack.info/"&gt;Blog Stack&lt;/a&gt; es una agregador o planeta de bit&amp;aacute;coras sobre desarrollo, programaci&amp;oacute;n, gnu/linux y tecnolog&amp;iacute;a. A casi todos los bloggeros que le he propuesto agregarle a Blog Stack me han contestado positivamente. 17 son las bit&amp;aacute;coras agregadas actualmente y aunque no son muchas hacen que pr&amp;aacute;cticamente todos los d&amp;iacute;as haya algo nuevo que leer. En un art&amp;iacute;culo hac&amp;iacute;a la presentaci&amp;oacute;n del proyecto y en otro explicaba cual es el funcionamiento en cuanto a hospedaje y arquitectura (interesante para aquellos que quieran realizar un proyecto en internet con un coste m&amp;iacute;nimo). Son los siguientes art&amp;iacute;culos:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/hemeroteca-5"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-27T19:10:29Z</dc:date>
  </entry>
  <entry>
    <title>Iniciar rápidamente aplicación con Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-20T21:08:07Z</updated>
    <published>2014-06-20T21:08:07Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Un proyecto web en Java requiere de unos cuantos archivos con cierta estructura que nos puede llevar un tiempo en crearlos. Normalmente cuando empezamos uno nuevo proyecto solemos basarnos en otro existente copiando y pegando contenido de &amp;eacute;l. Pero ademas de tiempo podemos cometer errores o no seguir algunas convenciones propias de Java o del framework web que usemos. Para un proyecto grande esa dedicaci&amp;oacute;n al inicio del proyecto no nos importar&amp;aacute; pero para un proyecto peque&amp;ntilde;o o para hacer una prueba puede que queramos tener algo m&amp;aacute;s r&amp;aacute;pido y con menos esfuerzo para estar en disposici&amp;oacute;n de empezar a desarrollar en muy poco tiempo.&lt;/p&gt; 
&lt;p&gt;Para crear el esqueleto de una aplicaci&amp;oacute;n r&amp;aacute;pidamente en Tapestry hay disponible un arquetipo de &lt;a href="http://maven.apache.org/"&gt;Maven&lt;/a&gt; que puede generar una aplicaci&amp;oacute;n en unos pocos minutos. Para usarlo deberemos instalar maven previamente. Una vez instalado Maven basta con que usemos el siguiente comando.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/iniciar-rapidamente-aplicacion-con-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-20T21:08:07Z</dc:date>
  </entry>
  <entry>
    <title>Página Dashboard de Apache Tapestry</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/pagina-dashboard-de-apache-tapestry" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-13T15:37:24Z</updated>
    <published>2014-06-13T15:37:24Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Con la versi&amp;oacute;n 5.4 de Tapestry las &lt;a href="http://elblogdepicodev.blogspot.com.es/2012/08/paginas-pagecatalog-servicestatus-e.html"&gt;p&amp;aacute;ginas PageCatalog, ServiceStatus e HibernateStaticstis&lt;/a&gt; han sido unificadas en la p&amp;aacute;gina T5Dashboard por lo que ahora en una s&amp;oacute;la p&amp;aacute;gina tendremos toda la informaci&amp;oacute;n. Una de las caracter&amp;iacute;sticas m&amp;aacute;s importantes de Tapestry es ser muy informativo proporcionando mucha y descriptiva informaci&amp;oacute;n, esto se nota con la p&amp;aacute;gina de &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/07/personalizar-la-pagina-de-informe-de-error.html"&gt;informe de error incluso para las peticiones ajax&lt;/a&gt;, los mensajes de logging y con est&amp;aacute;s p&amp;aacute;ginas de informaci&amp;oacute;n de estado.&lt;/p&gt; 
&lt;p&gt;La p&amp;aacute;gina &lt;a href="http://tapestry.apache.org/5.4/apidocs/org/apache/tapestry5/corelib/pages/T5Dashboard.html"&gt;T5Dashboard&lt;/a&gt; est&amp;aacute; incluida en el propio core de &lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry&lt;/a&gt; y disponible en todas las aplicaciones en modo desarrollo y accediendo de forma local al servidor de aplicaciones. Si se incluye en la aplicaci&amp;oacute;n la dependencia tapestry-hibernate adem&amp;aacute;s en T5Dashboard podremos ver estad&amp;iacute;sticas de uso de Hibernate. La p&amp;aacute;gina T5Dashboard nos puede resultar muy &amp;uacute;til ya que nos proporciona mucha informaci&amp;oacute;n y alguna acci&amp;oacute;n interesante.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/pagina-dashboard-de-apache-tapestry"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-13T15:37:24Z</dc:date>
  </entry>
  <entry>
    <title>Detectar problema N+1 y obtener estadísticas de Hibernate con Grails</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/detectar-problema-n-1-y-obtener-estadisticas-de-hibernate-con-grails" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="grails" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-13T14:00:00Z</updated>
    <published>2014-05-30T18:30:00Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/grails.png" alt="Grails" title="Grails" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Una base de datos relacional guarda los datos de forma diferente al modelo orientado a objetos que utilizamos en lenguajes como &lt;a href="http://www.oracle.com/us/technologies/java/overview/index.html"&gt;Java&lt;/a&gt;, &lt;a href="http://www.microsoft.com/net"&gt;C#&lt;/a&gt; o &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt;. Los &lt;a href="http://en.wikipedia.org/wiki/Object-relational_mapping"&gt;ORM (Object-relational mapping)&lt;/a&gt; tratan de hacer una correspondencia entre los dos modelos, el relacional de las bases de datos y el orientado a objetos de los lenguajes. Una de las ventajas de usar en una aplicaci&amp;oacute;n un ORM para acceder a la base de datos es que podemos hacer una correspondencia entre los datos de una base de datos relacional y trabajar con esos datos utilizando el modelo orientado a objetos del lenguaje de programaci&amp;oacute;n que usemos.&lt;/p&gt; 
&lt;p&gt;Sin embargo, el ORM env&amp;iacute;a sentencias SQL para recuperar los datos de la base de datos relacional seg&amp;uacute;n vamos navegando con los m&amp;eacute;todos de acceso a otros objetos y sus relaciones. Depende de como el ORM haga las consultas para recuperar los datos de la base de datos relacional puede generar muchas SQL, producir un bajo rendimiento en la aplicaci&amp;oacute;n y una carga de trabajo considerable para la base de datos.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/detectar-problema-n-1-y-obtener-estadisticas-de-hibernate-con-grails"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-30T18:30:00Z</dc:date>
  </entry>
  <entry>
    <title>Guía para la creación de un blog con Octopress</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/03/guia-para-la-creacion-de-un-blog-con-octopress" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="blog" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-06T23:00:00Z</updated>
    <published>2014-03-14T17:19:24Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/octopress.png" alt="Octopress" title="Octopress" /&gt; 
&lt;/div&gt; 
&lt;p&gt;En la &lt;a href="http://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/"&gt;primera entrada de este blog usando Octopress&lt;/a&gt; ya comentaba las razones por las que he pasado de usar &lt;a href="http://www.blogger.com"&gt;Blogger&lt;/a&gt; a usar &lt;a href="http://octopress.org/"&gt;Octopress&lt;/a&gt;. Entre las razones del cambio estaban la posibilidad en Octopress de escribir en markdown, edici&amp;oacute;n desconectado (para textos e im&amp;aacute;genes), dise&amp;ntilde;o adaptable y m&amp;aacute;s personalizable, git y control de versiones, alojamiento en cualquier servidor web. A&amp;uacute;n sin ser Octpress tambi&amp;eacute;n tiene cosas mejorables pero desde luego me est&amp;aacute; resultando mucho mejor que blogger.&lt;/p&gt; 
&lt;p&gt;En esta entrada quiero escribir una gu&amp;iacute;a con los pasos necesarios para crear un blog en Octopress de forma r&amp;aacute;pida y algunas funcionalidades a tener en cuenta o que deberemos realizar.&lt;/p&gt; 
&lt;p&gt;Antes de empezar supondr&amp;eacute; que ya tenemos en nuestro sistema &lt;a href="https://www.archlinux.org/packages/extra/x86_64/ruby/"&gt;ruby&lt;/a&gt; y &lt;a href="https://www.archlinux.org/packages/extra/x86_64/git/"&gt;git&lt;/a&gt; instalados. En Linux basta con buscar el paquete correspondiente para nuestra distribuci&amp;oacute;n e instalarlo con el gestor de paquetes. Con &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/03/guia-para-la-creacion-de-un-blog-con-octopress"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-03-14T17:19:24Z</dc:date>
  </entry>
  <entry>
    <title>Ejecutar Apache Tapestry en el servidor de aplicaciones WildFly</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="tapestry" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-06-06T18:58:25Z</updated>
    <published>2014-06-06T18:58:25Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" alt="Apache Tapestry" title="Apache Tapestry" /&gt; 
 &lt;br /&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/wildfly.png" alt="WildFly" title="WildFly" /&gt; 
&lt;/div&gt; 
&lt;p&gt;Los class loaders del &lt;a href="http://picodotdev.github.io/blog-bitix/2014/02/servidor-de-aplicaciones-jboss-slash-wildfly/"&gt;servidor de aplicaciones JBoss)/WildFly&lt;/a&gt; habitualmente han dado alg&amp;uacute;n problema en la ejecuci&amp;oacute;n de las aplicaciones y la carga de clases. En versiones antiguas como la 4 se pod&amp;iacute;an producir conflictos entre las librer&amp;iacute;as de las aplicaciones y las librer&amp;iacute;as instaladas en el servidor ya que en &lt;a href="http://jbossas.jboss.org/"&gt;JBoss&lt;/a&gt; se buscaba las clases por defecto y primero en el class loader del servidor en vez de en el classloader de la aplicaci&amp;oacute;n (war). Ya en las &amp;uacute;ltimas versiones como JBoss 7 y &lt;a href="http://wildfly.org/"&gt;WildFly&lt;/a&gt; la forma de cargar las clases es m&amp;aacute;s parecido al modelo habitual que se sigue en las aplicaciones Java EE y en servidores como Tomcat buscando primero en el directorio classes WEB-INF/classes y entre las librer&amp;iacute;as de la carpeta WEB-INF/lib del archivo war. Adem&amp;aacute;s, con la inclusi&amp;oacute;n de JBoss Modules se puede seguir un esquema OSGi con lo que incluso podr&amp;iacute;amos usar simultaneamente en el servidor diferentes versiones de la misma librer&amp;iacute;a.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/06/ejecutar-apache-tapestry-en-el-servidor-de-aplicaciones-wildfly"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-06-06T18:58:25Z</dc:date>
  </entry>
  <entry>
    <title>Página de excepción de Grails</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/pagina-de-excepcion-de-grails" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <category term="grails" />
    <category term="java" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-05-30T18:00:00Z</updated>
    <published>2014-05-23T18:00:19Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/grails.png" alt="Grails" title="Grails" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;No es la primera vez que comento algo similar (&lt;a href="http://elblogdepicodev.blogspot.com.es/2012/08/paginas-pagecatalog-servicestatus-e.html"&gt;I&lt;/a&gt;, &lt;a href="http://elblogdepicodev.blogspot.com.es/2011/08/motivos-para-elegir-apache-tapestry.html"&gt;II&lt;/a&gt;) disponer de la mayor cantidad de informaci&amp;oacute;n cuando se produce una excepci&amp;oacute;n o un error en la aplicaci&amp;oacute;n es vital para determinar r&amp;aacute;pidamente la causa del error y para solucionarlo correctamente. Para disponer de esta informaci&amp;oacute;n podemos generar un archivo de log que nos permita revisar lo que pas&amp;oacute; en la aplicaci&amp;oacute;n en un determinado momento. En el momento de desarrollo tambi&amp;eacute;n nos puede interesar tener una p&amp;aacute;gina de excepci&amp;oacute;n informativa.&lt;/p&gt; 
&lt;p&gt;La p&amp;aacute;gina de error de &lt;a href="http://grails.org/"&gt;Grails&lt;/a&gt; por defecto da poca informaci&amp;oacute;n, a poco m&amp;aacute;s da la traza de la excepci&amp;oacute;n y un extracto de los archivos relacionados donde se ha producido, podr&amp;iacute;a ser mejor. Podr&amp;iacute;a informar de los par&amp;aacute;metros que se enviaron en la petici&amp;oacute;n, las cabeceras http o las cookies adem&amp;aacute;s de los par&amp;aacute;metros de sesi&amp;oacute;n, a veces esta informaci&amp;oacute;n nos puede servir para identificar la causa m&amp;aacute;s r&amp;aacute;pidamente ya que la excepci&amp;oacute;n puede estar produci&amp;eacute;ndose con el valor de un determinado par&amp;aacute;metro o un determinado navegador, esta informaci&amp;oacute;n no la tenemos en una simple traza de la excepci&amp;oacute;n.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/pagina-de-excepcion-de-grails"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-23T18:00:19Z</dc:date>
  </entry>
  <entry>
    <title>Que es y como añadir un origen de software en Ubuntu</title>
    <link rel="alternate" href="http://www.blogstack.info/post/elblogdeliher/2014/05/que-es-y-como-anadir-un-origen-de-software-en-ubuntu" />
    <category term="ubuntu" />
    <category term="software" />
    <category term="origen-de-software" />
    <category term="origen" />
    <category term="origen-software" />
    <author>
      <name>Liher</name>
    </author>
    <updated>2014-05-14T15:22:40Z</updated>
    <published>2014-05-14T15:22:40Z</published>
    <content type="html">&lt;p&gt;&lt;div&gt; 
 &lt;p&gt;En este articulo os voy a explicar lo que es un &lt;strong&gt;origen de software&lt;/strong&gt; y &lt;strong&gt;como a&amp;ntilde;adir y quitar uno&lt;/strong&gt; de nuestro ordenador en &lt;strong&gt;Ubuntu&lt;/strong&gt;. El proceso lo he hecho en Ubuntu 12.04 y Ubuntu 14.04 y en los dos casos el procedimiento es pr&amp;aacute;cticamente id&amp;eacute;ntico salvo las peque&amp;ntilde;as diferencias gr&amp;aacute;ficas.&lt;/p&gt; 
 &lt;p&gt;Lo primero es saber &lt;strong&gt;que es un origen de software&lt;/strong&gt;. Un origen de software es un repositorio o PPA, es decir, un sitio desde el cual podemos descargarnos programas o aplicaciones para instalarlas posteriormente en nuestro ordenador. Todas las distribuciones Linux los usan, algunas tienen los suyos propios y otras distribuciones usan repositorios de terceros. Ademas tambi&amp;eacute;n podemos a&amp;ntilde;adir mas &lt;strong&gt;or&amp;iacute;genes de software&lt;/strong&gt; si queremos de una forma bastante sencilla, las razones principales por las que nos puede interesar a&amp;ntilde;adir un origen de software a &lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/elblogdeliher/2014/05/que-es-y-como-anadir-un-origen-de-software-en-ubuntu"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Liher</dc:creator>
    <dc:date>2014-05-14T15:22:40Z</dc:date>
  </entry>
  <entry>
    <title>Firefox sigue mejorando la experiencia de navegación de los usuarios</title>
    <link rel="alternate" href="http://www.blogstack.info/post/placerdigital/2013/03/firefox-sigue-mejorando-la-experiencia-de-navegacion-de-los-usuarios" />
    <category term="navegadores" />
    <category term="blog-stack" />
    <category term="analisis" />
    <category term="software" />
    <category term="firefox" />
    <author>
      <name>Ricardo Barra</name>
    </author>
    <updated>2014-05-07T21:47:09Z</updated>
    <published>2013-03-13T21:49:05Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Soy un fan declarado de Firefox porque es uno de los mejores software creados por el hombre, y adem&amp;aacute;s porque es responsable de cambiar, para siempre, la forma en que navegamos. Probablemente Chrome no ser&amp;iacute;a lo que es sin la influencia de Firefox.&lt;/p&gt; 
&lt;p&gt;En las pr&amp;oacute;ximas actualizaciones de Firefox, &lt;a title="Firefox vuelve a ser el navegador m&amp;aacute;s r&amp;aacute;pido. Opera segundo, Chrome tercero." href="http://placerdigital.net/firefox-vuelve-a-ser-el-navegador-mas-rapido-opera-segundo-chrome-tercero/"&gt;actualmente el navegador m&amp;aacute;s r&amp;aacute;pido y completo del planeta&lt;/a&gt;, podr&amp;aacute;n apreciar 2 excelentes mejoras. La primera es &amp;uacute;til para leer archivos de texto plano (.txt). S&amp;eacute; que no es algo que ocurra muy seguido, pero cuando tenemos la mala suerte de pinchar en un link que lleva a un archivo de texto, la experiencia de leer algo como esto no es algo muy c&amp;oacute;modo, especialmente con ese scroll horizontal tan molesto:&lt;/p&gt; 
&lt;div style="width: 447px"&gt; 
 &lt;a href="http://placerdigital.net/pdblog/wp-content/uploads/2013/03/firefox-archivo-de-texto-con-scroll-horizontal.png"&gt;&lt;img alt="Archivo de texto con scroll horizontal" src="http://placerdigital.net/pdblog/wp-content/uploads/2013/03/firefox-archivo-de-texto-con-scroll-horizontal.png" width="437" height="271" /&gt;&lt;/a&gt; 
 &lt;p&gt;Archivo de texto con scroll horizontal&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Con la nueva funcionalidad, ser&amp;aacute; muy distinto:&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/placerdigital/2013/03/firefox-sigue-mejorando-la-experiencia-de-navegacion-de-los-usuarios"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Ricardo Barra</dc:creator>
    <dc:date>2013-03-13T21:49:05Z</dc:date>
  </entry>
  <entry>
    <title>¡Felices 15 años, Mozilla! Gracias por cambiar el mundo</title>
    <link rel="alternate" href="http://www.blogstack.info/post/placerdigital/2013/03/felices-15-anos-mozilla-gracias-por-cambiar-el-mundo" />
    <category term="aniversario" />
    <category term="navegadores" />
    <category term="blog-stack" />
    <category term="mozilla" />
    <category term="firefox-os" />
    <category term="software" />
    <category term="thunderbird" />
    <category term="firefox" />
    <author>
      <name>Ricardo Barra</name>
    </author>
    <updated>2014-05-07T21:47:09Z</updated>
    <published>2013-03-31T14:10:14Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;strong&gt;Mozilla&lt;/strong&gt;, la fundaci&amp;oacute;n &lt;strong&gt;sin fines de lucro&lt;/strong&gt; responsable de crear productos insuperables como Firefox o Thunderbird, cumple hoy 15 a&amp;ntilde;os.&lt;/p&gt; 
&lt;p&gt;En esa &amp;eacute;poca, la red se enfrenta a nuevas amenazas: los pop-ups, los virus, la poca variedad de software para elegir, ante lo cual un peque&amp;ntilde;o grupo de personas -dise&amp;ntilde;adores, programadores y gente com&amp;uacute;n y corriente- tuvo la audaz idea de que una diminuta organizaci&amp;oacute;n sin fines de lucro m&amp;aacute;s una enorme comunidad global podr&amp;iacute;an construir juntos algo mejor.&lt;/p&gt; 
&lt;p&gt;Lo llamaron “el proyecto Mozilla” y escogieron un dinosaurio como s&amp;iacute;mbolo de la ambici&amp;oacute;n del proyecto.&lt;/p&gt; 
&lt;div style="width: 425px"&gt; 
 &lt;a href="http://placerdigital.net/pdblog/wp-content/uploads/2013/03/primer-logo-de-mozilla.jpg"&gt;&lt;img alt="Primero logo de Mozilla" src="http://placerdigital.net/pdblog/wp-content/uploads/2013/03/primer-logo-de-mozilla.jpg" width="415" height="250" /&gt;&lt;/a&gt; 
 &lt;p&gt;Primer isologo de Mozilla&lt;/p&gt; 
&lt;/div&gt; 
&lt;p&gt;Con el apoyo de todos, Mozilla ha recorrido un largo camino. &lt;strong&gt;Medio bill&amp;oacute;n de personas&lt;/strong&gt; usan el navegador que ellos crearon: Firefox. Ahora, se aprontan a afrontar un pr&amp;oacute;ximo desaf&amp;iacute;o con el lanzamiento de una plataforma m&amp;oacute;vil abierta y basada en la Web: &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/placerdigital/2013/03/felices-15-anos-mozilla-gracias-por-cambiar-el-mundo"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Ricardo Barra</dc:creator>
    <dc:date>2013-03-31T14:10:14Z</dc:date>
  </entry>
  <entry>
    <title>Cómo saber qué tecnologías usa un sitio web</title>
    <link rel="alternate" href="http://www.blogstack.info/post/placerdigital/2013/05/como-saber-que-tecnologias-usa-un-sitio-web" />
    <category term="blog-stack" />
    <category term="analisis" />
    <category term="software" />
    <category term="wappalyzer" />
    <category term="tecnologia" />
    <category term="extensiones" />
    <author>
      <name>Ricardo Barra</name>
    </author>
    <updated>2014-05-07T21:47:08Z</updated>
    <published>2013-05-22T14:23:45Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;&lt;a href="http://placerdigital.net/pdblog/wp-content/uploads/2013/05/operating-systems.png"&gt;&lt;img alt="Gr&amp;aacute;fico de sistemas operativos" src="http://placerdigital.net/pdblog/wp-content/uploads/2013/05/operating-systems.png" width="720" height="407" /&gt;&lt;/a&gt;Una de las cosas que m&amp;aacute;s me gustan en la vida es averiguar con qu&amp;eacute; tecnolog&amp;iacute;as est&amp;aacute; hecho un sitio web. Para m&amp;iacute; es interesante conocer el servidor que est&amp;aacute; usando, lenguaje de programaci&amp;oacute;n, sistema de estad&amp;iacute;sticas, framework de Javascript, administrador de contenidos (CMS), qu&amp;eacute; sistema operativo usa el servidor, si el sitio tiene wiki, editores de texto enriquecido, galer&amp;iacute;as de fotos, redes sociales, foros, y un sinf&amp;iacute;n de otras cosas.&lt;/p&gt; 
&lt;p&gt;Hasta hace no mucho, hab&amp;iacute;a pocos servicios para enterarse de esto. Uno de ellos era &lt;a title="BuiltWith" href="http://builtwith.com/"&gt;BuiltWith&lt;/a&gt;, que us&amp;eacute; hace a&amp;ntilde;os pero no siempre confi&amp;eacute; en los resultados y adem&amp;aacute;s cobraban por un servicio “premium”. Por eso &lt;strong&gt;Wappalyizer&lt;/strong&gt; fue la panacea para m&amp;iacute;. Con esta esta extensi&amp;oacute;n para Firefox, puedo saber todo lo anterior y mucho m&amp;aacute;s sin hacer que el navegador se ponga m&amp;aacute;s lento, si hacer ni un solo clic, sin alterar mis h&amp;aacute;bitos de navegaci&amp;oacute;n o tener que ir a otro sitio a hacer una consulta.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/placerdigital/2013/05/como-saber-que-tecnologias-usa-un-sitio-web"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Ricardo Barra</dc:creator>
    <dc:date>2013-05-22T14:23:45Z</dc:date>
  </entry>
  <entry>
    <title>Por qué el gobierno y el sistema educativo DEBEN preferir software libre</title>
    <link rel="alternate" href="http://www.blogstack.info/post/placerdigital/2014/02/por-que-el-gobierno-y-el-sistema-educativo-deben-preferir-software-libre" />
    <category term="blog-stack" />
    <category term="analisis" />
    <category term="software" />
    <category term="windows" />
    <category term="software-libre" />
    <author>
      <name>Ricardo Barra</name>
    </author>
    <updated>2014-05-07T21:47:07Z</updated>
    <published>2014-02-01T04:15:17Z</published>
    <content type="html">&lt;p&gt;&lt;p&gt;Hoy he considerado necesario dedicar unos minutos para explicar, a trav&amp;eacute;s de 3 sencillos ejemplos, por qu&amp;eacute; el Estado y el sistema educativo tienen el DEBER de preferir software libre.&lt;/p&gt; 
&lt;p&gt;Este tema da para mucho m&amp;aacute;s pero esta vez s&amp;oacute;lo &lt;strong&gt;describir&amp;eacute; algunos escenarios que demuestran que somos un pa&amp;iacute;s esclavo de tecnolog&amp;iacute;as privativas&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;1. A&amp;uacute;n hay sitios web y aplicaciones que s&amp;oacute;lo funcionan bien con Internet Explorer. Para usar ese navegador, estoy obligado a usar Windows, y para usar Windows tengo que obligadamente gastar decenas de miles de pesos. Si una instituci&amp;oacute;n gubernamental decide construir sistemas a los que s&amp;oacute;lo se puede acceder utilizando una tecnolog&amp;iacute;a privativa (que adem&amp;aacute;s es mala y cara), me convierten, como ciudadano, en esclavo de ese navegador.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/placerdigital/2014/02/por-que-el-gobierno-y-el-sistema-educativo-deben-preferir-software-libre"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Ricardo Barra</dc:creator>
    <dc:date>2014-02-01T04:15:17Z</dc:date>
  </entry>
  <entry>
    <title>Presentación de Blog Stack</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/presentacion-de-blog-stack" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="linux" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-05-06T19:00:00Z</updated>
    <published>2014-05-04T09:51:38Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/blogstack.png" alt="Blog Stack" title="Blog Stack" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Con este art&amp;iacute;culo quiero presentar un nuevo proyecto, Blog Stack. &lt;a href="http://www.blogstack.info/"&gt;Blog Stack&lt;/a&gt; (BS) es una agregador, planeta, o fuente de informaci&amp;oacute;n de bit&amp;aacute;coras sobre programaci&amp;oacute;n, desarrollo, desarrollo &amp;aacute;gil, software, software libre, hardware, gnu/linux o en general temas relacionados con la tecnolog&amp;iacute;a.&lt;/p&gt; 
&lt;div style="text-align: center;"&gt; 
 &lt;a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/23/blogstack-portada.png" title="Portada de Blog Stack"&gt;&lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/23/blogstack-portada-thumb.png" /&gt;&lt;/a&gt; 
&lt;/div&gt; 
&lt;p&gt;Otro agregador o planeta no es ninguna idea nueva pero BS incorpora alguna cosa adicional como poder suscribirse a &amp;uacute;nicamente el contenido etiquetado en que cada uno est&amp;eacute; interesando (programaci&amp;oacute;n, desarrollo-&amp;aacute;gil, java, python, linux, ubuntu, …) o recibir el contenido publicado en todas las bit&amp;aacute;coras agregadas sin tener que suscribirse individualmente a cada una de ellas. BS a&amp;uacute;n est&amp;aacute; en desarrollo y posiblemente vaya incorporando nuevas ideas que me surjan o se me propongan pero en el estado actual ya cumple con la funci&amp;oacute;n b&amp;aacute;sica de agregador.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/presentacion-de-blog-stack"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-04T09:51:38Z</dc:date>
  </entry>
  <entry>
    <title>Anexo a la guía de instalación y del principiante de Arch Linux</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/05/anexo-a-la-guia-de-instalacion-y-del-principiante-de-arch-linux" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="linux" />
    <category term="software" />
    <category term="planeta-arch-linux" />
    <category term="planeta-linux" />
    <category term="software-libre" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-05-02T17:09:56Z</updated>
    <published>2014-05-02T17:09:56Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/archlinux.png" alt="Arch Linux" title="Arch Linux" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Antes de migrar a una distribuci&amp;oacute;n como &lt;a href="https://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt; es recomendable ver si esta distribuci&amp;oacute;n GNU/Linux es la adecuada para nosotros en funci&amp;oacute;n de su &lt;a href="https://wiki.archlinux.org/index.php/The_Arch_Way"&gt;filosof&amp;iacute;a (The Arch Way)&lt;/a&gt;, sus &lt;a href="https://wiki.archlinux.org/index.php/Arch_Linux"&gt;pricipales caracter&amp;iacute;sticas&lt;/a&gt; y las &lt;a href="https://wiki.archlinux.org/index.php/FAQ"&gt;preguntas frecuentes&lt;/a&gt;. Arch Linux es una distribuci&amp;oacute;n orientada a personas que no les importa dedicar un tiempo a aprender como instalarla y posteriormente mantenerla actualizada, esto tampoco debe asustarnos, la &lt;a href="https://wiki.archlinux.org/"&gt;wiki de arch&lt;/a&gt; es de las mejores fuentes de informaci&amp;oacute;n que hay para cualquier cosa que necesitemos. Si la wiki no es suficiente ayuda en los &lt;a href="https://bbs.archlinux.org/"&gt;foros&lt;/a&gt; muy posiblemente encontraremos la soluci&amp;oacute;n. Pero para alguien que vaya a &lt;a href="http://elblogdepicodev.blogspot.com.es/2010/03/de-windows-arch-linux.html"&gt;migrar de Windows o Mac a Linux&lt;/a&gt; creo que es m&amp;aacute;s recomendable empezar con alguna distribuci&amp;oacute;n que lo pone m&amp;aacute;s f&amp;aacute;cil para empezar con unos pocos clics, las m&amp;aacute;s conocidas son &lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/05/anexo-a-la-guia-de-instalacion-y-del-principiante-de-arch-linux"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-05-02T17:09:56Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a Elasticsearch</title>
    <link rel="alternate" href="http://www.blogstack.info/post/blogbitix/2014/04/introduccion-a-elasticsearch" />
    <category term="blog-stack" />
    <category term="planeta-codigo" />
    <category term="programacion" />
    <category term="software" />
    <author>
      <name>pico.dev</name>
    </author>
    <updated>2014-05-01T11:00:00Z</updated>
    <published>2014-04-25T15:15:05Z</published>
    <content type="html">&lt;p&gt;&lt;div style="float: right; text-align: right;"&gt; 
 &lt;img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/elasticsearch.png" alt="Elasticsearch" title="Elasticsearch" /&gt; 
 &lt;br /&gt; 
&lt;/div&gt; 
&lt;p&gt;Continuando con la forma de &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html"&gt;como dar soluci&amp;oacute;n a la b&amp;uacute;squedas en las entidades de dominio&lt;/a&gt; en esta entrada profundizar&amp;eacute; en la soluci&amp;oacute;n que comentaba de usar &lt;a href="http://www.elasticsearch.org"&gt;Elasticsearch&lt;/a&gt; (ES). ES se basa en &lt;a href="http://lucene.apache.org/core/"&gt;Lucene&lt;/a&gt; pero expone su funcionalidad a trav&amp;eacute;s de una interfaz REST recibiendo y enviando datos en formato JSON y oculta mediante esta interfaz los detalles internos de lucene. Esta interfaz permite que pueda ser utilizada por cualquier plataforma no solo Java, puede usarse desde Python, .NET, PHP o incluso desde un navegador con Javascript. Es persistente, es decir, que lo que indexemos en ella sobrevivir&amp;aacute; a un reinicio del servidor.&lt;/p&gt; 
&lt;p&gt;Como comentaba en &lt;a href="http://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html"&gt;el art&amp;iacute;culo anterior de b&amp;uacute;squedas sobre entidades de dominio&lt;/a&gt; ES nos puede servir para hacer b&amp;uacute;squedas a texto completo pero tambi&amp;eacute;n podemos hacer otra serie de cosas adicionales que no podemos con una base de datos relacional aunque soporte en su lenguaje SQL b&amp;uacute;squeda a texto completo, por ejemplo, resaltado (highlight) y facetas (facets), tambi&amp;eacute;n permite hacer b&amp;uacute;squedas vagas (fuzzy) y soporta diferentes analizadores seg&amp;uacute;n el idioma de la propiedad en que se busque. El indexar y desindexar los datos en elasticsearch para que luego puedan ser buscados es responsabilidad nuestra y adem&amp;aacute;s de insertarlos o eliminarlos en la base de datos debemos hacer lo mismo en ES ya sea haci&amp;eacute;ndolo en ambos sitios a la vez o mediante un proceso de fondo que se encargue de ello.&lt;/p&gt;&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/blogbitix/2014/04/introduccion-a-elasticsearch"&gt;continuar leyendo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>pico.dev</dc:creator>
    <dc:date>2014-04-25T15:15:05Z</dc:date>
  </entry>
</feed>

