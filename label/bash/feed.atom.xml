<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2016-04-18T10:02:10Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2016-04-18T10:02:10Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Cómo procesar múltiples argumentos de entrada en scripts para Bash</title>
    <link rel="alternate" href="http://totaki.com/poesiabinaria/2016/04/como-procesar-multiples-argumentos-de-entrada-en-scripts-para-bash/" />
    <category term="linea" />
    <category term="condicionales" />
    <category term="argumentos" />
    <category term="comandos" />
    <category term="consola" />
    <category term="utilidades" />
    <category term="bash" />
    <category term="bucles" />
    <category term="entrada" />
    <category term="linux" />
    <category term="cantidad" />
    <category term="dash" />
    <category term="script" />
    <category term="shift" />
    <category term="desplazamiento" />
    <category term="array" />
    <category term="programa" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-04-18T08:22:35Z</updated>
    <published>2016-04-18T08:22:35Z</published>
    <content type="html">&lt;p&gt;Los argumentos de entrada de un programa nos sirven para modificar ligeramente el comportamiento de un programa dentro de las opciones que nos permita su desarrollador. Y, sobre todo, siempre que trabajamos con programas para consola, es muy buena idea permitir que nuestros usuarios puedan utilizar funciones extras o especificar sus propios parámetros de trabajo sin necesidad de modificar el programa. Si trabajáis con lenguajes como C o C++ podéis leer algo de información al respecto: Cosas que damos por hechas en C/C++: int main(int argc, char *argv[]) Cómo gestionar los parámetros de nuestros programas con getopt en C Cómo gestionar los parámetros de un programa en C (parte 2: parámetros largos) Pero, cuando hacemos algún script en Bash para línea de comandos, también puede resultar muy útil,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://totaki.com/poesiabinaria/2016/04/como-procesar-multiples-argumentos-de-entrada-en-scripts-para-bash/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-04-18T08:22:35Z</dc:date>
  </entry>
  <entry>
    <title>Cómo expulsar todas las sesiones MySQL de un usuario en particular desde un script</title>
    <link rel="alternate" href="http://totaki.com/poesiabinaria/2016/03/como-expulsar-todas-las-sesiones-mysql-de-un-usuario-en-particular-desde-un-script/" />
    <category term="procesos" />
    <category term="schema" />
    <category term="usuarios" />
    <category term="bucle" />
    <category term="aplicacion" />
    <category term="listado" />
    <category term="processlist" />
    <category term="expulsar" />
    <category term="conexiones" />
    <category term="sql" />
    <category term="esquema" />
    <category term="base" />
    <category term="servidores" />
    <category term="problema" />
    <category term="solucion" />
    <category term="select" />
    <category term="show" />
    <category term="thread" />
    <category term="where" />
    <category term="bash" />
    <category term="mysql" />
    <category term="datos" />
    <category term="eliminar" />
    <category term="matar" />
    <category term="kill" />
    <category term="provisional" />
    <category term="linux" />
    <category term="depurar" />
    <category term="condicion" />
    <category term="script" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-03-21T11:07:36Z</updated>
    <published>2016-03-21T11:07:36Z</published>
    <content type="html">&lt;p&gt;Muchas veces, puede que tengamos una aplicación no muy bien depurada en nuestro servidor web. A dicha aplicación le hemos dado su propio usuario MySQL y observamos que las conexiones no se cierran adecuadamente. Temporalmente puede que la solución sea expulsar de vez en cuando todos los usuarios que siguen activos, con el fin de no saturar nuestro servidor MySQL. Puede que en otros servicios que tengamos activos hayamos visto el mensaje “Too many connections” impidiendo así el acceso a los demás servicios. La primera detección del problema la podemos hacer gracias al comando “SHOW PROCESSLIST” de MySQL: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 &gt; SHOW PROCESSLIST; +---------+-------------+--------------------------------+-------------+---------+------+-------+------------------+[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://totaki.com/poesiabinaria/2016/03/como-expulsar-todas-las-sesiones-mysql-de-un-usuario-en-particular-desde-un-script/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-03-21T11:07:36Z</dc:date>
  </entry>
  <entry>
    <title>Encontrar la diferencia entre la salida de dos comandos en nuestra terminal</title>
    <link rel="alternate" href="http://totaki.com/poesiabinaria/2016/03/encontrar-la-diferencia-entre-la-salida-de-dos-comandos-en-nuestra-terminal/" />
    <category term="comandos" />
    <category term="mac" />
    <category term="temporales" />
    <category term="unix" />
    <category term="bash" />
    <category term="nombre" />
    <category term="diff" />
    <category term="salida" />
    <category term="diferencia" />
    <category term="linux" />
    <category term="llamadas" />
    <category term="archivos" />
    <category term="pipes" />
    <category term="ejecucion" />
    <category term="general" />
    <category term="terminal" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-03-18T09:49:03Z</updated>
    <published>2016-03-18T09:49:03Z</published>
    <content type="html">&lt;p&gt;Este es un pequeño truco que, en ocasiones me ha salvado un poco de tiempo. Un mini-post que tenía ganas de compartir por aquí y que hoy voy a empezar por el final. Es decir, poniendo el código: 1 $ diff &lt;(comando 1) &lt;(comando 2) Con esto, ejecutamos el comando 1, luego el comando 2 y se lo pasamos a diff en forma de pipe creada expresamente para la ocasión. Es decir, la salida del comando 1 se va almacenando en una pipe, y la salida del comando 2 se va almacenando en otra pipe. Dichas pipes, en Linux las podemos encontrar en /proc/[PID del proceso]/fd/ ¿Para qué me vale esto? Saber si dos directorios tienen los mismos archivos Por ejemplo, si tenemos dos directorios que tienen que tener un contenido parecido (los mismos archivos) y queremos saber si falta alguno, aunque podemos utilizar meld,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://totaki.com/poesiabinaria/2016/03/encontrar-la-diferencia-entre-la-salida-de-dos-comandos-en-nuestra-terminal/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-03-18T09:49:03Z</dc:date>
  </entry>
  <entry>
    <title>Cómo extraer duración, fotogramas, bitrate y fps de un vídeo para nuestros scripts</title>
    <link rel="alternate" href="http://totaki.com/poesiabinaria/2016/02/como-extraer-duracion-fotogramas-bitrate-y-fps-de-un-video-para-nuestros-scripts/" />
    <category term="segundo" />
    <category term="horas" />
    <category term="tiempo" />
    <category term="avconv" />
    <category term="mpeg" />
    <category term="segundos" />
    <category term="avi" />
    <category term="extraccion" />
    <category term="informacion" />
    <category term="imagen-digital" />
    <category term="minutos" />
    <category term="duracion" />
    <category term="mp4" />
    <category term="general" />
    <category term="convertir" />
    <category term="scripts" />
    <category term="bits" />
    <category term="bash" />
    <category term="videos" />
    <category term="datos" />
    <category term="frames" />
    <category term="ffmpeg" />
    <category term="sed" />
    <category term="linux" />
    <category term="video" />
    <category term="tasa" />
    <category term="imagenes" />
    <category term="awk" />
    <category term="video-digital" />
    <category term="bitrate" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2016-02-10T09:15:24Z</updated>
    <published>2016-02-10T09:15:24Z</published>
    <content type="html">&lt;p&gt;Seguramente en nuestros scripts, si tratamos con archivos de vídeo, nos interese conocer información sobre el mismo. Tal vez podamos extraer más información de un archivo de vídeo con un software especializado como VLC; pero para hacer unos cálculos rápidos o una conversión de formato nos va a venir muy bien. Programas como avconv o ffmpeg son capaces de extraer información básica del vídeo. Es más, programas como identify (de imagemagick) entre otros, en realidad llaman por detrás a uno de los dos primeros para realizar la identificación del archivo. Pero claro, imaginemos que queremos automatizar algunos procesos y hay archivos de vídeo involucrados. ¿Cómo extraemos la información de los mismos? Con herramientas como sed o awk. Al final del post tendréis el código fuente completo del script.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://totaki.com/poesiabinaria/2016/02/como-extraer-duracion-fotogramas-bitrate-y-fps-de-un-video-para-nuestros-scripts/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2016-02-10T09:15:24Z</dc:date>
  </entry>
  <entry>
    <title>Bailando con bits III. Mostrando el valor binario de un número [bash, C, C++, PHP, Java, Python, Ruby]</title>
    <link rel="alternate" href="http://totaki.com/poesiabinaria/2015/12/bailando-con-bits-iii-mostrando-el-valor-binario-de-un-numero-bash-c-c-php-java-python-ruby/" />
    <category term="bits" />
    <category term="valores" />
    <category term="bash" />
    <category term="double" />
    <category term="tipo" />
    <category term="float" />
    <category term="variable" />
    <category term="python" />
    <category term="entero" />
    <category term="base" />
    <category term="c-c" />
    <category term="tamano" />
    <category term="conversion" />
    <category term="linux" />
    <category term="hexadecimal" />
    <category term="vigilar" />
    <category term="java" />
    <category term="binario" />
    <category term="numero" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-12-28T09:42:05Z</updated>
    <published>2015-12-28T09:42:05Z</published>
    <content type="html">&lt;p&gt;De todos es sabido que un ordenador, internamente trabaja con ceros y unos, simplemente eso, a partir de ese simple valor, verdadero o falso, abierto o cerrado, existe o no existe es capaz de formar sonidos, imágenes, textos y cualquier cosa que podamos imaginarnos. Aunque no vamos a hacer algo tan complicado, muchas veces puede que tengamos un valor entre manos y queramos saber qué bits hay a uno y qué bits hay a cero aunque sólo sea para verificar que una operación se está realizando como debe o porque estamos aprendiendo a utilizar este sistema de numeración y queremos verificar que todo nos sale bien. En este post, voy a poner algunos métodos que podemos utilizar en varios lenguajes de programación, o en consola, con este propósito. Decimal a binario en consola Empecemos en consola. Vamos[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://totaki.com/poesiabinaria/2015/12/bailando-con-bits-iii-mostrando-el-valor-binario-de-un-numero-bash-c-c-php-java-python-ruby/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-12-28T09:42:05Z</dc:date>
  </entry>
  <entry>
    <title>Cómo especificar puerto y clave privada para SSH desde rsync</title>
    <link rel="alternate" href="http://totaki.com/poesiabinaria/2015/10/como-especificar-puerto-y-clave-privada-para-ssh-desde-rsync/" />
    <category term="rsync" />
    <category term="claves" />
    <category term="directorio" />
    <category term="remoto" />
    <category term="bash" />
    <category term="pares" />
    <category term="sincronizacion" />
    <category term="ssh" />
    <category term="casos-practicos" />
    <category term="puerto" />
    <category term="sincronizar" />
    <category term="copia" />
    <category term="servidores" />
    <category term="linux" />
    <category term="privada" />
    <category term="carpeta" />
    <category term="archivos" />
    <category term="publica" />
    <category term="configuracion" />
    <category term="comunicacion" />
    <category term="identidad" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-10-22T08:19:04Z</updated>
    <published>2015-10-22T08:19:04Z</published>
    <content type="html">&lt;p&gt;Si trabajamos a menudo con rsync para copiar archivos entre ordenadores, estaremos acostumbrados a una sintaxis parecida a esta: $ rsync -avh origen usuario@servidor:destino En realidad, para transmitir los archivos estaremos utilizando una conexión segura a través de ssh. Pero claro, en ocasiones, sería necesario utilizar algún argumento especial para ssh. En este ejemplo, imaginemos que queremos conectar al servidor por un puerto diferente del 22. Podemos hacerlo así: $ rsync -avh -e ‘ssh -p1234′ origen usuario@servidor:destino y si accedemos por par de claves pública-privada, en el caso de que queramos especificar un archivo de clave privada específico para esta conexión (a mí me ha sucedido que he necesitado utilizar rsync como root para poder acceder a algunos archivos y las claves las[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://totaki.com/poesiabinaria/2015/10/como-especificar-puerto-y-clave-privada-para-ssh-desde-rsync/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-10-22T08:19:04Z</dc:date>
  </entry>
  <entry>
    <title>9 Trucos para manejar cadenas de caracteres en BASH y no morir en el intento</title>
    <link rel="alternate" href="http://totaki.com/poesiabinaria/2015/10/9-trucos-para-manejar-cadenas-de-caracteres-en-bash-y-no-morir-en-el-intento/" />
    <category term="reemplazo" />
    <category term="ruta" />
    <category term="expresiones" />
    <category term="directorio" />
    <category term="nombre" />
    <category term="bash" />
    <category term="expansion" />
    <category term="letras" />
    <category term="contar" />
    <category term="basename" />
    <category term="cadena" />
    <category term="defecto" />
    <category term="fichero" />
    <category term="extension" />
    <category term="linux" />
    <category term="valor" />
    <category term="palabras" />
    <category term="general" />
    <category term="tr" />
    <category term="globext" />
    <author>
      <name>Gaspar Fernández</name>
    </author>
    <updated>2015-10-12T08:37:22Z</updated>
    <published>2015-10-12T08:37:22Z</published>
    <content type="html">&lt;p&gt;Aunque este tema lo he tratado alguna vez un poco más de pasada o con algún ejemplo concreto, vamos a ver ejemplos concretos de cosas que podemos hacer con una cadena de caracteres en Bash, para mejorar nuestros scripts, y sobre todo, para tener una pequeña documentación para mí, que siempre que necesito algo parecido me tiro un rato buscando… El caso es que en versiones más o menos nuevas de BASH (más o menos desde hace 6 años o así), podemos usar muchos de estos trucos y no tenemos necesidad de utilizar programas externos (como tr, awk, sed y otros) en muchos casos, por lo que la ejecución se realizará mucho más rápida. 1 – Reemplazar subcadenas Siempre podemos usar sed o awk, pero, si lo hacemos de forma nativa y nuestras necesidades no son muy grandes, podemos hacerlo desde bash, para ello[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://totaki.com/poesiabinaria/2015/10/9-trucos-para-manejar-cadenas-de-caracteres-en-bash-y-no-morir-en-el-intento/"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Gaspar Fernández</dc:creator>
    <dc:date>2015-10-12T08:37:22Z</dc:date>
  </entry>
</feed>

