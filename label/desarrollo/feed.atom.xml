<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-06-23T07:02:07Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-06-23T07:02:07Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Inyección de dependencias en filtros MVC 6</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/06/inyeccion-de-dependencias-en-filtros-mvc-6" />
    <category term="desarrollo" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-06-23T06:45:00Z</updated>
    <published>2015-06-23T06:45:00Z</published>
    <content type="html">&lt;p&gt;Los filtros de MVC, o action filters, han sido potenciados en la versión 6 del framework añadiéndoles características que en versiones anteriores no estaban disponibles de serie en la plataforma pero que han sido muy solicitadas por los desarrolladores. Hace algún tiempo vimos una de ellas, los filtros asíncronos, y hoy veremos que la inyección de dependencias en filtros también es ya una realidad. El problema con la inyección de dependencias en los filtros es la instanciación de éstos, pues al definirse en forma de atributos de .NET no puede realizarse de forma controlada, o al menos lo suficientemente controlada como para poder inyectarles parámetros en el constructor o cargar sus propiedades desde un contenedor de inversión de control. Y aunque los filter providers aportaron alguna solución[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/06/inyeccion-de-dependencias-en-filtros-mvc-6"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-06-23T06:45:00Z</dc:date>
  </entry>
  <entry>
    <title>La clase Startup en ASPNET 5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/02/la-clase-startup-en-aspnet-5" />
    <category term="desarrollo" />
    <category term="novedades" />
    <category term="aspnet5" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-02-10T09:39:20Z</updated>
    <published>2015-02-10T08:35:00Z</published>
    <content type="html">&lt;p&gt;Hace poco hablábamos del destierro del Global.asax en ASP.NET 5, y de cómo la clase Startup, siguiendo la convención establecida por este framework, era el lugar elegido para introducir código de inicialización. Pero además del código personalizado que podamos introducir, es donde, por defecto, se configuran aspectos tan importantes como los middlewares que guiarán el proceso de las peticiones, o la inyección de dependencias incluida de serie en el framework. En este post vamos a estudiar un poco más a fondo la clase de inicialización de ASP.NET 5, y comenzaremos viendo qué vamos a encontrar en ella, y las convenciones a las que hay que ceñirse para que el entorno pueda inicializarse correctamente. 1. Convenciones de la clase StartupCuando arranca una aplicación web, los componentes de infraestructura[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/02/la-clase-startup-en-aspnet-5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-02-10T08:35:00Z</dc:date>
  </entry>
  <entry>
    <title>Normas de diseño y codificación de .NET framework</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/01/normas-de-diseno-y-codificacion-de-net-framework" />
    <category term="desarrollo" />
    <category term="buenas-practicas" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-01-27T17:18:37Z</updated>
    <published>2015-01-20T08:25:00Z</published>
    <content type="html">&lt;p&gt;Hace relativamente poco tiempo, y como parte del popular salto al open source del nuevo stack de Microsoft, se publicaron en Github las directrices o normas de codificación que deben seguirse para contribuir en el desarrollo de .NET Core. Se trata de un resumen simplificado del contenido del libro “ Framework design guidelines” publicado por Krzysztof Cwalina y Brad Abrams en 2008. Aunque creo que este mismo documento o versiones anteriores lo he leído en otras ocasiones, la verdad es que sigue resultándome muy interesante porque me recuerda normas y convenciones que conviene tener en cuenta al desarrollar marcos de trabajo y componentes. No hay que olvidar que estas directrices han sido refinadas y mejoradas con los años, acumulando ya la experiencia de muchos años y muchos desarrolladores[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/01/normas-de-diseno-y-codificacion-de-net-framework"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-01-20T08:25:00Z</dc:date>
  </entry>
  <entry>
    <title>Software patch, literalmente</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2014/10/software-patch-literalmente" />
    <category term="desarrollo" />
    <category term="historia" />
    <category term="curiosidades" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2014-10-15T11:45:00Z</updated>
    <published>2014-10-15T11:45:00Z</published>
    <content type="html">&lt;p&gt;Siempre he pensado que el término “parche” aplicado al desarrollo de software se utilizaba por analogía con el mundo real. Al fin y al cabo, poner un parche en una aplicación es conceptualmente bastante parecido a hacerlo en una rueda pinchada, ¿no? Pero no, como en otras ocasiones que ya hemos visto por aquí, no es un tema nada conceptual. La realidad es bastante más pragmática, y el uso de la palabra “parche” es literal y simplemente responde a razones históricas. Y es que resulta que en los albores de la informática, cuando los programas se escribían a base de realizar perforaciones en cintas de papel, los errores detectados sólo se podían corregir parcheando físicamente la zona afectada y volviendo a perforar para aplicar las correcciones. Una tarea casi más propia de un sastre que de un[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2014/10/software-patch-literalmente"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2014-10-15T11:45:00Z</dc:date>
  </entry>
  <entry>
    <title>Inicialización de propiedades en C# 6.0</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2014/09/inicializacion-de-propiedades-en-c-6" />
    <category term="desarrollo" />
    <category term="c-6" />
    <category term="novedades" />
    <category term="c" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2014-10-05T11:54:29Z</updated>
    <published>2014-09-16T07:19:00Z</published>
    <content type="html">&lt;p&gt;Hace algún tiempo comentamos alguna de las novedades que se incluirán en la próxima versión de C#, concretamente el nuevo operador de navegación segura “?.”, pero la cosa no acaba aquí: se avecinan un buen número de cambios que prometen seguir mejorando nuestro lenguaje favorito :-) Por ejemplo, una nueva característica que tendremos disponible es la inicialización de propiedades automáticas, algo que antes también podíamos hacer, aunque de forma menos directa. Es decir, hasta el momento para inicializar una propiedad automática teníamos que hacerlo en el constructor de la clase, como sigue: Pues bien, en la nueva versión podremos usar una nueva construcción mucho más directa: Simplemente añadimos la expresión de igualdad tras la declaración, y listo. Además del obvio ahorro en pulsaciones[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2014/09/inicializacion-de-propiedades-en-c-6"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2014-09-16T07:19:00Z</dc:date>
  </entry>
  <entry>
    <title>ASP .NET MVC: Tutorial inicial</title>
    <link rel="alternate" href="http://www.blogstack.info/post/destinodotnet/2014/08/asp-net-mvc-tutorial-inicial" />
    <category term="asp-net" />
    <category term="desarrollo" />
    <category term="asp-net-mvc" />
    <category term="tutoriales" />
    <author>
      <name>Joel Martinez</name>
    </author>
    <updated>2014-08-30T17:27:38Z</updated>
    <published>2014-08-30T17:27:38Z</published>
    <content type="html">&lt;p&gt;Facebook0 Twitter0 Google+0 Linkedin0 E-Mail0 Estaba elaborando un artículo sobre autenticación/autorización, pero reparé que es mejor primero hacer uno completo como tutorial introductorio sobre ASP .NET MVC. Sé que hay muuuuchos artículos en la web sobre esto, pero en este trato de darle un estilo particular y un orden que no encontré en otros. Aquí vamos entonces con un primer acercamiento a esta maravillosa tecnología. Un poco de teoría Definición MVC son las siglas de Model View Controller, o Modelo Vista Controlador en español. Es un patrón de arquitectura de software que se ha vuelto muy común en estos años, pero sus orígenes se remontan a la década del 70. Lo que propone este patrón es la separación de la interfaz de usuario con lógica de negocio y el manejo de los datos. Para esto[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/destinodotnet/2014/08/asp-net-mvc-tutorial-inicial"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Joel Martinez</dc:creator>
    <dc:date>2014-08-30T17:27:38Z</dc:date>
  </entry>
  <entry>
    <title>Colección de herramientas para desarrollo en .NET</title>
    <link rel="alternate" href="http://www.blogstack.info/post/destinodotnet/2014/07/coleccion-de-herramientas-para-desarrollo-en-net" />
    <category term="herramientas" />
    <category term="utilidades" />
    <category term="desarrollo" />
    <category term="recursos" />
    <category term="net" />
    <category term="net-framework" />
    <category term="c" />
    <author>
      <name>Joel Martinez</name>
    </author>
    <updated>2014-07-17T14:50:57Z</updated>
    <published>2014-07-17T14:50:57Z</published>
    <content type="html">&lt;p&gt;Facebook0 Twitter0 Google+0 Linkedin0 E-Mail0 En nuestro trabajo diario como desarrollador DotNet requerimos diversas herramientas para cumplir nuestros objetivos. Algunas son imprescindibles, otras nos ayudan a ser más productivos y otras simplemente las usamos porque nos gusta su funcionamiento, sin perder el foco de la productividad. Para las tecnologías .NET existen muchas de éstas y de muy buena calidad, algunas de Microsoft y otras de terceros. En este post haremos un repaso de las principales herramientas para desarrollo en .NET: las imprescindibles y las que merecen que le demos una oportunidad. Una indicación importante: todas las herramientas de este listado (a excepción del Visual Studio) son gratuitas. Además, se han clasificado en categorías para un mejor orden. Herramientas .NET[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/destinodotnet/2014/07/coleccion-de-herramientas-para-desarrollo-en-net"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>Joel Martinez</dc:creator>
    <dc:date>2014-07-17T14:50:57Z</dc:date>
  </entry>
</feed>

