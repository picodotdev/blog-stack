<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-07-21T11:02:18Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-07-21T11:02:18Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Código específico para distintos entornos (development, release…) en MVC 6/ASPNET 5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/07/codigo-especifico-para-distintos-entornos-development-release-en-mvc-6-aspnet-5" />
    <category term="desarrollo" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-07-21T11:00:33Z</updated>
    <published>2015-07-21T07:00:00Z</published>
    <content type="html">&lt;p&gt;En versiones anteriores de ASP.NET, podíamos utilizar la expresión HttpContext.Current.IsDebuggingEnabled para determinar si una aplicación web está ejecutándose en modo depuración o no, lo cual podía ser útil a la hora de introducir porciones de código específicas para cada caso. El valor de esa propiedad estaba directamente relacionado con el de la propiedad debug del tag &lt;compilation&gt; presente en el archivo de configuración web.config. Como sabemos, en ASP.NET 5 esto no sería posible por tres motivos: Primero, por la archiconocida desaparición del web.config. Segundo, porque al eliminar la dependencia con System.Web, ya no existen ni HttpContext.Current ni la propia clase estática HttpContext. Y tercero, porque no existe un modo “debug” como tal, sino distintos entornos de ejecución (development,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/07/codigo-especifico-para-distintos-entornos-development-release-en-mvc-6-aspnet-5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-07-21T07:00:00Z</dc:date>
  </entry>
  <entry>
    <title>¿Dónde se añaden los filtros globales en MVC 6 / ASP.NET 5?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/06/donde-se-anaden-los-filtros-globales-en-mvc-6-asp-net-5" />
    <category term="desarrollo" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-06-30T06:45:00Z</updated>
    <published>2015-06-30T06:45:00Z</published>
    <content type="html">&lt;p&gt;Desde la versión 3 de ASP.NET MVC, los filtros globales nos han solucionado con facilidad la anteriormente ardua labor de definir filtros en todos los controladores y acciones de nuestra aplicación sin tener que introducirlos uno a uno o crear controladores base. Por convención, los registrábamos en una clase llamada FilterConfig, habitualmente ubicada en la carpeta /App_Start del proyecto, y cuya pinta era más o menos la siguiente: Este código era llamado durante la inicialización de la aplicación desde el evento Application_Start() del archivo Global.asax: Como sabemos, en MVC 6/ASP.NET 5 el Global.asax ha desaparecido para no volver, y, si profundizamos un poco, veremos que tampoco existe el tipo GlobalFilterCollection, ni la clase estática FilterConfig que antes daban soporte a esta característica.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/06/donde-se-anaden-los-filtros-globales-en-mvc-6-asp-net-5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-06-30T06:45:00Z</dc:date>
  </entry>
  <entry>
    <title>Inyección de dependencias en filtros MVC 6</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/06/inyeccion-de-dependencias-en-filtros-mvc-6" />
    <category term="desarrollo" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-06-23T06:45:00Z</updated>
    <published>2015-06-23T06:45:00Z</published>
    <content type="html">&lt;p&gt;Los filtros de MVC, o action filters, han sido potenciados en la versión 6 del framework añadiéndoles características que en versiones anteriores no estaban disponibles de serie en la plataforma pero que han sido muy solicitadas por los desarrolladores. Hace algún tiempo vimos una de ellas, los filtros asíncronos, y hoy veremos que la inyección de dependencias en filtros también es ya una realidad. El problema con la inyección de dependencias en los filtros es la instanciación de éstos, pues al definirse en forma de atributos de .NET no puede realizarse de forma controlada, o al menos lo suficientemente controlada como para poder inyectarles parámetros en el constructor o cargar sus propiedades desde un contenedor de inversión de control. Y aunque los filter providers aportaron alguna solución[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/06/inyeccion-de-dependencias-en-filtros-mvc-6"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-06-23T06:45:00Z</dc:date>
  </entry>
  <entry>
    <title>La clase Startup en ASPNET 5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/02/la-clase-startup-en-aspnet-5" />
    <category term="desarrollo" />
    <category term="novedades" />
    <category term="aspnet5" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-02-10T09:39:20Z</updated>
    <published>2015-02-10T08:35:00Z</published>
    <content type="html">&lt;p&gt;Hace poco hablábamos del destierro del Global.asax en ASP.NET 5, y de cómo la clase Startup, siguiendo la convención establecida por este framework, era el lugar elegido para introducir código de inicialización. Pero además del código personalizado que podamos introducir, es donde, por defecto, se configuran aspectos tan importantes como los middlewares que guiarán el proceso de las peticiones, o la inyección de dependencias incluida de serie en el framework. En este post vamos a estudiar un poco más a fondo la clase de inicialización de ASP.NET 5, y comenzaremos viendo qué vamos a encontrar en ella, y las convenciones a las que hay que ceñirse para que el entorno pueda inicializarse correctamente. 1. Convenciones de la clase StartupCuando arranca una aplicación web, los componentes de infraestructura[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/02/la-clase-startup-en-aspnet-5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-02-10T08:35:00Z</dc:date>
  </entry>
  <entry>
    <title>Normas de diseño y codificación de .NET framework</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/01/normas-de-diseno-y-codificacion-de-net-framework" />
    <category term="desarrollo" />
    <category term="buenas-practicas" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-01-27T17:18:37Z</updated>
    <published>2015-01-20T08:25:00Z</published>
    <content type="html">&lt;p&gt;Hace relativamente poco tiempo, y como parte del popular salto al open source del nuevo stack de Microsoft, se publicaron en Github las directrices o normas de codificación que deben seguirse para contribuir en el desarrollo de .NET Core. Se trata de un resumen simplificado del contenido del libro “ Framework design guidelines” publicado por Krzysztof Cwalina y Brad Abrams en 2008. Aunque creo que este mismo documento o versiones anteriores lo he leído en otras ocasiones, la verdad es que sigue resultándome muy interesante porque me recuerda normas y convenciones que conviene tener en cuenta al desarrollar marcos de trabajo y componentes. No hay que olvidar que estas directrices han sido refinadas y mejoradas con los años, acumulando ya la experiencia de muchos años y muchos desarrolladores[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/01/normas-de-diseno-y-codificacion-de-net-framework"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-01-20T08:25:00Z</dc:date>
  </entry>
  <entry>
    <title>Software patch, literalmente</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2014/10/software-patch-literalmente" />
    <category term="desarrollo" />
    <category term="historia" />
    <category term="curiosidades" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2014-10-15T11:45:00Z</updated>
    <published>2014-10-15T11:45:00Z</published>
    <content type="html">&lt;p&gt;Siempre he pensado que el término “parche” aplicado al desarrollo de software se utilizaba por analogía con el mundo real. Al fin y al cabo, poner un parche en una aplicación es conceptualmente bastante parecido a hacerlo en una rueda pinchada, ¿no? Pero no, como en otras ocasiones que ya hemos visto por aquí, no es un tema nada conceptual. La realidad es bastante más pragmática, y el uso de la palabra “parche” es literal y simplemente responde a razones históricas. Y es que resulta que en los albores de la informática, cuando los programas se escribían a base de realizar perforaciones en cintas de papel, los errores detectados sólo se podían corregir parcheando físicamente la zona afectada y volviendo a perforar para aplicar las correcciones. Una tarea casi más propia de un sastre que de un[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2014/10/software-patch-literalmente"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2014-10-15T11:45:00Z</dc:date>
  </entry>
  <entry>
    <title>Inicialización de propiedades en C# 6.0</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2014/09/inicializacion-de-propiedades-en-c-6" />
    <category term="desarrollo" />
    <category term="c-6" />
    <category term="novedades" />
    <category term="c" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2014-10-05T11:54:29Z</updated>
    <published>2014-09-16T07:19:00Z</published>
    <content type="html">&lt;p&gt;Hace algún tiempo comentamos alguna de las novedades que se incluirán en la próxima versión de C#, concretamente el nuevo operador de navegación segura “?.”, pero la cosa no acaba aquí: se avecinan un buen número de cambios que prometen seguir mejorando nuestro lenguaje favorito :-) Por ejemplo, una nueva característica que tendremos disponible es la inicialización de propiedades automáticas, algo que antes también podíamos hacer, aunque de forma menos directa. Es decir, hasta el momento para inicializar una propiedad automática teníamos que hacerlo en el constructor de la clase, como sigue: Pues bien, en la nueva versión podremos usar una nueva construcción mucho más directa: Simplemente añadimos la expresión de igualdad tras la declaración, y listo. Además del obvio ahorro en pulsaciones[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2014/09/inicializacion-de-propiedades-en-c-6"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2014-09-16T07:19:00Z</dc:date>
  </entry>
</feed>

