<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2015-11-23T09:02:17Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2015-11-23T09:02:17Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Inyección de dependencias en ASP.NET 5 (actualizado)</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/10/inyeccion-de-dependencias-en-asp-net-5-actualizado" />
    <category term="desarrollo" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-11-23T08:02:03Z</updated>
    <published>2015-10-06T06:50:00Z</published>
    <content type="html">&lt;p&gt;Hace bastantes meses, allá por febrero, publiqué el post “ Inyección de dependencias en ASP.NET 5”, donde describía el sistema integrado de inyección de dependencias que se estaba construyendo en ASP.NET 5. Sin embargo, las cosas han cambiado un poco desde entonces, por lo que he pensado que sería buena idea reeditar el artículo y actualizarlo al momento actual, con la beta 8 de ASP.NET 5 a punto de publicarse. &lt;disclaimer&gt;Aunque el producto está cada vez más estable y completo, aún podrían cambiar cosas antes de la versión definitiva, incluso antes de tener la release candidate en la calle.&lt;/disclaimer&gt; Si no sabes aún lo que es inyección de dependencias, el resto del post te sonará a arameo antiguo. Quizás podrías echar previamente un vistazo a este otro, Desacoplando controladores ASP.NET[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/10/inyeccion-de-dependencias-en-asp-net-5-actualizado"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-10-06T06:50:00Z</dc:date>
  </entry>
  <entry>
    <title>El archivo _ViewImports en MVC 6</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/09/el-archivo-viewimports-en-mvc-6" />
    <category term="desarrollo" />
    <category term="novedades" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-09-25T19:00:25Z</updated>
    <published>2015-09-22T07:10:00Z</published>
    <content type="html">&lt;p&gt;Desde la llegada de Razor, hace ya bastante tiempo, usamos en MVC el archivo _ViewStart.cshtml de las carpetas de vistas de nuestra aplicación para introducir código de inicialización de éstas. Era un buen lugar para establecer propiedades como el Layout de forma genérica, sin tener que hacerlo en cada una de las vistas que se encontraran por debajo en el árbol de directorios en el que se definía. En MVC 6 se le ha unido un compañero llamado _ViewImports.cshtml, cuya finalidad y funcionamiento es parecido al tradicional ViewStart, porque se procesa antes de ejecutar una vista e igualmente afecta a todas las vistas que se encuentren por debajo de este archivo en el árbol de directorios, aunque aporta algunas diferencias bastante interesantes. Comentamos a continuación los aspectos más destacables.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/09/el-archivo-viewimports-en-mvc-6"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-09-22T07:10:00Z</dc:date>
  </entry>
  <entry>
    <title>La carpeta wwwroot en ASPNET 5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/09/la-carpeta-wwwroot-en-aspnet-5" />
    <category term="desarrollo" />
    <category term="aspnet5" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-09-15T07:15:00Z</updated>
    <published>2015-09-15T07:15:00Z</published>
    <content type="html">&lt;p&gt;Seguimos hablando de ASP.NET 5 y los cambios que traerá para los desarrolladores que ya llevamos tiempo utilizando ASP.NET y MVC, porque esta nueva versión viene cargada de cambios y algunos son realmente rompedores. Hoy nos centraremos en un cambio simple, pero bastante importante, que afecta a la estructura de nuestros proyectos: el raíz del sitio web. Desde siempre el directorio raíz de un proyecto ASP.NET, ya fuera Web Forms, MVC, Web API o cualquier otro, coincidía con la raíz del sitio web en el servidor, es decir, en nuestros equipos se mezclaban los archivos propios del desarrollo con los contenidos estáticos que se subían posteriormente a los entornos de prueba o producción. Esto creaba un poco de lío a la hora de publicar los proyectos, porque era fácil que nos dejáramos algo por[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/09/la-carpeta-wwwroot-en-aspnet-5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-09-15T07:15:00Z</dc:date>
  </entry>
  <entry>
    <title>Código específico para distintos entornos (development, release…) en MVC 6/ASPNET 5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/07/codigo-especifico-para-distintos-entornos-development-release-en-mvc-6-aspnet-5" />
    <category term="desarrollo" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-07-21T11:01:44Z</updated>
    <published>2015-07-21T07:00:00Z</published>
    <content type="html">&lt;p&gt;En versiones anteriores de ASP.NET, podíamos utilizar la expresión HttpContext.Current.IsDebuggingEnabled para determinar si una aplicación web está ejecutándose en modo depuración o no, lo cual podía ser útil a la hora de introducir porciones de código específicas para cada caso. El valor de esa propiedad estaba directamente relacionado con el de la propiedad debug del tag &lt;compilation&gt; presente en el archivo de configuración web.config. Como sabemos, en ASP.NET 5 esto no sería posible por tres motivos: Primero, por la archiconocida desaparición del web.config. Segundo, porque al eliminar la dependencia con System.Web, ya no existen ni HttpContext.Current ni la propia clase estática HttpContext. Y tercero, porque no existe un modo “debug” como tal, sino distintos entornos de ejecución (development,[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/07/codigo-especifico-para-distintos-entornos-development-release-en-mvc-6-aspnet-5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-07-21T07:00:00Z</dc:date>
  </entry>
  <entry>
    <title>¿Dónde se añaden los filtros globales en MVC 6 / ASP.NET 5?</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/06/donde-se-anaden-los-filtros-globales-en-mvc-6-asp-net-5" />
    <category term="desarrollo" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-06-30T06:45:00Z</updated>
    <published>2015-06-30T06:45:00Z</published>
    <content type="html">&lt;p&gt;Desde la versión 3 de ASP.NET MVC, los filtros globales nos han solucionado con facilidad la anteriormente ardua labor de definir filtros en todos los controladores y acciones de nuestra aplicación sin tener que introducirlos uno a uno o crear controladores base. Por convención, los registrábamos en una clase llamada FilterConfig, habitualmente ubicada en la carpeta /App_Start del proyecto, y cuya pinta era más o menos la siguiente: Este código era llamado durante la inicialización de la aplicación desde el evento Application_Start() del archivo Global.asax: Como sabemos, en MVC 6/ASP.NET 5 el Global.asax ha desaparecido para no volver, y, si profundizamos un poco, veremos que tampoco existe el tipo GlobalFilterCollection, ni la clase estática FilterConfig que antes daban soporte a esta característica.[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/06/donde-se-anaden-los-filtros-globales-en-mvc-6-asp-net-5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-06-30T06:45:00Z</dc:date>
  </entry>
  <entry>
    <title>Inyección de dependencias en filtros MVC 6</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/06/inyeccion-de-dependencias-en-filtros-mvc-6" />
    <category term="desarrollo" />
    <category term="aspnet5" />
    <category term="aspnetmvc" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-06-23T06:45:00Z</updated>
    <published>2015-06-23T06:45:00Z</published>
    <content type="html">&lt;p&gt;Los filtros de MVC, o action filters, han sido potenciados en la versión 6 del framework añadiéndoles características que en versiones anteriores no estaban disponibles de serie en la plataforma pero que han sido muy solicitadas por los desarrolladores. Hace algún tiempo vimos una de ellas, los filtros asíncronos, y hoy veremos que la inyección de dependencias en filtros también es ya una realidad. El problema con la inyección de dependencias en los filtros es la instanciación de éstos, pues al definirse en forma de atributos de .NET no puede realizarse de forma controlada, o al menos lo suficientemente controlada como para poder inyectarles parámetros en el constructor o cargar sus propiedades desde un contenedor de inversión de control. Y aunque los filter providers aportaron alguna solución[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/06/inyeccion-de-dependencias-en-filtros-mvc-6"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-06-23T06:45:00Z</dc:date>
  </entry>
  <entry>
    <title>La clase Startup en ASPNET 5</title>
    <link rel="alternate" href="http://www.blogstack.info/post/variablenotfound/2015/02/la-clase-startup-en-aspnet-5" />
    <category term="desarrollo" />
    <category term="novedades" />
    <category term="aspnet5" />
    <author>
      <name>José M. Aguilar</name>
    </author>
    <updated>2015-02-10T09:39:20Z</updated>
    <published>2015-02-10T08:35:00Z</published>
    <content type="html">&lt;p&gt;Hace poco hablábamos del destierro del Global.asax en ASP.NET 5, y de cómo la clase Startup, siguiendo la convención establecida por este framework, era el lugar elegido para introducir código de inicialización. Pero además del código personalizado que podamos introducir, es donde, por defecto, se configuran aspectos tan importantes como los middlewares que guiarán el proceso de las peticiones, o la inyección de dependencias incluida de serie en el framework. En este post vamos a estudiar un poco más a fondo la clase de inicialización de ASP.NET 5, y comenzaremos viendo qué vamos a encontrar en ella, y las convenciones a las que hay que ceñirse para que el entorno pueda inicializarse correctamente. 1. Convenciones de la clase StartupCuando arranca una aplicación web, los componentes de infraestructura[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/variablenotfound/2015/02/la-clase-startup-en-aspnet-5"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>José M. Aguilar</dc:creator>
    <dc:date>2015-02-10T08:35:00Z</dc:date>
  </entry>
</feed>

