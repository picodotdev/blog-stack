<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <title>Blog Stack</title>
  <link rel="alternate" href="http://www.blogstack.info" />
  <subtitle>Un poco más que un agregador/planeta de bitácoras sobre programación, desarrollo, software libre, gnu/linux, tecnología, ...</subtitle>
  <updated>2016-02-24T20:02:10Z</updated>
  <dc:creator>Blog Stack</dc:creator>
  <dc:date>2016-02-24T20:02:10Z</dc:date>
  <dc:language>es</dc:language>
  <entry>
    <title>Enlazando contenedores docker</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2016/02/enlazando-contenedores-docker" />
    <category term="virtualizacion" />
    <category term="general" />
    <category term="docker" />
    <author>
      <name>admin</name>
    </author>
    <updated>2016-02-24T19:36:25Z</updated>
    <published>2016-02-24T19:36:25Z</published>
    <content type="html">&lt;p&gt;En los artículos anteriores hemos estudiado como trabajar con imágenes y contenedores docker. En todos los ejemplos que hemos mostrado, los contenedores han trabajado ofreciendo uno o varios servicios, pero no se han comunicado o enlazado con ningún otro. En realidad sería muy deseable trabajar con el paradigma de “microservicio” donde cada contenedor ofrezca un servicio que funcione de forma autónoma y aislada del resto, pero que tenga cierta relación con otro contenedor (que ofrezca también un sólo servicio) para que entre todos ofrezcan una infraestructura más o menos compleja. En esta entrada vamos a mostrar un ejemplo de como podemos aislar servicios en distintos contenedores y enlazarlos para que trabajen de forma conjunta. Instalación de wordpress en docker Más concretamente vamos a[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2016/02/enlazando-contenedores-docker"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2016-02-24T19:36:25Z</dc:date>
  </entry>
  <entry>
    <title>Gestionando el registro Docker Hub</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2016/02/gestionando-el-registro-docker-hub" />
    <category term="virtualizacion" />
    <category term="general" />
    <category term="docker" />
    <author>
      <name>admin</name>
    </author>
    <updated>2016-02-22T17:29:52Z</updated>
    <published>2016-02-22T17:29:52Z</published>
    <content type="html">&lt;p&gt;En artículos anteriores hemos estudiado la generación de imágenes docker utilizando ficheros Dockerfile y construyendo la nueva imagen con el comando docker buid. Las imágenes generadas por este método se crean en nuestro servidor docker. si queremos desplegar la aplicación o el servicio “dockerizado” desde nuestro entorno de prueba/desarrollo a nuestro entorno de producción, es necesario llevarnos la imagen de un entono a otro. Para transferir la imagen de un equipo a otro tenemos dos posibilidades: Podríamos guardar la imagen en un fichero tar, que podemos copiar al otro equipo para restaurarlo en él. Podríamos guardar la imagen en un registro docker. Podemos instalar un registro en nuestra infraestructura o utilizar docker hub, que es una aplicación web que nos proporciona la posibilidad[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2016/02/gestionando-el-registro-docker-hub"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2016-02-22T17:29:52Z</dc:date>
  </entry>
  <entry>
    <title>Ejemplos de ficheros Dockerfile, creando imágenes docker</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2016/02/ejemplos-de-ficheros-dockerfile-creando-imagenes-docker" />
    <category term="virtualizacion" />
    <category term="general" />
    <category term="docker" />
    <author>
      <name>admin</name>
    </author>
    <updated>2016-02-17T09:55:41Z</updated>
    <published>2016-02-17T09:55:41Z</published>
    <content type="html">&lt;p&gt;En la entrada: Dockerfile: Creación de imágenes docker, estudiamos el mecanismo de creación de imágenes docker, con el comando docker buid y los ficheros Dockerfile. En esta entrada vamos a estudiar algunos ejemplos de ficheros Dockerfile y cómo creamos y usamos las imágenes generadas a partir de ellos. Tenemos dos imágenes en nuestro sistema, que son las que vamos a utilizar como imágenes base para crear nuestras imágenes: $ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
debian              latest              9a02f494bef8        2 weeks ago         125.1 MB
ubuntu              14.04               3876b81b5a81        3 weeks ago         187.9 MB Creación una imagen con el servidor web Apache2 En este caso vamos a crear un directorio nuevo[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2016/02/ejemplos-de-ficheros-dockerfile-creando-imagenes-docker"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2016-02-17T09:55:41Z</dc:date>
  </entry>
  <entry>
    <title>Dockerfile: Creación de imágenes docker</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2016/02/dockerfile-creacion-de-imagenes-docker" />
    <category term="virtualizacion" />
    <category term="general" />
    <category term="docker" />
    <author>
      <name>admin</name>
    </author>
    <updated>2016-02-15T18:10:48Z</updated>
    <published>2016-02-15T18:10:48Z</published>
    <content type="html">&lt;p&gt;En la entrada anterior, estudiamos un método para crear nuevas imágenes a partir de contenedores que anteriormente habíamos configurado. En esta entrada vamos a presentar la forma más usual de crear nuevas imágenes: usando el comando docker buid y definiendo las características que queremos que tenga la imagen en un fichero Dockerfile. ¿Cómo funciona docker build? Un Dockerfile es un fichero de texto donde indicamos los comandos que queremos ejecutar sobre una imagen base para crear una nueva imagen. El comando docker build construye la nueva imagen leyendo las instrucciones del fichero Dockerfile y la información de un entorno, que para nosotros va a ser un directorio (aunque también podemos guardar información, por ejemplo, en un repositorio git). La creación de la imagen es ejecutada por[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2016/02/dockerfile-creacion-de-imagenes-docker"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2016-02-15T18:10:48Z</dc:date>
  </entry>
  <entry>
    <title>Ejecutando una aplicación web en docker</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2016/02/ejecutando-una-aplicacion-web-en-docker" />
    <category term="virtualizacion" />
    <category term="general" />
    <category term="docker" />
    <author>
      <name>admin</name>
    </author>
    <updated>2016-02-10T19:49:34Z</updated>
    <published>2016-02-10T19:49:34Z</published>
    <content type="html">&lt;p&gt;Seguimos profundizando en el uso de contenedores con docker. En la pasada entrada, hicimos una introducción al uso de docker creando nuestros primeros contenedores, en esta entrada vamos a profundizar en la gestión de imágenes docker y en la creación de un contenedor que nos ofrezca un servicio, más concretamente que ejecute un servidor web y que nos ofrezcan una página web estática. Trabajando con imágenes Vamos a descargar una imagen del sistema operativo GNU/Linux Debian del registro público docker hub. Normalmente el nombre de las imágenes tienen la forma usuario/nombre:etiqueta, si no indicamos la etiqueta será latest. Por ejemplo el nombre de una imagen puede ser nuagebec/ubuntu:15.04 $ docker pull debian
 Using default tag: latest
 latest: Pulling from library/debian
 03e1855d4f31: Pull[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2016/02/ejecutando-una-aplicacion-web-en-docker"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2016-02-10T19:49:34Z</dc:date>
  </entry>
  <entry>
    <title>Primeros pasos con Docker</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2016/02/primeros-pasos-con-docker" />
    <category term="virtualizacion" />
    <category term="general" />
    <category term="docker" />
    <author>
      <name>admin</name>
    </author>
    <updated>2016-02-09T11:38:31Z</updated>
    <published>2016-02-09T11:38:31Z</published>
    <content type="html">&lt;p&gt;En una entrada anterior, veíamos los fundamentos de docker, y repasábamos los principales componentes de la arquitectura de docker: El cliente de Docker es la principal interfaz de usuario para docker, acepta los comandos del usuario y se comunica con el daemon de docker. Imágenes de Docker (Docker Images): Las imágenes de Docker son plantillas de solo lectura, es decir, una imagen puede contener el sistema de archivo de un sistema operativo como Debian, pero esto solo nos permitirá crear los contenedores basados en esta configuración. Si hacemos cambios en el contenedor ya lanzado, al detenerlo esto no se verá reflejado en la imagen. Registros de Docker (Docker Registries): Los registros de Docker guardan las imágenes, estos son repositorios públicos o privados donde podemos subir o descargar[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2016/02/primeros-pasos-con-docker"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2016-02-09T11:38:31Z</dc:date>
  </entry>
  <entry>
    <title>Introducción a docker</title>
    <link rel="alternate" href="http://www.blogstack.info/post/pledin/2015/12/introduccion-a-docker" />
    <category term="virtualizacion" />
    <category term="general" />
    <category term="docker" />
    <author>
      <name>admin</name>
    </author>
    <updated>2015-12-22T08:11:44Z</updated>
    <published>2015-12-22T08:11:44Z</published>
    <content type="html">&lt;p&gt;Últimamente Docker está de moda. Si haces una búsqueda por intenet verás que existen multitud de páginas hablando del tema. Podría preguntarme, qué necesidad tengo de escribir otra entrada en mi blog sobre un tema tan estudiado. Y la respuesta sería que si lo escribo lo aprendo, y además he llegado a la conclusión de que tengo que aprenderlo. Empezamos con una definición: Docker es un proyecto de software libre que permite automatizar el despliegue de aplicaciones dentro de contenedores.  ¿Automatizar el despliegue de aplicaciones?, ¡esto me interesa!: este año estoy impartiendo un módulo del CFGS de Administración de Sistemas Informáticos, que se titula: “Implantación de aplicaciones web”. Parece razonable que mis alumnos deban conocer esta nueva tecnología, que en los últimos años (realmente[...]&lt;/p&gt;&lt;p&gt;&lt;a href="http://www.blogstack.info/post/pledin/2015/12/introduccion-a-docker"&gt;Leer artículo completo &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</content>
    <dc:creator>admin</dc:creator>
    <dc:date>2015-12-22T08:11:44Z</dc:date>
  </entry>
</feed>

