<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Blog Bitix]]></title>
  <link href="http://picodotdev.github.io/blog-bitix/atom.xml" rel="self"/>
  <link href="http://picodotdev.github.io/blog-bitix/"/>
  <updated>2014-05-01T19:33:44+02:00</updated>
  <id>http://picodotdev.github.io/blog-bitix/</id>
  <author>
    <name><![CDATA[pico.dev]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducción a Elasticsearch]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch/"/>
	<published>2014-04-25T17:15:05+02:00</published>
    <updated>2014-05-01T13:00:00+02:00</updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/04/introduccion-a-elasticsearch</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right; text-align: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/elasticsearch.png" class="right" alt="Elasticsearch" title="Elasticsearch"/><br/>
</div>


<p>Continuando con la forma de <a href="http://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html">como dar solución a la búsquedas en las entidades de dominio</a> en esta entrada profundizaré en la solución que comentaba de usar <a href="http://www.elasticsearch.org">Elasticsearch</a> (ES). ES se basa en <a href="http://lucene.apache.org/core/">Lucene</a> pero expone su funcionalidad a través de una interfaz REST recibiendo y enviando datos en formato JSON y oculta mediante esta interfaz los detalles internos de lucene. Esta interfaz permite que pueda ser utilizada por cualquier plataforma no solo Java, puede usarse desde Python, .NET, PHP o incluso desde un navegador con Javascript. Es persistente, es decir, que lo que indexemos en ella sobrevivirá a un reinicio del servidor.</p>

<p>Como comentaba en <a href="http://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html">el artículo anterior de búsquedas sobre entidades de dominio</a> ES nos puede servir para hacer búsquedas a texto completo pero también podemos hacer otra serie de cosas adicionales que no podemos con una base de datos relacional aunque soporte en su lenguaje SQL búsqueda a texto completo, por ejemplo, resaltado (highlight) y facetas (facets), también permite hacer búsquedas vagas (fuzzy) y soporta diferentes analizadores según el idioma de la propiedad en que se busque. El indexar y desindexar los datos en elasticsearch para que luego puedan ser buscados es responsabilidad nuestra y además de insertarlos o eliminarlos en la base de datos debemos hacer lo mismo en ES ya sea haciéndolo en ambos sitios a la vez o mediante un proceso de fondo que se encargue de ello.</p>

<p>La instalación de ES es muy sencilla, basta con <a href="http://www.elasticsearch.org/overview/elkdownloads/">descargar el zip de su distribución</a>, descomprimirlo e iniciarlo con el siguiente comando:</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-1.sh'></script>
<noscript><pre><code>$ elasticsearch -f</code></pre></noscript></div>


<p>Después de unos segundos deberemos ver algo como lo siguiente.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/21/elasticsearch.png" title="Mensajes de inicio del servidor Elasticsearch" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/21/elasticsearch-thumb.png"/></a>
</div>


<p>Elasticsearch usa sus propios conceptos y aunque no es una base de datos relacional algunos pueden ser similares. Lo que en en una base de datos relacional es un esquema en ES es un índice, lo que en la primera es una tabla en ES es un tipo, continuando una fila en ES es un documento y finalmente una columna es una propiedad en ES.</p>

<p>La documentación de Elasticsearch es un documentación de referencia probablemente pero para aprender a sacarle el máximo provecho probablemente debamos buscar algún manual o libro que nos lo explique de una forma más didáctica. Algunas opciones son el libro <a href="http://exploringelasticsearch.com/">Exploring Elasticsearch</a> y el <a href="http://www.elasticsearchtutorial.com/">tutorial Elasticsearch</a>.</p>

<p>Veamos como crear y borrar un índice, para ello utilizaremos la herramienta curl:</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-2.sh'></script>
<noscript><pre><code>$ curl -XPUT &#39;http://localhost:9200/blogbitix&#39;
$ curl -XDELETE &#39;http://localhost:9200/blogbitix&#39;</code></pre></noscript></div>


<p>Aunque Elasticsearch es orientado a documentos y estos no tienen que adherirse a un esquema como en una base de datos relacional, podemos instruir a Elasticsearch como queremos que haga las búsquedas sobre los campos del documento. Para ello definimos la correspondencia (mapping). A continuación pondré el caso hipotético de un tipo libro que tiene las propiedades de nombre y descripción en varios idiomas, una serie de etiquetas para catalogarlo y una cantidad.</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-3.sh'></script>
<noscript><pre><code>$ curl -XPUT &#39;http://localhost:9200/blogbitix/libro/_mapping&#39; -d &#39;{
    &quot;producto&quot; : {
        &quot;properties&quot; : {
            &quot;nombre&quot; : {
                &quot;type&quot; : &quot;object&quot;,
                &quot;properties&quot; : { 
                    &quot;es&quot;: { &quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;analyzed&quot;, &quot;analyzer&quot; : &quot;spanish&quot; },
                    &quot;en&quot;: { &quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;analyzed&quot;, &quot;analyzer&quot; : &quot;english&quot; }
                }
            },
            &quot;descripcion&quot; : {
                &quot;type&quot; : &quot;object&quot;,
                &quot;properties&quot; : { 
                    &quot;es&quot;: { &quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;analyzed&quot;, &quot;analyzer&quot; : &quot;spanish&quot;, &quot;store&quot;: &quot;yes&quot; },
                    &quot;en&quot;: { &quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;analyzed&quot;, &quot;analyzer&quot; : &quot;english&quot;, &quot;store&quot;: &quot;yes&quot; }
                }
            },
            &quot;etiquetas&quot; : {
                &quot;type&quot; : &quot;object&quot;,
                &quot;properties&quot; : { 
                    &quot;es&quot;: { 
                        &quot;type&quot; : &quot;multi_field&quot;,
                        &quot;fields&quot; : {
                            &quot;term&quot; : { &quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;analyzed&quot;, &quot;analyzer&quot; : &quot;spanish&quot; },
                            &quot;untouched&quot; : {&quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;}
                        }
                    },
                    &quot;en&quot;: { 
                        &quot;type&quot; : &quot;multi_field&quot;,
                        &quot;fields&quot; : {
                            &quot;term&quot; : { &quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;analyzed&quot;, &quot;analyzer&quot; : &quot;english&quot; },
                            &quot;untouched&quot; : {&quot;type&quot; : &quot;string&quot;, &quot;index&quot; : &quot;not_analyzed&quot;}
                        }
                    }
                }
            },
            &quot;cantidad&quot; : { &quot;type&quot; : &quot;long&quot; }
        }
    }
}&#39;</code></pre></noscript></div>


<p>Con la siguiente petición podemos ver el mapeo de un tipo.</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-4.sh'></script>
<noscript><pre><code>$ curl -XGET &#39;http://localhost:9200/blogbitix/libro/_mapping?pretty=true&#39;</code></pre></noscript></div>


<p>El mapeo no es necesario definirlo previamente pero es aconsejable para ciertas propiedades sino queremos que ES tome valores por defecto o haga suposiciones, a continuación insertamos los documentos. Cada documento tiene un identificativo que deberemos asignarle y para indexarlo básicamente proporcionamos un JSON con las propiedades del documento. Elasticsearch se encargará de indexarlo para que una búsqueda posterior se ejecute rápidamente.</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-5.sh'></script>
<noscript><pre><code>$ curl -XPUT &#39;http://localhost:9200/blogbitix/libro/1&#39; -d &#39;{
    &quot;libro&quot; : {
        &quot;nombre&quot; : {
            &quot;es&quot;: &quot;PlugIn Tapestry&quot;,
            &quot;en&quot;: &quot;PlugIn Tapestry&quot;
        },
        &quot;descripcion&quot; : {
            &quot;es&quot;: &quot;Desarrollo de aplicaciones y páginas web con Apache Tapestry&quot;,
            &quot;en&quot;: &quot;Development of applications and web pages with Apache Tapestry&quot;
        },
        &quot;etiquetas&quot; : {
            &quot;es&quot;: [&quot;libro&quot;, &quot;tecnologia&quot;, &quot;tapestry&quot;, &quot;java&quot;, &quot;español&quot;],
            &quot;en&quot;: [&quot;book&quot;, &quot;tecnology&quot;, &quot;tapestry&quot;, &quot;java&quot;, &quot;spanish&quot;]
        },
        &quot;cantidad&quot; : 1000
    }
}&#39;

$ curl -XPUT &#39;http://localhost:9200/blogbitix/libro/2&#39; -d &#39;{
    &quot;libro&quot; : {
        &quot;nombre&quot; : {
            &quot;es&quot;: &quot;Tapestry 5 - Desarrollo rápido de aplicaciones web en Java&quot;,
            &quot;en&quot;: &quot;Tapestry 5 - Rapid web application development in Java&quot;
        },
        &quot;descripcion&quot; : {
            &quot;es&quot;: &quot;Una guía completa presentando Apache Tapestry y su aproximación inovadora para la construcción de aplicaciones web modernas&quot;,
            &quot;en&quot;: &quot;A comprehensive guide, introducing Apache Tapestry and its innovative approach to building modern web applications&quot;
        },
        &quot;etiquetas&quot; : {
            &quot;es&quot;: [&quot;libro&quot;, &quot;tecnologia&quot;, &quot;tapestry&quot;, &quot;java&quot;, &quot;inglés&quot;],
            &quot;en&quot;: [&quot;book&quot;, &quot;tecnology&quot;, &quot;tapestry&quot;, &quot;java&quot;, &quot;english&quot;]
        },
        &quot;cantidad&quot; : 1000
    }
}&#39;

$ curl -XPUT &#39;http://localhost:9200/blogbitix/libro/3&#39; -d &#39;{
    &quot;libro&quot; : {
        &quot;nombre&quot; : {
            &quot;es&quot;: &quot;Tapestry in Action&quot;,
            &quot;en&quot;: &quot;Tapestry in Action&quot;
        },
        &quot;descripcion&quot; : {
            &quot;es&quot;: &quot;Tapestry in Action e la introducción definitiva a Tapestry 3 escrito por Howard Lewis Ship, el creador de Tapestry&quot;,
            &quot;en&quot;: &quot;Tapestry in Action is the definitive introduction to Tapestry 3 written by Howard Lewis Ship, the creator of Tapestry&quot;
        },
        &quot;etiquetas&quot; : {
            &quot;es&quot;: [&quot;libro&quot;, &quot;tecnologia&quot;, &quot;tapestry&quot;, &quot;java&quot;, &quot;inglés&quot;],
            &quot;en&quot;: [&quot;book&quot;, &quot;tecnology&quot;, &quot;tapestry&quot;, &quot;java&quot;, &quot;english&quot;]
        },
        &quot;cantidad&quot; : 1000
    }
}&#39;</code></pre></noscript></div>


<p>Con las anteriores peticiones hemos indexado 3 documentos, podemos ver los datos de cada uno de ellos con:</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-6.sh'></script>
<noscript><pre><code>$ curl -XGET &#39;http://localhost:9200/blogbitix/libro/1&#39;</code></pre></noscript></div>


<p>Una vez tenemos unos cuantos documentos indexados en ES podemos empezar a hacer búsquedas. Elasticsearch para hacer las búsquedas usa su propio lenguaje de DSL, no es sencillo y la documentación de ES no es muy útil para aprender a como usarla. Pondré algunos ejemplos simples, probablemente no reales y no representativos de todo el potencial que puede ofrecer ES. El primero es una búsqueda por una determinada palabra.</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-7.sh'></script>
<noscript><pre><code>$ curl -XGET &#39;http://localhost:9200/blogbitix/libro/_search?pretty=true&#39; -d &#39;{
    &quot;query&quot; : {
        &quot;fuzzy&quot; : { &quot;descripcion.es&quot;: &quot;tapestry&quot; }
    }
}&#39;</code></pre></noscript></div>


<p>Una búsqueda similar a la anterior pero con más condiciones, exigiendo que no tenga unas palabras en concreto y algunas que deberían tener haciendo que ES valore más los documentos que las tengan.</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-8.sh'></script>
<noscript><pre><code>$ curl -XGET &#39;http://localhost:9200/blogbitix/libro/_search?pretty=true&#39; -d &#39;{
    &quot;query&quot; : {
        &quot;bool&quot; : {
            &quot;must&quot; : {
                &quot;fuzzy&quot; : { &quot;descripcion.es&quot;: &quot;tapestry&quot; }
            },
            &quot;must_not&quot; : {
                &quot;query_string&quot; : {
                    &quot;fields&quot; : [&quot;descripcion.es&quot;],
                    &quot;query&quot; : &quot;\&quot;tapestry 3\&quot;&quot;
                }
            },
            &quot;should&quot; : [{ 
                &quot;match&quot; : {
                    &quot;descripcion.es&quot; : {
                        &quot;query&quot; : &quot;guía&quot;,
                        &quot;type&quot; : &quot;phrase&quot;
                    }
                }
            }]
        }
    }
}&#39;</code></pre></noscript></div>


<p>Además de búsquedas ES puede ofrecernos más funcionalidades como las facetas con las que podemos obtener un sumatorio de los resultados. En la siguiente consulta buscamos los documentos con una determinada palabra y además le pedimos a ES que nos devuelva cuantos documentos hay que cumplan ese criterio en cada etiqueta. Esto probablemente es lo que usen en la tienda de Amazon cuando muestran cuantos elementos hay en las diferentes categorizaciones. Aunque en Amazon solo muestran las categorías de los elementos buscados probablemente podrían mostrar cuantos elementos hay en cada una de esas categorías.</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-9.sh'></script>
<noscript><pre><code>$ curl -XGET &#39;http://localhost:9200/blogbitix/libro/_search?pretty=true&#39; -d &#39;{
    &quot;query&quot; : {
        &quot;fuzzy&quot; : { &quot;descripcion.es&quot;: &quot;tapestry&quot; }
    },
    &quot;facets&quot;: {
        &quot;etiquetas&quot;: { &quot;terms&quot;: { &quot;field&quot;: &quot;etiquetas.es.untouched&quot; } }
    }
}&#39;</code></pre></noscript></div>




<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/21/categorias-amazon.png" title="Categorías de productos (facets) en Amazon" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/21/categorias-amazon-thumb.png"/></a>
</div>


<p>Otra de las funcionalizades que nos puede interesar es que ES nos ofrezca sugerencias para determinados términos, en el siguiente ejemplo solicitamos además de la búsqueda sugerencias para algunas palablas que tienen fallos de escritura.</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-10.sh'></script>
<noscript><pre><code>$ curl -XGET &#39;http://localhost:9200/elblogdepicodev/libro/_search?pretty=true&#39; -d &#39;{
    &quot;query&quot; : {
        &quot;fuzzy&quot; : { &quot;descripcion.es&quot;: &quot;tapestry&quot; }
    },
    &quot;suggest&quot;: {
        &quot;suggest1&quot; : {
            &quot;text&quot; : &quot;tapestyr desarrallo&quot;,
            &quot;term&quot; : {
                &quot;field&quot; : &quot;descripcion.es&quot;  
            }
        }
    }
}&#39;</code></pre></noscript></div>


<p>Finalmente, otra cosa que nos puede interesar es que ES nos resalte las palabras de determinados campos para destacar las coincidencias de los resultados de forma visual que se han encontrado. Esto necesita { store: &ldquo;yes&rdquo; } en la correspondencia de la propiedad.</p>

<div><script src='https://gist.github.com/picodotdev/11294261.js?file=script-11.sh'></script>
<noscript><pre><code>$ curl -XGET &#39;http://localhost:9200/elblogdepicodev/libro/_search?pretty=true&#39; -d &#39;{
    &quot;query&quot; : {
        &quot;query_string&quot;: {  
            &quot;query&quot;: &quot;Tapestry&quot;
        }
    },
    &quot;highlight&quot; : {
        &quot;fields&quot; : {
            &quot;descripcion.es&quot; : { }
        }
    }
}&#39;</code></pre></noscript></div>


<p>Estos son solo unos pocos ejemplos, ES seguro que puede ofrecer muchas cosas más que leyendo solo la documentación de referencia es difícil descubrir. Lo ideal sería tener un libro específico en el que aprender en mucha más profundidad a sacarle partido sin embargo hasta el momento. El libro Elasticsearch Server tiene buena pinto</p>

<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html">Búsquedas de texto completo en objetos de dominio</a><br/>
<a href="http://www.elasticsearch.org">Elasticsearch</a><br/>
<a href="http://exploringelasticsearch.com/">Exploring Elasticsearch</a><br/>
<a href="http://www.elasticsearchtutorial.com/">Tutorial Elasticsearch</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="blog-stack" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ejemplo lista de tareas con Backbone y React]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/"/>
	<published>2014-04-11T16:33:28+02:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right; text-align: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/backbone.png" class="right" alt="Backbone" title="Backbone"/><br/>
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/react.png" class="right" alt="React" title="React"/>
</div>


<p>En anteriores entradas explicaba como hacer el típico ejemplo que se suele usar como demostración en los framework MVC de Javascript que consiste en una lista de tareas en la que se pueden añadir nuevas, marcarlas como completadas y eliminarlas. Realice este ejemplo en uno de ellos <a href="http://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">usando solo Backbone</a> y posteriormente <a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">usando Marionette</a>. Estos ejemplos eran parte de una serie de artículos sobre Javascript que la que mostaba como usar muchas otras herramientas como <a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Require JS</a>, <a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Mustache</a>, <a href="http://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">logging con javscript</a>, <a href="http://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">capturar errores en javascript</a>, <a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">introducción a Backbone</a>, <a href="http://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">lista de tarea con Backbone, RESTEasy y Tapestry</a>, <a href="http://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">pruebas unitarias con Jasmine y Sinon</a>, <a href="http://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/">Usar Grunt para ejecutar teses unitarios de código Javascript</a> y que constituyen parte del actual «estado del arte» en cuanto a desarrollo con Javascript.</p>

<p>La lista de tareas aunque es un ejemplo sencillo sirve perfectamente como ejercicio para mostrar el uso de los frameworks MVC. En esta entrada voy a mostrar como hacer el mismo ejemplo usando <a href="http://backbonejs.org/">Backbone</a> y <a href="http://facebook.github.io/react/">React</a> y veremos, en mi opinión, que el ejemplo es mucho mas sencillo y lógico.</p>

<p>La parte más complicada y menos intuitiva del ejemplo de la lista de tareas con solamente Backbone o con <a href="http://marionettejs.com/">Marionette</a> probablemente era la V del MVC. Backbone es un framework que deja bastante libertad al desarrollador pudiendo usar únicamente las partes que necesitemos de él, sin embargo, esta sencillez nos obliga a gestionar ciertas «tareas de fontanería» y repetitivas nosotros mismos como la gestión de las vistas y la memoria. Marionette trata de dar solución a parte de estas tareas necesarias además de proporcionar unas guías y arquitectura para el desarrollo de las aplicaciones. Sin embargo, aún con Marionette la construcción de la parte de la vista con el uso de ItemView, CollectionView y Layout comentados en la <a href="https://github.com/marionettejs/backbone.marionette">documentación</a> me resultó poco intuitivo y en cierta medida todavía complicado, no acabé convencido del todo, con React he acabado con la sensación que hacer algo más complejo que este ejemplo es algo al menos manejable.</p>

<p>React es una librería que en algunos casos se está usando en aplicaciones junto con Backbone para proporcionar la parte de la vista y controlador que en conjunto definen lo que en React se conoce como un componente. De esta manera Backbone proporciona los modelos, eventos, routing , &hellip; y React proporciona la representación de esos modelos en html y el código encargado de gestionar el estado de esa vista. React tiene ciertas ventajas adicionales por su funcionamiento y es que cuando se cambia algo en la vista no se reemplaza el html completo de la vista y se inserta uno nuevo sino que React busca las diferencias entre la vista actual y la nueva y realiza únicamente los cambios necesarios para tener la vista nueva, esto tiene la ventaja de que el proceso es más eficiente y rápido y puede notarse en aplicaciones con muchos datos gestionados en el cliente. Pero lo que más me ha gustado de React es la definición del concepto de componente (vista + controlador) que por una parte hace que la creación de las vistas es mucho más sencilla e intuitiva que en Backbone o Marionette y que junto con el controlador permite crear piezas reusables de código.</p>

<p>Los componentes de React reemplazan a las vistas de Backbone y vistas, controladores y layouts de Marionette. En el nuevo ejemplo los cambios principales se encuentran en el archivo tareas.js que contiene el código de la aplicación de lista de tareas.</p>

<div><script src='https://gist.github.com/picodotdev/10477127.js?file=tareas.js'></script>
<noscript><pre><code>define(&#39;tareas&#39;, [ &#39;jquery&#39;, &#39;underscore&#39;, &#39;backbone&#39;, &#39;react&#39;, &#39;mustache&#39;, &#39;plantillas&#39;, &#39;i18n!i18n/nls/mensajes&#39; ], function($, _, Backbone, React, Mustache, Plantillas, Mensajes) {
    function render(plantilla, datos, mensajes) {
        var d = datos || {};
        var m = mensajes || {};
        
        var vista = _.extend(d, {
            message: m
        });
        
        var p = Plantillas[plantilla];
        var pp = p();
        return pp(vista);
    }
    
    // An example generic Mixin that you can add to any component that should react
    // to changes in a Backbone component. The use cases we&#39;ve identified thus far
    // are for Collections -- since they trigger a change event whenever any of
    // their constituent items are changed there&#39;s no need to reconcile for regular
    // models. One caveat: this relies on getBackboneModels() to always return the
    // same model instances throughout the lifecycle of the component. If you&#39;re
    // using this mixin correctly (it should be near the top of your component
    // hierarchy) this should not be an issue.
    var BackboneMixin = {
        componentDidMount: function() {
            // Whenever there may be a change in the Backbone data, trigger a reconcile.
            this.getBackboneModels().forEach(function(model) {
                model.on(&#39;add change remove reset&#39;, this.forceUpdate.bind(this, null), this);
            }, this);
        },
        componentWillUnmount: function() {
            // Ensure that we clean up any dangling references when the component is
            // destroyed.
            this.getBackboneModels().forEach(function(model) {
                model.off(null, null, this);
            }, this);
        }
    };

    var Tarea = Backbone.Model.extend({
        urlRoot : &#39;rest/tareas/tarea&#39;,
        defaults : {
            id : null,
            descripcion : &#39;&#39;,
            completada : false
        },
        toogle: function() {
            this.set(&#39;completada&#39;, !this.get(&#39;completada&#39;));
        }
    });

    var Tareas = Backbone.Collection.extend({
        url: &#39;rest/tareas&#39;,
        model: Tarea,
        findCompletadas: function() {
            return this.models.filter(function(tarea) {
                return tarea.get(&#39;completada&#39;);
            });
        },
        removeCompletadas: function() {
            _.each(this.findCompletadas(), function(tarea) {
                tarea.destroy();
            });
        }
    });

    var TareaComponent = React.createClass({
        componentDidMount: function() {
            var _this = this;
            this.ui = {
                completada: $(&#39;input[name=completada]&#39;, this.getDOMNode())
            };
            
            this.ui.completada.change(function(event) {
                _this.props.tarea.toogle();
                _this.props.tarea.save();
            });
        },      
        render: function() {
//          return (
//              &lt;label className=&quot;checkbox&quot;&gt;
//                  &lt;input type=&quot;checkbox&quot; name=&quot;completada&quot; checked={(this.props.tarea.get(&#39;completada&#39;))?&#39;checked&#39;:&#39;&#39;}/&gt; &lt;span className={this.props.tarea.completada}&gt;{this.props.tarea.get(&#39;descripcion&#39;)}&lt;/span&gt;
//              &lt;/label&gt;
//          );
            return React.DOM.label({className:&#39;checkbox&#39;},
                React.DOM.input({type:&#39;checkbox&#39;, name:&#39;completada&#39;, checked:(this.props.tarea.get(&#39;completada&#39;))?&#39;checked&#39;:&#39;&#39;}),
                React.DOM.span({className:this.props.tarea.completada}, this.props.tarea.get(&#39;descripcion&#39;))
            );
        }
    });
    
    var TareasComponent = React.createClass({
        render: function() {
            var tareas = this.props.tareas.map(function(tarea) {
//              return (
//                  &lt;li&gt;&lt;TareaComponent tarea={tarea}/&gt;&lt;/li&gt;
//              );
                return React.DOM.li(null,
                        TareaComponent({tarea:tarea})
                );
            }, this);
//          return (
//              &lt;ul&gt;{tareas}&lt;/ul&gt;               
//          );
            return React.DOM.ul(null, tareas);
        }
    });
    
    var EstadoComponent = React.createClass({
        render: function() {
            var d = this.getData();
            var m = {
                &#39;COMPLETADAS_tareas_de_TOTAL_completadas&#39;: Mustache.render(Mensajes.COMPLETADAS_tareas_de_TOTAL_completadas, d),
                &#39;Muy_bien_has_completado_todas_las_tareas&#39;: Mensajes.Muy_bien_has_completado_todas_las_tareas,
            };
            var estado = render(&#39;estado&#39;, d, m);
//          return (
//              &lt;span className=&quot;estado&quot;&gt;{estado}&lt;/span&gt;
//          );
            return React.DOM.span({className:&#39;estado&#39;}, estado);
        },
        // Métodos
        getData: function() {
            var completadas = this.props.tareas.findCompletadas().length;
            var total = this.props.tareas.length;

            return {
                completadas: completadas,
                total: total
            };
        }
    });
    
    var TareasApp = React.createClass({
        mixins: [BackboneMixin],
        getBackboneModels: function() {
            return [this.state.tareas];
        },
        getInitialState: function() {
            return {tareas: new Tareas()};
        },
        componentDidMount: function() {
            var _this = this;
            this.ui = {
                nuevaTarea: $(&#39;input[name=nuevaTarea]&#39;, this.getDOMNode()),
                limpiar: $(&#39;input[name=limpiar]&#39;, this.getDOMNode())
            };
            
            this.ui.nuevaTarea.focus();
            
            // Eventos
            this.ui.nuevaTarea.keypress(function(event) {
                // Comprobar si la tecla pulsada es el return
                if (event.which == 13) {
                    var descripcion = _this.ui.nuevaTarea.val().trim();

                    // Comprobar si se ha introducido descripción de la tarea
                    if (descripcion == &#39;&#39;) {
                        return;
                    }

                    // Añadir la tarea y limpiar el input
                    var tarea = new Tarea({
                        descripcion: descripcion,
                        completada: false
                    });
                    _this.addTarea(tarea);
                    _this.ui.nuevaTarea.val(&#39;&#39;);
                }
            });
            
            this.ui.limpiar.click(function() {
                _this.removeTareasCompletadas();
            });
        },
        render: function() {
//          return (
//              &lt;div&gt;
//                  &lt;h2&gt;{Mensajes.Lista_de_tareas}&lt;/h2&gt;
//                  &lt;input type=&quot;text&quot; name=&quot;nuevaTarea&quot; className=&quot;form-control&quot; placeholder={Mensajes.Introduce_una_nueva_tarea} /&gt;
//                  &lt;TareasComponent tareas={this.state.tareas} /&gt;
//                  &lt;EstadoComponent tareas={this.state.tareas} /&gt;
//                  &lt;br/&gt;
//                  &lt;input type=&quot;button&quot; name=&quot;limpiar&quot; value={Mensajes.Limpiar} disabled={(this.isTareasCompletadas())?null:&#39;disabled&#39;} className=&quot;btn&quot; /&gt;
//              &lt;/div&gt;
//          );
            return React.DOM.div(null,
                    React.DOM.h2(null, Mensajes.Lista_de_tareas),
                    React.DOM.input({type:&#39;text&#39;, name:&#39;nuevaTarea&#39;, className:&#39;form-control&#39;, placeholder:Mensajes.Introduce_una_nueva_tarea}),
                    TareasComponent({tareas:this.state.tareas}),
                    EstadoComponent({tareas:this.state.tareas}),
                    React.DOM.br(),
                    React.DOM.input({type:&#39;button&#39;, name:&#39;limpiar&#39;, value:Mensajes.Limpiar, disabled:(this.isTareasCompletadas())?&#39;&#39;:&#39;disabled&#39;, className:&#39;btn&#39;})
            );
        },
        // Métodos
        isTareasCompletadas:function() {
            return this.state.tareas.findCompletadas().length &gt; 0;
        },
        addTarea: function(tarea) {
            this.state.tareas.add(tarea);
            tarea.save();
        },
        removeTareasCompletadas: function() {
            this.state.tareas.removeCompletadas();
        },
        resetTareas: function(tareas) {
            this.state.tareas.reset(tareas);
        },
        fetch: function() {
            // Con reset:true solo se lanza un evento para todos los cambios que se produzcan en la colección
            this.state.tareas.fetch({reset:true});
        }
    });
    
    return {
        Tarea: Tarea,
        Tareas: Tareas,
        TareaComponent: TareaComponent,
        TareasComponent: TareasComponent,
        EstadoComponent: EstadoComponent,
        TareasApp: TareasApp
    };
});</code></pre></noscript></div>


<p>El resultado es el siguiente:</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/20/backbone-react.png" title="Ejemplo lista de tareas con Backbone y React" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/20/backbone-react-thumb.png"/></a>
</div>


<p>Los elementos de las vistas se recomienda definirlas con los elementos que proporciona React con React.DOM, pueden definirse más al estilo de html con jsx pero esto hace que el javascript haya de compilarse para transformar ese jsx/html a los elementos React.DOM, el mayor problema es que esto es un proceso costoso lo que puede ralentizar la carga de una página y que el compilador tiene un tamaño considerable de unos 300 KiB. El JSX es más claro y parecido al resultado final que el código equivalente React.DOM pero aún así el código javascript es suficientemente claro. Si aún así quisiésemos usar JSX lo recomendable sería que los archivos con contenido jsx se precompilase en un momento anterior de enviarlo al cliente, posiblemente antes del despliegue de la aplicación en el servidor.</p>

<p>Para probar el código podemos hacerlo abriendo el archivo test/javascript/SpecRunner.html, sin embargo, deberemos hacerlo con Chrome o Chromium y lanzándolo con un parámetro opcional para permitir la carga de los archivos.</p>

<div><script src='https://gist.github.com/picodotdev/10477127.js?file=chromium'></script>
<noscript><pre><code>$ chromium --allow-file-access-from-files</code></pre></noscript></div>


<p>También podríamos probarlo usando gradle con:</p>

<div><script src='https://gist.github.com/picodotdev/10477127.js?file=gradlew'></script>
<noscript><pre><code>$ ./gradlew jasmine</code></pre></noscript></div>


<p>Sin embargo, <a href="http://phantomjs.org/">PhantomJS</a> que es lo que se utiliza para simular el navegador en las pruebas con jasmine y grunt, no soporta la función bind produciéndose la siguiente excepción al usarse en la librería de React.</p>

<div><script src='https://gist.github.com/picodotdev/10477127.js?file=error-bind.txt'></script>
<noscript><pre><code>Error: define: &#39;undefined&#39; is not a function (evaluating &#39;RegExp.prototype.test.bind(
&gt;&gt;     /^(data|aria)-[a-z_][a-z\d_.\-]*$/
&gt;&gt;   )&#39;)</code></pre></noscript></div>


<p>Para evitarlo debemos añadir un polyfill. Deberemos añadir los polyfills de <a href="https://github.com/cujojs/poly">cujojs/poly</a>, podemos hacer uso de ellos con RequireJS basta como añadirlo como dependencia:</p>

<div><script src='https://gist.github.com/picodotdev/10477127.js?file=main-specs.js'></script>
<noscript><pre><code>define([&#39;poly/function&#39;, &#39;specs/tareas-specs&#39;], function() {
});</code></pre></noscript></div>


<p>Este problema de la función bind ya esta incluido como <a href="https://code.google.com/p/phantomjs/issues/detail?id=522">peticion en PhantomJS</a> y probablemente se resuelva en la versión 2.0.</p>

<p>El ejemplo con el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/BackboneReact">código fuente completo de este ejemplo</a> está en <a href="https://github.com/picodotdev">mi repositorio de GitHub</a>, puedes probarlo en tu equipo con el siguiente comando:</p>

<div><script src='https://gist.github.com/picodotdev/10477127.js?file=gradle-tomcatRun.sh'></script>
<noscript><pre><code>$ ./gradlew tomcatRun</code></pre></noscript></div>


<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Introducción y ejemplo de RequireJS</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Introducción y ejemplo de Mustache</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">Logging en Javascript con log4javascript</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">Capturar errores de Javascript</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/04/optimizar-modulos-de-requirejs.html">Optimizar módulos de RequireJS y archivos Javascript</a><br/>
<a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">Introducción y ejemplo de Backbone.js</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Ejemplo de pruebas unitarias en javascript con Jasmine y Sinon</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Ejemplo lista de tareas con Marionette</a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/">Usar Grunt para ejecutar teses unitarios de código Javascript</a><br/>
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility">Function/bind#Compatibility</a><br/>
<a href="http://neugierig.org/software/blog/2014/02/react-jsx-coffeescript.html">React, JSX, and CoffeeScript</a><br/></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="javascript" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usar Grunt para ejecutar teses unitarios de código Javascript]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript/"/>
	<published>2014-04-04T16:43:23+02:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/04/usar-grunt-para-ejecutar-teses-unitarios-de-codigo-javascript</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/grunt.png" class="right" alt="Grunt" title="Grunt"/>
</div>


<p>En la <a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">serie de artículos que escribí sobre javascript</a> hice un ejemplo más o menos complejo y parecido a lo que podría ser una aplicación real usando muchas de las herramientas que ahora se consideran una buena opción para desarrollar aplicaciones javascript como <a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">RequireJS</a>, <a href="http://www.genbetadev.com/desarrollo-web/patron-de-diseno-mvc-del-lado-cliente-con-backbonejs">Backbone</a>, <a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Marionette</a>, <a href="http://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Jasmine y Sinon</a>. En el <a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">ejemplo de la lista de tareas con estas herramientas</a> hice unas cuantas pruebas unitarias para mostrar en un ejemplo como son y la forma de usar <a href="http://jasmine.github.io/">Jasmine</a>.</p>

<p>Sin embargo, para ejecutar las pruebas unitarias se necesitaba un navegador y hacerlo de forma manual cuando quisiéramos comprobar el estado de las pruebas. Lo ideal tal y como se comenta en el libro <a href="http://www.amazon.es/gp/product/B000SEGEKI/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B000SEGEKI&linkCode=as2&tag=blobit-21">The Pragmatic Programmer</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B000SEGEKI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> es que las pruebas unitarias se ejecuten de forma automatizada con la herramienta de construcción que usemos, esto evitará que se nos olvide ejecutarlas en cada cambio y así descubriremos los errores pronto, también podremos hacer que se ejecuten en un entorno de integración continua como podría ser <a href="http://jenkins-ci.org/">Jenkins</a>. En esta entrada mostraré como ejecutar esas pruebas unitarias de javascript con una tarea de la herramienta <a href="http://www.gradle.org/">Gradle</a> y usando una herramienta similar a Gradle pero para Javascript llamada <a href="http://gruntjs.com/">Grunt</a>.</p>

<p>Primeramente necesitaremos instalar node.js y el paquete de javascript grunt-cli con de forma global en el sistema:</p>

<div><script src='https://gist.github.com/picodotdev/9977238.js?file=script-1.sh'></script>
<noscript><pre><code># pacman -S nodejs
# npm install -g grunt-cli</code></pre></noscript></div>


<p>En caso de que tengamos pruebas unitarias con Jasmine como es el caso de este ejemplo deberemos instalar los siguientes paquetes en el directorio raíz del proyecto:</p>

<div><script src='https://gist.github.com/picodotdev/9977238.js?file=script-2.sh'></script>
<noscript><pre><code>$ npm install grunt-contrib-jasmine
$ npm install grunt-template-jasmine-requirejs</code></pre></noscript></div>


<p>La siguiente linea como se explica en <a href="https://www.npmjs.org/package/grunt-template-jasmine-requirejs">la documentación del paquete grunt-template-jasmine-requirejs</a> puede ser necesaria si en algún momento obtenemos el siguiente error:</p>

<div><script src='https://gist.github.com/picodotdev/9977238.js?file=script-3.sh'></script>
<noscript><pre><code>$ npm install grunt-contrib-jasmine@0.5.3 --save-dev</code></pre></noscript></div>




<div><script src='https://gist.github.com/picodotdev/9977238.js?file=mensaje.txt'></script>
<noscript><pre><code>npm ERR! peerinvalid The package grunt-contrib-jasmine does not satisfy its siblings&#39; peerDependencies requirements!
npm ERR! peerinvalid Peer grunt-template-jasmine-requirejs@0.1.10 wants grunt-contrib-jasmine@~0.5.3</code></pre></noscript></div>




<div><script src='https://gist.github.com/picodotdev/9977238.js?file=script-4.sh'></script>
<noscript><pre><code>$ npm install</code></pre></noscript></div>


<p>Si usamos <a href="http://visionmedia.github.io/mocha/">Mocha</a> como librería de pruebas unitarias probablemente disponemos de varios paquetes que podemos instalar de forma similar. Una vez instaladas estas herramientas debemos crear dos archivos necesarios para Grunt, que son <a href="https://github.com/picodotdev/elblogdepicodev/blob/master/MarionetteREST/package.json">package.json</a> y <a href="https://github.com/picodotdev/elblogdepicodev/blob/master/MarionetteREST/grunt.js">grunt.js</a>. El primero contiene la definición del paquete js para Grunt, quizá lo más destacable es que el nombre del paquete debe estar en minúsculas sino obtendremos un error parecido a «Error: Invalid name: &ldquo;MarionetteREST&rdquo; npm ERR! at ensureValidName». El archivo grunt.js es la descripción de las tareas de grunt que contiene un poco de configuración donde indicamos las especificaciones que contienen las pruebas unitarias, las dependencias necesarias para ejecutar las pruebas y las tareas que se definen. Con todo esto ya podemos ejecutar las pruebas con:</p>

<div><script src='https://gist.github.com/picodotdev/9977238.js?file=script-5.sh'></script>
<noscript><pre><code>$ grunt --gruntfile grunt.js jasmine:requirejs
$ ./gradlew jasmine</code></pre></noscript></div>


<p>Sin embargo, puede que deseemos ejecutarlas desde la herramienta de construcción que usemos, en mi caso con Gradle. Para añadir el soporte a Gradle de ejecutar las pruebas unitarias a su vez con Grunt debemos añadir la siguiente configuración a nuestro archivo build.gradle:</p>

<div><script src='https://gist.github.com/picodotdev/9977238.js?file=build.gradle'></script>
<noscript><pre><code>task jasmine(type: GruntTask) {
    gruntArgs = &quot;jasmine:requirejs&quot;
}

...

class GruntTask extends Exec {
    private String gruntExecutable = Os.isFamily(Os.FAMILY_WINDOWS) ? &quot;grunt.cmd&quot; : &quot;grunt&quot;
    private String switches = &quot;--gruntfile grunt.js&quot;

    String gruntArgs = &quot;&quot; 

    public GruntTask() {
        super()
        this.setExecutable(gruntExecutable)
    }

    public void setGruntArgs(String gruntArgs) {
        this.args = &quot;$switches $gruntArgs&quot;.trim().split(&quot; &quot;) as List
    }
}</code></pre></noscript></div>


<p>Veremos como salida el siguiente resultado en la terminal.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/19/grunt-jasmine.png" title="Ejecutar teses Jasmine con Grunt" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/19/grunt-jasmine-thumb.png"/></a>
</div>


<p>Al hacer esta entrada de forma que las pruebas se ejecuten con Grunt he movido las plantillas de Mustache de lugar, antes estaban embebidas en el html en el ejemplo <a href="http://elblogdepicodev.blogspot.com.es/2013/04/ejemplo-lista-de-tareas-con-backbone.html">Backbone</a> y las he movido a dentro del javascript de la aplicación de la lista de tareas. Esto hace que para pasar las pruebas no tengamos una dependencia sobre un archivo html externo en el que buscar las plantillas, también así el javascript es más autónomo y está incluido en él todo lo que necesita.</p>

<p>Aún tengo otra entrada preparada sobre javascript que es el mismo ejemplo de la lista de tareas pero en vez de usando las vistas de Backbone o Marionette usando <a href="http://facebook.github.io/react/">React</a>. El <a href="https://github.com/picodotdev/elblogdepicodev/tree/master/MarionetteREST">código fuente completo de este ejemplo sobre pruebas unitarias y Marionette</a> está en <a href="https://github.com/picodotdev">mi regpostorio de GitHub</a>.</p>

<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Introducción y ejemplo de RequireJS</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-mustache.html">Introducción y ejemplo de Mustache</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/03/logging-en-javascript-con-log4javascript.html">Logging en Javascript con log4javascript</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/04/capturar-errores-de-javascript.html">Capturar errores de Javascript</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/04/optimizar-modulos-de-requirejs.html">Optimizar módulos de RequireJS y archivos Javascript</a><br/>
<a href="http://elblogdepicodev.blogspot.com/2013/04/introduccion-y-ejemplo-de-backbonejs.html">Introducción y ejemplo de Backbone.js</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/05/ejemplo-de-pruebas-unitarias-en.html">Ejemplo de pruebas unitarias en javascript con Jasmine y Sinon</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Ejemplo lista de tareas con Marionette</a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2014/04/ejemplo-lista-de-tareas-con-backbone-y-react/">Ejemplo lista de tareas con Backbone y React</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="javascript" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desempaquetado y análisis Samsung SSD 840 EVO 250 GB]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/03/desempaquetado-y-analisis-samsung-840-evo-ssd-250-gb/"/>
	<published>2014-03-28T18:22:41+01:00</published>
    <updated>2014-03-29T15:00:00+01:00</updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/03/desempaquetado-y-analisis-samsung-840-evo-ssd-250-gb</id>
    <content type="html"><![CDATA[<p>En estos momentos sin lugar a dudas la actualización más provechosa para mejorar el rendimiento de un equipo es una unidad de estado sólido o SSD (<a href="http://es.wikipedia.org/wiki/Unidad_de_estado_s%C3%B3lido">Solid State Drive</a>) una vez tengamos memoria RAM suficiente, unos 2 GiB suelen ser suficientes para tareas ofimáticas y acceder a internet y los equipos que se están vendiendo ahora ya suelen venir con 4 GiB e incluso 8 GiB. El tiempo de acceso a un disco duro mecánico es grande y la velocidad de transferencia es pequeña, en los momentos que se require un uso intensivo del disco se nota que los disco mecánicos son el cuello de botella del sistema. A veces una mejora en el software puede producir una notable aumento de rendimiento con el mismo hardware pero cuando ya no hay margen de mejora en el software con una mejora en el hardware podemos conseguir el aumento de rendimiento buscado, este es el caso de los SSD.</p>

<p>Así que después de estar leyendo prácticamente en todas las opiniones de los usuarios que han adquirido un SSD la apreciable mejora conseguida finalmente decidí comprar uno. El modelo que he elegido ha sido un <a href="http://www.amazon.es/gp/product/B00E391OX6/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00E391OX6&linkCode=as2&tag=blobit-21">Samsung 840 EVO SSD de 250 GB</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B00E391OX6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />, que en el momento de adquirirlo es posiblemente una de las mejores opciones en cuanto calidad/precio, otra buena opción era el modelo de <a href="http://www.amazon.es/gp/product/B00E391KA8/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00E391KA8&linkCode=as2&tag=blobit-21">120 GB</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B00E391KA8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> o en otra marca el <a href="http://www.amazon.es/gp/product/B00BQ8RM1A/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00BQ8RM1A&linkCode=as2&tag=blobit-21">Crucial M500 de 240</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B00BQ8RM1A" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> o también de <a href="http://www.amazon.es/gp/product/B00BQ4F9ZA/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00BQ4F9ZA&linkCode=as2&tag=blobit-21">120 GB</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B00BQ4F9ZA" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />. Los SSD aún siguen siendo un producto con un precio más alto que los discos mecánicos pero desde la aparición de los primeros modelos han bajado notablemente de precio y ya se están poniendo alrededor de los 110 € para los modelos de 250 GB y en 65 € para los modelos de 120 GB, unos precios que empiezan a ser muy accesibles y posiblemente sus ventas empiecen a dispararse y a ser incluidos de serie en los equipos nuevos. Hay modelos de más capacidad, de <a href="http://www.amazon.es/gp/product/B00E3915Y4/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00E3915Y4&linkCode=as2&tag=blobit-21">500 GB</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B00E3915Y4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> y 750 GB pero los precios son algo abultados y posiblemente tampoco necesitemos tanto espacio.</p>

<p>En cualquier caso el SSD para mi tampoco ha sido una necesidad real sino más bien un capricho que me he permitido, si bien es cierto que el rendimiento del SSD hace palidecer al disco duro mecánico que tenía y los comentarios sobre los SSD están totalmente justificados también se puede vivir perfectamente con un disco duro mecánico si no nos importa esperar algo de tiempo. Con el disco duro mecánico el sistema me iniciaba en 1 minuto 30 segundos hasta llegar al inicio de sesión GDM y otros 30 segundos más hasta que el equipo me era usable en el escritorio. Con el SSD, y sin exagerar, el sistema se inicia en unos 7 segundos hasta llegar al inicio de sesión GDM y pocos segundos más hasta llegar al escritorio. En el inicio del sistema y en el arranque de alguna aplicación pesada que es donde más intensivamente se usa el disco es donde más notaremos el aumento de rendimiento, en mi caso que uso <a href="https://www.archlinux.org/">Arch Linux</a> también lo noto en las actualización del sistema cuando instala los nuevos paquetes. Mi opinión es que el SSD es posiblemente la mejor actualización para prolongar algo más la vida de un equipo si la memoria RAM no es el problema pero tampoco es imprescindible a pesar de ser cierto el gran aumento de rendimiento.</p>

<p>El disco <a href="http://www.amazon.es/gp/product/B00E391OX6/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00E391OX6&linkCode=as2&tag=blobit-21">Samsung 840 EVO SSD de 250 GB</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B00E391OX6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> lo compré en <a target="_blank" href="http://www.amazon.es/?_encoding=UTF8&camp=3626&creative=24822&linkCode=ur2&tag=blobit-21">Amazon</a><img src="https://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=ur2&o=30" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />, en algunos productos como este suelen tener los mejores precios. En las ocasiones que he comprado en ellos el proceso de compra y el envío ha sido perfecto, en tres días laborables tenía los productos en la dirección de entrega y en todo momento he estado informado tanto del estado del pedido como del envío del producto. Amazon es un buen modelo a seguir en cuanto a comercio electrónico. Si bien es cierto que si hubiese tenido oportunidad y los precios hubiesen sido similares o un poco superiores lo hubiese preferido comprar en un tienda local, <a href="http://www.izarmicro.net/">IzarMicro</a> me era una buena opción pero en el momento que hice el pedido el precio era algo superior.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-1.jpg" title="Samsung SSD 840 EVO 250 GB" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-1-thumb.jpg"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-2.jpg" title="Samsung SSD 840 EVO 250 GB" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-2-thumb.jpg"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-3.jpg" title="Samsung SSD 840 EVO 250 GB" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-3-thumb.jpg"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-4.jpg" title="Samsung SSD 840 EVO 250 GB" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-4-thumb.jpg"/></a>
</div>


<p>Como se aprecia en las imágenes de desempaquetado el disco viene en una caja del tamaño de un CD conteniendo:</p>

<ul>
<li>El disco SSD</li>
<li>Unas pegatinas</li>
<li>Un CD con el manual y software.</li>
<li>Unas guías de instalación</li>
<li>La hoja de garantía</li>
</ul>


<p>Las especificaciones técnicas de la serie de discos SSD de <a href="http://www.amazon.es/gp/product/B00E391OX6/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00E391OX6&linkCode=as2&tag=blobit-21">Samsung 840 EVO</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B00E391OX6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> son:</p>

<ul>
<li>SATA 3 (6 Gbps) compatible con SATA 2 (3 Gbps)</li>
<li>7 mm de altura en 2.5&#8221;</li>
<li>Lectura secuencial hasta 540 MB/s y 520 MB/s de escritura</li>
</ul>


<p>El disco es muy ligero pesando solo unos pocos gramos, tiene un tamaño de 7 milímetros de altura y la dimensiones son de 2.5 pulgadas, el tamaño más ampliamente usando en los disco para los portátiles no muy viejos. El disco se nota que en su mayor parte está vacío, he visto en <a href="http://www.xbitlabs.com/articles/storage/display/samsung-840-evo_3.html">alguna foto</a> que en realidad el disco solo ocupa una fracción del tamaño total de 2.5 pulgadas, por lo que los SSD todavía tienen margen para aumentar su capacidad, un punto donde aún les ganan los discos mecánicos. El ruido que hace es nulo por lo que ya no oiremos &ldquo;rascar&rdquo; al disco cuando se escriba de forma intensiva en él. Aunque en la etiqueta se indica que el disco tiene una capacidad de 250 GB en realidad usables son unos 232 GiB.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-5.jpg" title="Samsung SSD 840 EVO 250 GB" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-5-thumb.jpg"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-6.jpg" title="Samsung SSD 840 EVO 250 GB" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/18/samsung-840-evo-ssd-6-thumb.jpg"/></a>
</div>


<p>Los SSD aún tienen margen de mejora, seguirán bajando de precio, aumentarán de capacidad y no tardarán mucho en masificarse para dejar de ser un producto a comprar para los que buscan una mejora de rendimiento. Como muestra no hace ni una semana de que lo compre y ya ha bajado de 125 € a 120 €. Un punto donde todavía puede haber dudas es cuanto a la fiabilidad, si realizamos tareas que escriban muchos datos en el disco puede que prefiramos usarlo junto con un disco mecánico. En teoría los discos TLC como el <a href="http://www.amazon.es/gp/product/B00E391OX6/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00E391OX6&linkCode=as2&tag=blobit-21">Samsung 840 EVO SSD de 250 GB</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B00E391OX6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> tiene una esperanza de vida de 1000 escrituras por celda, a unos 10 GiB de datos escritos por día la esperanza de vida estimada es de 11.7 años para el modelo de 120 GB y 23.4 para el modelo de 250 GB. Los 10 GiB de escritura por día me parece una estimación escasa para un día de trabajo, en mi trabajo suelo estar entre 20 GiB y 40 GiB de escritura, principalmente porque uso una base de datos MySql que por cada importación escribe al disco unos 14 GiB. También es cierto que los 1000 ciclos de escritura quizá sean algo bajos y las celdas aguanten algo más, probablemente y salvo que le demos mucho uso al disco antes de que falle cambiaremos de equipo.</p>

<p>Si alguien está pensando en comprar un disco SSD lo primero que deberá hacer es calcular el espacio mínimo que va a necesitar para saber que modelo comprar y el uso que le va a dar, una opción de <a href="http://www.amazon.es/gp/product/B00E391KA8/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B00E391KA8&linkCode=as2&tag=blobit-21">120 GB</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B00E391KA8" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> sea más que suficiente, se recomienda que es espacio ocupado no sea superior al 75% de la capacidad. Si va usarse de forma intensiva en cuanto a escrituras o se necesita mucho espacio es recomendable seguir usando un disco mecánico. También se puede optar por un SSD para el sistema y un disco duro mecánico USB externo para el almacenamiento de datos, con una caja de disco duro USB externa podemos aprovechar el disco duro mecánico que sustituimos, una opción es <a href="http://www.amazon.es/gp/product/B005MWDD2I/ref=as_li_ss_tl?ie=UTF8&camp=3626&creative=24822&creativeASIN=B005MWDD2I&linkCode=as2&tag=blobit-21">B-Move USB 2.0</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=B005MWDD2I" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> que cumple perfectamente la misión además de ser de las cajas USB externas más baratas, las cajas USB 3.0 son algo más caras y por el precio que tienen casi uno podría comprarse una con disco incluido.</p>

<p>En siguientes entradas comentaré como monitorizar las escrituras a disco, obtener la cantidad de datos escritos y leídos, una guía de instalación de <a href="https://www.archlinux.org/">Arch Linux</a> con notas específicas para SSD entre otras cosas y una serie de recomendaciones para proteger la esperanza de vida del SSD. En internet hay multitud de análisis sobre este SSD, dos de los que más me han gustado han sido <a href="http://www.anandtech.com/show/6459/samsung-ssd-840-testing-the-endurance-of-tlc-nand">Testing the endurance of TLC NAND</a> y otro de <a href="http://www.xbitlabs.com/articles/storage/display/samsung-840-evo.html">xbitlabs</a>.</p>

<div class="imagenes-post" style="text-align: center;">
    <iframe src="http://rcm-eu.amazon-adsystem.com/e/cm<?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=blobit-21&o=30&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00E391OX6" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
    <iframe src="http://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=blobit-21&o=30&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00E391KA8" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
    <iframe src="http://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=blobit-21&o=30&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00BQ8RM1A" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
    <iframe src="http://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=blobit-21&o=30&p=8&l=as4&m=amazon&f=ifr&ref=ss_til&asins=B00BQ4F9ZA" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>Referencia:<br/>
<a href="http://www.samsung.com/global/business/semiconductor/minisite/SSD/us/html/about/SSD840EVO.html">http://www.samsung.com/global/business/semiconductor/minisite/SSD/us/html/about/SSD840EVO.html</a><br/>
<a href="http://www.anandtech.com/show/6459/samsung-ssd-840-testing-the-endurance-of-tlc-nand">http://www.anandtech.com/show/6459/samsung-ssd-840-testing-the-endurance-of-tlc-nand</a><br/>
<a href="http://www.xbitlabs.com/articles/storage/display/samsung-840-evo.html">http://www.xbitlabs.com/articles/storage/display/samsung-840-evo.html</a><br/></p>

<div itemscope="" itemtype="http://data-vocabulary.org/Review">
    <span itemprop="itemreviewed">Samsung SSD 840 EVO 250 GB</span><br>
    Revisión por <span itemprop="reviewer">picodotdev</span>
    el <time datetime="2014-03-28" itemprop="dtreviewed">28 de marzo de 2014</time>.<br>
    Valor: <span itemprop="rating">5</span><br>
</div>

]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="hardware" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Novedades y nuevas características de Java 8]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8/"/>
	<published>2014-03-21T16:03:27+01:00</published>
    <updated>2014-03-28T20:00:00+01:00</updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/03/novedades-y-nuevas-caracteristicas-de-java-8</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" class="right" alt="Java" title="Java"/>
</div>


<p>El 18 de marzo de 2014 se publicó la nueva versión de la plataforma <a href="http://www.oracle.com/technetwork/java/javase/overview/java8-2100321.html">Java 8</a>, Java 7 fue liberada el en julio de 2011. Java 8 incorporará varias novedades siguiendo la tendencia de otros lenguajes como la incorporación de lambdas o closures o una demandada nueva API para el manejo de fechas entre otras muchas características más. La <a href="http://openjdk.java.net/projects/jdk8/features">lista completa de novedades</a> es bastante amplia, a continuación pondré lo que me ha parecido más destacable:</p>

<ul>
<li>Se añaden las expresiones lambda o closures y se adapta la API para usarlas en los sitios que se pueda.</li>
<li>Se definen nuevos perfiles compactos para dispositivos que no necesitan toda la API Java, esto es una alternativa a la modularización. Inicialmente la modularización era una característica que estaba planificada para Java 8 pero finalmente se ha aplazado a posteriores versiones.</li>
<li>Incluido nuevo <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/index.html">motor de Javascript Nashorn</a> que implementa ECMAscript 5.1 y es más rápido que su predecesor Rhino.</li>
<li>Eliminación de espacio de memoria Permanent Generation (PermGen) que pasa a llamarse Metaspace. Su tamaño
será dinámico pero no evitará fugas de memoria.</li>
<li>Soporte para la creación de una máquina virtual menor a 3 MB.</li>
<li>Acceso mediante reflection a los nombres de los parámetros. Mejorará la legibilidad del código que use reflection y permitirá mejorar el soporte en los IDE.</li>
<li>Ordenación en java.util.Arrays de forma paralela.</li>
<li>Operaciones masivas sobre colecciones tales como filter/map/reduce (streams) de forma serializada o paralela.</li>
<li>Soporte de forma estándar para la codificación y decodificación Base64.</li>
<li>Nueva API para Date y Time.</li>
<li>Varias mejoras de seguridad.</li>
<li>Se incorporan en la máquina virtual Java HotSpot características que estaban en JRockit, convergiendo ambas máquinas virtuales. Se incorpora Mission Control.</li>
<li>Mejoras en JDBC la base para el acceso en bases de datos en Java.</li>
<li><a href="http://openjdk.java.net/projects/jdk8/features">Otras novedades</a>.</li>
</ul>


<h3>Streams</h3>

<p>Los streams no son un nuevo tipo de colección son una nueva forma de recorrer las colecciones distinta a los <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">Iterator</a>. La ventaja de los streams es que pueden procesarse de forma serializada o paralela y proporcionan un estilo de operaciones más funcionales. Un flujo consiste un una fuente (una colección), varias operaciones intermedias (de filtrado o transformación) y una operación final que produce un resultado (suma, cuenta&hellip;). Los streams son lazy de modo que las operaciones solo se realizan cuando se llama a la operación final, también son eficientes no necesitando en algunos casos procesar todos los elementos del stream para devolver el resultado final.</p>

<p>Tradicionalmente en la API de colecciones la iteración sobre los elementos debíamos proporcionarla de forma externa. Con Java 8 podemos expresarla de la siguiente forma.</p>

<div><script src='https://gist.github.com/picodotdev/9689477.js?file=Stream.java'></script>
<noscript><pre><code>int alturaMedia = personas.stream()
    .mapToInt((Persona p) –&gt; { return p.getAltura(); })
    .average();</code></pre></noscript></div>


<h3>Lambda</h3>

<p>Esta es una de las principales novedades y que más se estaba echando de menos en Java de otros lenguajes como <a href="http://groovy.codehaus.org/">Groovy</a> o <a href="https://www.python.org/">Python</a>. Las expresiones lambda son funciones que no está asociadas a un determinado nombre y que pueden pasarse como argumento a otras funciones. Tienen el siguiente aspecto:</p>

<div><script src='https://gist.github.com/picodotdev/9689477.js?file=Lambda.java'></script>
<noscript><pre><code>(Persona persona) –&gt; { return persona.getAltura(); }</code></pre></noscript></div>


<p>El uso de expresiones lambdas junto con el stream API proporciona a Java 8 características de programación funcional, pero sobre todo hace el código más sencillo, menos extenso, más expresivo y más legible. En las expresiones lambda de Java podemos seguir aprovechándonos de la compilación estática y del tipado fuerte.</p>

<h3>Referencias de métodos</h3>

<p>Todo el código desarrollado previamente a Java 8 no hace uso de las lambdas, pero con las <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">referencias a métodos</a> podemos usar esos métodos ya implementados como si se tratasen de funciones lambdas. Hay diferentes formas de hacer referencias a métodos:</p>

<ul>
<li>A métodos estáticos</li>
<li>A un método de una instancia concreta</li>
<li>A un método de instancia de una instancia arbitraria de un tipo</li>
<li>A un constructor</li>
</ul>


<div><script src='https://gist.github.com/picodotdev/9689477.js?file=ReferenciaMetodos.java'></script>
<noscript><pre><code>// Método estático
Persona::compareAltura

// Método de una instancia concreta
persona::getAltura

// Método de instancia de una instancia arbitraria de un tipo
Persona::getAltura

// Constructor
Persona::new

</code></pre></noscript></div>


<h3>Interfaces funcionales</h3>

<p>Una interfaz funcional es aquella que solo tiene un método abstracto (sin implementación). Algunos ejemplos de interfaces funcionales son <a href="http://download.java.net/jdk8/docs/api/java/lang/Runnable.html">Runnable</a>, <a href="http://download.java.net/jdk8/docs/api/java/awt/event/ActionListener.html">ActionListener</a>, <a href="http://download.java.net/jdk8/docs/api/java/util/Comparator.html">Comparator</a> y <a href="http://download.java.net/jdk8/docs/api/java/util/concurrent/Callable.html">Callable</a>. Para definir una interfaz funcional se puede usar la anotación <a href="http://download.java.net/jdk8/docs/api/java/lang/FunctionalInterface.html">@FunctionalInterface</a> y pueden representarse con una expresión lambda. En el siguiente ejemplo puede apreciarse que con las interfaces funcionales y las lambdas podemos hacer lo mismo de forma más clara, menos verbosa y con código más legible.</p>

<div><script src='https://gist.github.com/picodotdev/9689477.js?file=InterfazFuncional-1.java'></script>
<noscript><pre><code>Collections.sort(personas, new Comparator&lt;User&gt;() {
    public int compare(Persona p1, Persona p2) {
        return p1.getAltura().compareTo(p2.getAltura());
    }
});</code></pre></noscript></div>


<p>En Java 8 podemos hacer:</p>

<div><script src='https://gist.github.com/picodotdev/9689477.js?file=InterfazFuncional-2.java'></script>
<noscript><pre><code>Collections.sort(personas, (Persona u1, Persona u2) -&gt; { 
    p2.getAltura().compareTo(p2.getAltura())
});</code></pre></noscript></div>


<p>Java 8 icorpora varias interfaces funcionales que puede ser usadas en expresiones lambda, entre ellas están:</p>

<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html">Predicate</a>: función que retorna un booleano dado un argumento.</li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html">Function</a>: función que retorna un valor dado un argumento.</li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/function/Supplier.html">Supplier</a>: producen un tipo, al contrario que las funciones no tienen argumento</li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html">Consumer</a>: representa una operación a realizarse en un argumento.</li>
</ul>


<h3>Métodos por defecto en interfaces</h3>

<p>Hasta ahora las interfaces en Java solo podían definir métodos pero no sus implementaciones. El problema con las interfaces es que cuando se modifican se rompen todas las clases que las usan. Esto se ha resuelto de tal forma que se puedan añadir nuevos métodos con implementación a las interfaces y ha sido necesario para incorporar las lambdas a interfaces existentes como List. En Java 8 las interfaces podrán incorporar implementaciones para algunos de sus métodos, teniendo así algo parecido a herencia múltiple.</p>

<div><script src='https://gist.github.com/picodotdev/9689477.js?file=MetodosDefault.java'></script>
<noscript><pre><code>public interface Math { 
    int add(int a, int b);
 
    default int multiply(int a, int b) {
        return a * b;
    }
}</code></pre></noscript></div>


<h3>Métodos estáticos en interfaces</h3>

<p>Además de definir métodos por defecto en las interfaces a partir de ahora podemos definir métodos estáticos. Definiendo métodos estáticos en las interfaces evitaremos tener que crear clases de utilidad. Podremos incluir en un mismo tipo (la interfaz) todos los métodos relacionados.</p>

<div><script src='https://gist.github.com/picodotdev/9689477.js?file=MetodosStatic.java'></script>
<noscript><pre><code>public interface Persona {

    String getNombre();
    int getAltura();

    static String toStringDatos() {
        return getNombre() + &quot; &quot; + getAltura();
    }
}</code></pre></noscript></div>


<h3>Anotaciones en cualquier uso de tipos</h3>

<p>Con la introducción de anotaciones en Java 5 podemos usar anotaciones en la declaración de los tipos (definición de clases, interfaces, propiedades, métodos, &hellip;). Desde ahora podremos usar las anotaciones en el uso de cualquier tipo como por ejemplo expresiones new, casts, cláusulas implements y cláusulas throws.</p>

<h3>Java Time</h3>

<p>Trabajar con fechas, horas y diferentes zonas horarias en Java tradicionalmente ha sido molesto, para tratar de mejorar la situación podíamos usar la librería JodaTime. Finalmente, después de mucho tiempo esperando a que se hiciera se va a proporcionar una mejor <a href="http://download.java.net/jdk8/docs/api/java/time/package-summary.html">API en el JDK 8 para trabajar con fechas, horas y zonas horarias</a>.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/17/componentes-jpse8.png" title="Componentes Java Platform Standard Edition 8" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/17/componentes-jpse8-thumb.png"/></a>
</div>


<h3>Futuro Java 9</h3>

<p>Viendo el pasado reciente de Java hablar del futuro puede ser precipitado, quizá la característica más comentada sea la modularización con el proyecto conocido como <a href="http://openjdk.java.net/projects/jigsaw/">Jigsaw</a>, pero ha sido abandonada para Java 8 según tengo entendido por ser difícil incorporarla manteniendo la compatibilidad hacia atrás, por el momento dispondremos de una solución intermedia con los compact profiles.</p>

<p>Otro de los puntos donde parece que se pondrá énfasis es en el soporte para entornos en la nube que son en estos momentos la tendencia hacia la que evolucionan las aplicaciones.</p>

<h3>Pasado en Java 5, 6 y 7</h3>

<p>Las versiones de Java 5, 6 y 7 también incluyeron varias novedades y dado que en el ámbito empresarial la tecnología se adopta de forma lenta es posible que mucha gente (incluido yo mismo) aún desconozca cuales eran algunas de las principales novedades y características de versiones anteriores.</p>

<h4>Java 7</h4>

<ul>
<li>Project coin</li>
<li>Strings en switchs</li>
<li>Gestión automática de recursos en sentencias try-catch</li>
<li>Multicatch</li>
<li>Rethrow de excepciones más precisos</li>
<li>Operador diamante &lt;></li>
<li>Literales binarios</li>
<li>Guiones bajos en literales numéricos</li>
<li>Fork/Join y utilidades de concurrencia</li>
<li>Mejoras en trabajo con archivos y carpetas</li>
</ul>


<p>Más en <a href="http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html">Java 7 New Features and Enhancements</a> y <a href="http://www.javacodegeeks.com/2013/10/java7-a-look-back.html">Java 7 a look back</a></p>

<h4>Java 6</h4>

<ul>
<li>Lenguajes de scripting</li>
<li>API para el compilador</li>
<li>Nuevas anotaciones</li>
<li>Nueva API para XML (StaX)</li>
</ul>


<p>Más en <a href="http://www.oracle.com/technetwork/java/javase/features-141434.html">Java 6 New Features and Enhancements</a> y <a href="http://www.javabeat.net/introduction-to-java-6-0-new-features-part-i/">Introduction to java 6 newfeatures</a></p>

<h4>Java 5</h4>

<ul>
<li>Generics</li>
<li>Bucle for mejorado</li>
<li>Autoboxing/unboxing</li>
<li>Enums</li>
<li>Varargs</li>
<li>Static import</li>
<li>Anotaciones</li>
</ul>


<p>Más en <a href="http://docs.oracle.com/javase/1.5.0/docs/relnotes/features.html">Java 5 New Features and Enhancements</a></p>

<h3>Presentación</h3>

<p>Finalmente, una presentación muy interesante en forma de <a href="https://www.youtube.com/watch?v=FTfAP29TjUk">vídeo de Youtube</a> en español y la <a href="http://www.javahispano.org/storage/documentacion/2013-JUG-Madrid.pdf">presentación de la que se habla en formato pdf</a> que fue publicada en <a href="http://www.javahispano.org/portada/2014/3/10/video-y-presentacion-de-la-charla-sobre-java-8.html">JavaHispano</a>, en él se habla de muchas de las novedades y de algunas futuras en Java 9.</p>

<div class="video-post" style="text-align: center;">
    <iframe width="640" height="360" src="http://www.youtube.com/embed/FTfAP29TjUk?rel=0" frameborder="0" allowfullscreen></iframe>
</div>




<hr/>


<p>En los <a href="http://docs.oracle.com/javase/tutorial/">tutoriales de Java</a> hay algunos de estos puntos más ampliados y algunos apartados no comentados en esta entrada. Otros artículos muy completos son <a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">Java 8 Tutorial</a> y <a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">Everything about Java 8</a>, en el apartado de referencia al final de la entrada hay algún enlace más digno de lectura.</p>

<p>Referencia:<br/>
<a href="http://openjdk.java.net/projects/jdk8/">JDK 8</a><br/>
<a href="http://www.javacodegeeks.com/2013/10/java8.html">Java 8</a><br/>
<a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">Java 8 Tutorial</a><br/>
<a href="http://zeroturnaround.com/rebellabs/java-8-explained-default-methods/">Java 8 Explained Default Methods</a><br/>
<a href="http://www.javacodegeeks.com/2013/10/introduction-to-java-lambdas.html">Introduction to Java lambdas</a><br/>
<a href="http://zeroturnaround.com/rebellabs/java-8-revealed-lambdas-default-methods-and-bulk-data-operations/">Java 8 revealed, lambdas, default methods and bulk data operations</a><br/>
<a href="http://www.javacodegeeks.com/2013/07/lambdas-coming-to-a-java-8-near-you.html">Lambdas coming to a Java 8 near you</a><br/>
<a href="http://viralpatel.net/blogs/java-8-default-methods-tutorial/">Java 8 default methods</a>
<a href="http://unpocodejava.wordpress.com/2014/01/22/novedades-relevantes-java-8/">Novedades relevantes Java 8</a><br/>
<a href="http://www.javacodegeeks.com/2014/03/the-optional-type-api.html">The optional type API</a><br/>
<a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">Everything about Java 8</a><br/>
<a href="http://www.javacodegeeks.com/2014/03/8-new-features-for-java-8.html">8 new features for java 8</a><br/>
<a href="http://www.javacodegeeks.com/2014/03/happy-8th-birthday-java.html">Happy 8th birthday Java</a><br/>
<a href="http://www.javacodegeeks.com/2014/01/compiling-lambda-expressions-scala-vs-java-8.html">Compiling lambda expressions scala vs Java 8</a><br/>
<a href="http://java.dzone.com/articles/java-8-permgen-metaspace">Java 8 PermGen to metaspace</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="java" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guía para la creación de un blog con Octopress]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/03/guia-para-la-creacion-de-un-blog-con-octopress/"/>
	<published>2014-03-14T18:19:24+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/03/guia-para-la-creacion-de-un-blog-con-octopress</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/octopress.png" class="right" alt="Octopress" title="Octopress"/>
</div>


<p>En la <a href="http://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/">primera entrada de este blog usando Octopress</a> ya comentaba las razones por las que he pasado de usar <a href="http://www.blogger.com">Blogger</a> a usar <a href="http://octopress.org/">Octopress</a>. Entre las razones del cambio estaban la posibilidad en Octopress de escribir en markdown, edición desconectado (para textos e imágenes), diseño adaptable y más personalizable, git y control de versiones, alojamiento en cualquier servidor web. Aún sin ser Octpress también tiene cosas mejorables pero desde luego me está resultando mucho mejor que blogger.</p>

<p>En esta entrada quiero escribir una guía con los pasos necesarios para crear un blog en Octopress de forma rápida y algunas funcionalidades a tener en cuenta o que deberemos realizar.</p>

<p>Antes de empezar supondré que ya tenemos en nuestro sistema <a href="https://www.archlinux.org/packages/extra/x86_64/ruby/">ruby</a> y <a href="https://www.archlinux.org/packages/extra/x86_64/git/">git</a> instalados. En Linux basta con buscar el paquete correspondiente para nuestra distribución e instalarlo con el gestor de paquetes. Con <a href="https://www.archlinux.org">Arch Linux</a> tan simple como:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-1.sh'></script>
<noscript><pre><code># pacman -S ruby git</code></pre></noscript></div>


<p>Empezamos clonando con git el repositorio de Octopress y la configuración inicial, sustituyendo blog-bitix por el nombre del repositorio del blog en GitHub que habremos creado previamente:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-2.sh'></script>
<noscript><pre><code>$ git clone git://github.com/imathis/octopress.git blog-bitix
$ cd blog-bitix
$ gem install bundler
$ bundle install
$ bundle update rake
$ rake install</code></pre></noscript></div>


<p>En esta guía voy a comentar como alojar el blog empleando <a href="http://pages.github.com/">GitHub Pages</a> que nos ofrece alojamiento gratuito tanto para el blog como para el repositorio git de código fuente, la URL será del estilo <a href="http://">http://</a>[usuario].github.io/[nombre-blog]. Para ello, primero en la página de GitHub crearemos el repositorio para alojar el código y el blog, después ejecutaremos el siguiente comando que nos pedirá la dirección de nuestro repositorio en mi caso git@github.com:picodotdev/blog-bitix.git:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-3.sh'></script>
<noscript><pre><code>$ rake setup_github_pages</code></pre></noscript></div>


<p>Configuramos git para que conozca nuestro usuario al hacer commits:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-4.sh'></script>
<noscript><pre><code>$ git config user.email &quot;pico.dev@gmail.com&quot;
$ git config user.name &quot;pico.dev&quot;
$ git config core.editor &quot;vim&quot;</code></pre></noscript></div>


<p>Hacemos lo mismo en el repositorio git de la carpeta _deploy. Octopress usa dos repositorios git, uno para el código fuente del repositorio y otro para lo que ven los usuarios del blog. Octopress configura git de tal forma que los dos repositorios sean dos ramas del mismo repositorio en GitHub:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-5.sh'></script>
<noscript><pre><code>$ cd _deploy
$ git config user.email &quot;pico.dev@gmail.com&quot;
$ git config user.name &quot;pico.dev&quot;
$ git config core.editor &quot;vim&quot;
$ cd ..</code></pre></noscript></div>


<p>Cambiamos el origen de la rama master a la de nuestro GitHub en vez del origen de Octopress:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-6.sh'></script>
<noscript><pre><code>$ git remote add origin git@github.com:picodotdev/blog-bitix.git
$ git config branch.master.remote origin</code></pre></noscript></div>


<p>Podemos previsualizar el estado actual del blog en el navegador introduciendo en él la dirección <a href="http://localhost:4000/blog-bitix/:">http://localhost:4000/blog-bitix/:</a></p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-7.sh'></script>
<noscript><pre><code>$ rake preview</code></pre></noscript></div>


<p>Haciendo el primer deploy del blog (deberemos <a href="https://help.github.com/articles/generating-ssh-keys">configurar SSH</a>) dispondremos del blog en la siguiente dirección <a href="http://picodotdev.github.io/blog-bitix/">http://picodotdev.github.io/blog-bitix/</a>. Puede que el blog tarde unos minutos en estar disponible y deberemos hacerlo cada vez queramos que los cambios se apliquen al blog.</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-8.sh'></script>
<noscript><pre><code>$ rake generate
$ rake deploy</code></pre></noscript></div>


<p>Ya estamos listos para empezar a hacer cambios en el blog y crear entradas:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-9.sh'></script>
<noscript><pre><code>$ rake new_post[&quot;titulo&quot;]</code></pre></noscript></div>


<p>Subimos los cambios al repositorio de GitHub con:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-10.sh'></script>
<noscript><pre><code>$ git add .
$ git commit -m &#39;Mensaje del commit&#39;
$ git push origin master</code></pre></noscript></div>


<p>Si queremos que el blog tenga un dominio propio en vez de un subdominio de GitHub deberemos crear un archivo CNAME con el nombre del dominio, subirlo al repositorio y hacer el deploy aparte de la <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">configuración que debamos hacer en los registros DNS de dominio</a>:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-11.sh'></script>
<noscript><pre><code>$ echo &#39;dominio.com&#39; &gt;&gt; source/CNAME</code></pre></noscript></div>


<p>Probablemente lo siguiente que deberemos empezar a hacer es <a href="http://octopress.org/docs/configuring/">configurar ciertas propiedades</a> que afectan al blog, como las urls, nombre del blog, número de post por página, cambiar estilos, etc&hellip;</p>

<p>En un futuro quizá necesitemos obtener el repositorio del blog y la forma de disponer de él es diferente que crearlo desde cero con los pasos anteriores. Como comentaba en realidad los blogs con Octopress son dos repositorios de git y por tanto deberemos hacer un clone para cada uno de ellos, los comandos para clonar los repositorios son:</p>

<div><script src='https://gist.github.com/picodotdev/9552847.js?file=script-12.sh'></script>
<noscript><pre><code>$ git clone -b master git@github.com:picodotdev/blog-bitix.git
$ cd bitix-blog
$ git clone git@github.com:picodotdev/blog-bitix.git _deploy</code></pre></noscript></div>


<p>Hay algunas cosas adicionales que he tenido que hacer para disponer de un blog completamente funcional como deseaba:</p>

<ul>
<li>Dado que el blog lo tengo alojado con el modo Project Pages en vez de User/Organization Pages he necesitado crear otro repositorio para que las <a href="http://www.google.es/webmasters/tools/?hl=ES">Web Master Tools</a> me considere el dueño del dominio <a href="http://picodotdev.github.io.">http://picodotdev.github.io.</a></li>
<li>En el blog es habitual que incluya capturas de pantalla a modo de explicación. Usando <a href="http://elblogdepicodev.blogspot.com.es/2012/11/convertir-imagenes-entre-formatos-y.html">ImageMagick para crear las pequeñas vistas previas</a> y <a href="http://blueimp.github.io/Bootstrap-Image-Gallery/">Bootstrap Image Gallery</a> consigo reducir el tamaño en KiB de la página ya que inicialmente solo se cargan las thumbnails que son mucho más pequeñas que las imágenes originales, aparte de que si las imágenes son muy grandes y se incluyen en su tamaño original es difícil que entren en el espacio reservado para el texto.</li>
<li>Para facilitar que el contenido sea compartido he necesitado hacer una cuantas modificaciones para incorporar a Octopress <a href="http://karmacracy.com/">Karmacracy</a>, <a href="https://www.sharethis.com/">ShareThis</a> y <a href="http://disqus.com/">Disqus</a>. Con estas herramientas sociales facilitaremos a los usuarios que compartan el contenido más fácilmente.</li>
<li>También he necesitado modificar algunos estilos para dar al blog el aspecto que quería, para una persona con algunos conocimientos de programación y desarrollo web no es nada complicado.</li>
<li>Para tener el directorio de imágenes organizado y no se convierta en un cajón desastre a cada post le doy un identificador y en la carpeta images/custom/posts creo una carpeta con ese identificador. De esa manera es fácil saber que imágenes he usado en cada post. Los logotipos que usaré en varias entradas las pongo en la carpeta images/custom/logotipos.</li>
</ul>


<p>En el <a href="https://github.com/picodotdev/blog-bitix">código fuente del blog</a> se puede ver los archivos para hacerlo. Por ejemplo, para integrar Karmacracy he necesitado modificar los siguientes archivos.</p>

<ul>
<li>source/layouts/_post.html</li>
<li>custom/post/karmacracy.html</li>
</ul>


<p>Referencia:<br/>
<a href="http://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/">Hola nuevo mundo</a><br/>
<a href="http://localhost:4000/blog-bitix/2014/01/mi-experiencia-y-consejos-para-un-blog/">Mi experiencia y consejos para un blog</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="blog" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software-libre" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducción y ejemplo sencillo de Java Message Service (JMS)]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms/"/>
	<published>2014-03-07T18:31:22+01:00</published>
    <updated>2014-03-08T01:00:00+01:00</updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/03/introduccion-y-ejemplo-sencillo-de-java-message-service-jms</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" class="right" alt="Java" title="Java"/>
</div>


<p><a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition">La plataforma Java EE</a> (Java Enterprise Edition) pone a disposición de los desarrolladores varias especificaciones, estas especificaciones describen las funcionalidades y la API que deben proporcionar las implementaciones y proporcionan al desarrollador herramientas para facilitar, hacer mejor las aplicaciones y de forma estándar según estas especificaciones. Haciendo uso de una de estas especificaciones es posible cambiar de una implementación a otra de forma transparente y sin modificar ninguna línea de código de la aplicación (en teoría). Hay especificaciones para persistencia en base de datos (JPA), para transaccionalidad (JTA), para servicios web (JAX-WS ) y REST (JAX-RS) entre otras. En el siguiente enlace puede encontrarse el <a href="https://glassfish.java.net/downloads/ri/">listado completo de especificaciones y sus versiones de JEE 7</a>.</p>

<p>Una de ellas es el <a href="http://es.wikipedia.org/wiki/Java_Message_Service">servicio de mensajería JMS</a> (Java Message Service). JMS es un sistema de comunicación entre aplicaciones en base a mensajes. El usar mensajes como forma de comunicación entre aplicaciones tiene los siguientes beneficios o ventajas:</p>

<ul>
<li>Integración de sistemas: las aplicaciones que se comunican intercambiando mensajes puede ser desarrolladas con tecnologías diferentes el único requisito es que cada una de ellas tenga una forma de enviar y recibir los mensajes.</li>
<li>Escalabilidad: en caso de necesitar más capacidad para procesar los mensajes se pueden añadir más procesadores de mensajes sin que los emisores tengan ningún conocimiento de ello.</li>
<li>Asincronía: los mensajes puede ser procesados de forma asíncrona de forma que si un mensaje desencadena un proceso largo en tiempo el emisor del mensaje no tiene que esperar a que el proceso termine, el emisor puede enviar el mensaje y olvidarse. Además, el emisor no necesita que un receptor exista para enviar el mensaje tampoco el receptor necesita que que el emisor exista para recibir el mensaje. Cuando haya un receptor este se encargará de procesar los mensajes que se hayan enviado y estén aún sin procesar.</li>
<li>No acoplamiento: el emisor y el receptor no se conocen directamente de forma que cada uno de ellos puede reemplazarse por una nueva implementación de forma transparente para el otro.</li>
</ul>


<p>La comunicación puede realizarse de dos formas cada una con sus características:</p>

<ul>
<li>Punto a punto (P2P): mediante esta comunicación el mensaje se garantiza que es procesado únicamente una vez independientemente del numero de posibles procesadores que podrían recibir el mensaje. El procesado del mensaje puede ser síncrono o asíncrono. En caso de que no haya un receptor disponible el mensaje se guarda hasta poder entregarse a un receptor. Se realiza mediante colas (Queue). En este modelo al emisor se le denomina Sender y al receptor Receiver.</li>
<li>Pub/Sub: en este modelo un mensaje es recibido por todos los receptores suscritos a un tema (Topic) de forma similar a una emisión broadcast. Al emisor se le denomina Publisher y al receptor Subscriber. El emisor y receptor están más desacoplados ya que el emisor no conoce cual de los receptores procesará el mensaje.</li>
</ul>


<p>Esta comunicación de mensajes entre aplicaciones o entre diferentes partes de una aplicación tiene muchas posibilidades, podría ser utilizado para que un receptor enviase mensajes electrónicos en base a los mensajes enviados a una cola o para actualizar o precalcular datos de una base de datos que puede llevar un considerable tiempo y que de hacerlo en la misma petición de una aplicación web haría que el cliente estuviese esperando hasta que el proceso terminase, en ambos casos no es necesario que los procesos se hagan inmediatamente, son solo dos ejemplos de aplicación real. Esta es la misma funcionalidad que expliqué como hacerla con <a href="http://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html">programación concurrente y el patrón de diseño Command</a> pero pudiéndola implementar con JMS.</p>

<p>Los mensajes puede tener cabeceras (asignada automáticamente por JMS o por el desarrollador), atributos y y los datos (payload) que pueden transportar texto, un stream de objetos primitivos, &hellip; en función del tipo de mensaje. Cualquiera de estas cabeceras, atributos y datos puede utilizarse como información     para procesar el mensaje.</p>

<p>A continuación pondré el código de una sencilla aplicación que se conecta al servicio JMS de un <a href="http://picodotdev.github.io/blog-bitix/2014/02/servidor-de-aplicaciones-jboss-slash-wildfly/">servidor de aplicaciones WildFly</a> de forma remota y envía y recibe unos pocos mensajes de texto.</p>

<p>Primero el código de un modelo Pub/Sub. Como es propio de este modelo los mensajes se reciben por todos los receptores (los dos threads que escuchan en un topic que debemos crear), en este caso hay un publicador y dos suscriptores:</p>

<div><script src='https://gist.github.com/picodotdev/9416544.js?file=Topic.java'></script>
<noscript><pre><code>package io.github.picodotdev.bitix.jms;

import java.util.Properties;

import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.jms.TopicConnection;
import javax.jms.TopicConnectionFactory;
import javax.jms.TopicPublisher;
import javax.jms.TopicSession;
import javax.jms.TopicSubscriber;
import javax.naming.Context;
import javax.naming.InitialContext;

/**
 * Ejemplo que muestra como como enviar y recibir mensajes JMS de un Topic de forma remota.
 */
public class Topic {

    /**
     * Antes de ejecutar este ejemplo, usando WildFly se ha de crear un usuario guest y clave guest con el 
     * script WILDFLY_HOME/bin/add-user.sh.
     */
    public static void main(String[] args) throws Exception {
        // Usuario y password para conectarse al servidor JNDI y al Topic
        String usuario = &quot;guest&quot;;
        String contrasena = &quot;guest&quot;;

        // Propiedades para crear el contexto: clase factoría, url del servidor JNDI y credenciales
        Properties env = new Properties();
        env.put(Context.INITIAL_CONTEXT_FACTORY, &quot;org.jboss.naming.remote.client.InitialContextFactory&quot;);
        env.put(Context.PROVIDER_URL, &quot;http-remoting://localhost:8080&quot;);
        env.put(Context.SECURITY_PRINCIPAL, usuario);
        env.put(Context.SECURITY_CREDENTIALS, contrasena);

        // El objeto InitialContext permite obtener la referencias de los objetos registrado en el ábol JNDI
        InitialContext ic = new InitialContext(env);

        // Objetos a obtener para usar JMS: 
        // - TopicConnectionFactory
        // - TopicConection
        // - Topic
        // - TopicSession
        // - TopicSubscriber
        // - TopicPublisher
        TopicConnectionFactory connectionFactory = (TopicConnectionFactory) ic.lookup(&quot;jms/RemoteConnectionFactory&quot;);
        TopicConnection connection = connectionFactory.createTopicConnection(usuario, contrasena);
        
        // Obtener el Topic en el cual se publicarán y del cual se recibirán los mensajes
        javax.jms.Topic topic = (javax.jms.Topic) ic.lookup(&quot;jms/topic/test&quot;);

        // Preparar el publicador y subscriptor al Topic
        Subscriber subscriber1 = new Subscriber(connection, topic);
        Subscriber subscriber2 = new Subscriber(connection, topic);
        Publisher publisher = new Publisher(connection, topic);
        
        // Inicializar la recepción y envío de los mensajes
        connection.start();

        // Empezar a publicar mensajes en el Topic (y a recibirlos)
        Thread thread = new Thread(publisher);      
        thread.start();
        // Esperar a que el publicador termine de enviar mensajes
        thread.join();

        // Parar el envío y recepción de mensajes
        connection.stop();
        
        // Terminar liberando los recursos
        subscriber1.close();
        subscriber2.close();
        publisher.close();      
        connection.close();
        ic.close();
    }
    
    private static class Subscriber implements MessageListener {
        
        private TopicSession session;
        private TopicSubscriber subscriber;
        
        public Subscriber(TopicConnection connection, javax.jms.Topic topic) throws Exception {
            this.session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
            this.subscriber = this.session.createSubscriber(topic, null, false);
            this.subscriber.setMessageListener(this);
        }
        
        public void close() throws Exception  {
            subscriber.close();
            session.close();
        }
        
        @Override
        public void onMessage(Message message) {
            try {
                TextMessage text = (TextMessage) message;
                System.out.printf(&quot;Suscriptor (%s): El publicador dice: «%s»\n&quot;, this, text.getText());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    private static class Publisher implements Runnable {
        
        private TopicSession session;
        private TopicPublisher publisher;
        
        public Publisher(TopicConnection connection, javax.jms.Topic topic) throws Exception {
            this.session = connection.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
            this.publisher = this.session.createPublisher(topic);
        }
        
        public void close() throws Exception  {
            publisher.close();
            session.close();
        }
        
        @Override
        public void run() {
            try {
                for (int i = 0; i &lt; 10; ++i) {
                    Message mensaje = session.createTextMessage(String.format(&quot;¡Hola mundo! (%d)&quot;, i));
                    publisher.publish(mensaje);
                    Thread.sleep(1000);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}</code></pre></noscript></div>




<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/15/topic.png" title="Resultado de Topic.java" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/15/topic-thumb.png" alt="Resultado de Topic.java" title="Resultado de Topic.java"/></a>
</div>


<p>A continuación el código de utilizando un modelo punto a punto en el que vuelve a haber un emisor y dos receptores. En el resultado de la ejecución puede observarse que a pesar de haber dos receptores solo uno de los dos recibe cada mensaje:</p>

<div><script src='https://gist.github.com/picodotdev/9416544.js?file=Queue.java'></script>
<noscript><pre><code>package io.github.picodotdev.bitix.jms;

import java.util.Properties;

import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.QueueConnection;
import javax.jms.QueueConnectionFactory;
import javax.jms.QueueReceiver;
import javax.jms.QueueSender;
import javax.jms.QueueSession;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;

/**
 * Ejemplo que muestra como como enviar y recibir mensajes JMS de un Queue de forma remota.
 */
public class Queue {

    /**
     * Antes de ejecutar este ejemplo, usando WildFly se ha de crear un usuario guest y clave guest con el 
     * script WILDFLY_HOME/bin/add-user.sh.
     */
    public static void main(String[] args) throws Exception {
        // Usuario y password para conectarse al servidor JNDI y al Queue
        String usuario = &quot;guest&quot;;
        String contrasena = &quot;guest&quot;;

        // Propiedades para crear el contexto: clase factoría, url del servidor JNDI y credenciales
        Properties env = new Properties();
        env.put(Context.INITIAL_CONTEXT_FACTORY, &quot;org.jboss.naming.remote.client.InitialContextFactory&quot;);
        env.put(Context.PROVIDER_URL, &quot;http-remoting://localhost:8080&quot;);
        env.put(Context.SECURITY_PRINCIPAL, usuario);
        env.put(Context.SECURITY_CREDENTIALS, contrasena);

        // El objeto InitialContext permite obtener la referencias de los objetos registrado en el ábol JNDI
        InitialContext ic = new InitialContext(env);

        // Objetos a obtener para usar JMS: 
        // - QueueConnectionFactory
        // - QueueConection
        // - Queue
        // - QueueSession
        // - QueueSubscriber
        // - QueuePublisher
        QueueConnectionFactory connectionFactory = (QueueConnectionFactory) ic.lookup(&quot;jms/RemoteConnectionFactory&quot;);
        QueueConnection connection = connectionFactory.createQueueConnection(usuario, contrasena);
        
        // Obtener el Queue en el cual se publicarán y del cual se recibirán los mensajes
        javax.jms.Queue queue = (javax.jms.Queue) ic.lookup(&quot;jms/queue/test&quot;);

        // Preparar el publicador y subscriptor al Queue
        Receiver receiver1 = new Receiver(connection, queue);
        Receiver receiver2 = new Receiver(connection, queue);
        Sender sender = new Sender(connection, queue);
        
        // Inicializar la recepción y envío de los mensajes
        connection.start();

        // Empezar a enviar mensajes en el Queue (y a recibirlos)
        Thread thread = new Thread(sender);     
        thread.start();
        // Esperar a que el enviador termine de enviar mensajes
        thread.join();

        // Parar el envío y recepción de mensajes
        connection.stop();
        
        // Terminar liberando los recursos
        receiver1.close();
        receiver2.close();
        sender.close();     
        connection.close();
        ic.close();
    }
    
    private static class Receiver implements MessageListener {
        
        private QueueSession session;
        private QueueReceiver receiver;
        
        public Receiver(QueueConnection connection, javax.jms.Queue queue) throws Exception {
            this.session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
            this.receiver = this.session.createReceiver(queue);
            this.receiver.setMessageListener(this);
        }
        
        public void close() throws Exception  {
            receiver.close();
            session.close();
        }
        
        @Override
        public void onMessage(Message message) {
            try {
                TextMessage text = (TextMessage) message;
                System.out.printf(&quot;Receptor (%s): Un publicador dice: «%s»\n&quot;, this, text.getText());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    
    private static class Sender implements Runnable {
        
        private QueueSession session;
        private QueueSender sender;
        
        public Sender(QueueConnection connection, javax.jms.Queue queue) throws Exception {
            this.session = connection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);
            this.sender = this.session.createSender(queue);
        }
        
        public void close() throws Exception  {
            sender.close();
            session.close();
        }
        
        @Override
        public void run() {
            try {
                for (int i = 0; i &lt; 10; ++i) {
                    Message mensaje = session.createTextMessage(String.format(&quot;¡Hola mundo! (%d)&quot;, i));
                    sender.send(mensaje);
                    Thread.sleep(1000);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}</code></pre></noscript></div>




<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/15/queue.png" title="Resultado de Queue.java" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/15/queue-thumb.png" alt="Resultado de Queue.java" title="Resultado de Queue.java"/></a>
</div>


<p>Comentar que los mensajes se procesan en serie por cada MessageListener, esto es, hasta que no termina el consumo de uno no se consume el siguiente. Esto se aplica por MensajeListener y sesión.</p>

<p>Si queremos probar los ejemplos deberemos disponer del servidor de aplicaciones WildFly. Para que los ejemplos funcionen deberemos configurarlo añadiendo un usuario «guest», de contraseña «guest» y de rol «guest», el añadirlo lo podemos hacer con la utilidad add-user.sh. También deberemos modificar el archivo standalone-full.xml añadiendo el topic y el queue en la sección de JMS e iniciar WildFly usando esa configuración:</p>

<div><script src='https://gist.github.com/picodotdev/9416544.js?file=standalone.sh'></script>
<noscript><pre><code>./standalone.sh --server-config=standalone-full.xml</code></pre></noscript></div>




<div><script src='https://gist.github.com/picodotdev/9416544.js?file=standalone-full.xml'></script>
<noscript><pre><code>&lt;subsystem xmlns=&quot;urn:jboss:domain:messaging:2.0&quot;&gt;
    &lt;hornetq-server&gt;
        ...
        &lt;jms-destinations&gt;
            &lt;jms-queue name=&quot;testQueue&quot;&gt;
                &lt;entry name=&quot;jms/queue/test&quot;/&gt;
                &lt;entry name=&quot;java:jboss/exported/jms/queue/test&quot;/&gt;
            &lt;/jms-queue&gt;
            &lt;jms-topic name=&quot;testTopic&quot;&gt;
                &lt;entry name=&quot;jms/topic/test&quot;/&gt;
                &lt;entry name=&quot;java:jboss/exported/jms/topic/test&quot;/&gt;
            &lt;/jms-topic&gt;
        &lt;/jms-destinations&gt;
    &lt;/hornetq-server&gt;
&lt;/subsystem&gt;</code></pre></noscript></div>


<p>Para terminar y conocer más sobre JMS un buen libro es <a href="http://www.amazon.es/gp/product/0596522045/ref=as_li_tf_tl?ie=UTF8&camp=3626&creative=24790&creativeASIN=0596522045&linkCode=as2&tag=blobit-21">Java Message Service</a><img src="http://ir-es.amazon-adsystem.com/e/ir?t=blobit-21&l=as2&o=30&a=0596522045" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />
 de O&#8217;Reilly, que explica de forma mucho más extensa y completa este tema.</p>

<div class="imagenes-post" style="text-align: center;">
    <iframe src="http://rcm-eu.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=blobit-21&o=30&p=8&l=as1&m=amazon&f=ifr&ref=tf_til&asins=0596522045" style="width:120px;height:240px;" scrolling="no" marginwidth="0" marginheight="0" frameborder="0"></iframe>
</div>


<p>El código <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/HolaMundoJMS">fuente completo de estos ejemplos</a> los puedes descargar de <a href="https://github.com/picodotdev/blog-ejemplos">mi repositorio de GitHub</a>.</p>

<p>Referencia:<br/>
<a href="https://docs.jboss.org/author/display/WFLY8/Messaging+configuration">WildFly Messaging configuration</a><br/>
<a href="https://docs.jboss.org/author/display/WFLY8/Getting+Started+Guide#GettingStartedGuide-WildFly8Configurations">WildFly8Configurations</a><br/>
<a href="https://github.com/wildfly/quickstart/blob/master/helloworld-jms/src/main/java/org/jboss/as/quickstarts/jms/HelloWorldJMSClient.java">HelloWorldJMSClient.java</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="java" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configurar SSL en un servidor Tomcat, JBoss, WildFly, Lighttpd, nginx o Apache]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/"/>
	<published>2014-02-28T16:58:17+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/openssl.png" class="right" alt="OpenSSL" title="OpenSSL"/>
</div>


<p>En entradas anteriores he explicado <a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">en que consiste la criptografía y GPG</a> y como podemos usarlo a nivel personal para firmar y cifrar archivos y <a href="http://elblogdepicodev.blogspot.com.es/2013/11/como-usar-gpg-con-evolution.html">firmar correos electrónicos con el cliente de correo Evolution</a>. También he comentado <a href="http://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/">como crer un certificado con OpenSSL y como convertirlo a diferentes formatos</a>. En esta entrada explicaré como usar un certificdo creado con OpenSSL para proporcionar acceso SSL al sevidor web o servidor de aplicaciones, explicaré cual es la configuración necesaria para los servidores <a href="http://tomcat.apache.org/">Tomcat</a>, <a href="http://www.lighttpd.net/">Lighttpd</a>, <a href="http://www.jboss.org/jbossas">JBoss</a>/<a href="http://wildfly.org/">WildFly</a>, <a href="http://nginx.org/">nginx</a> y <a href="http://www.apache.org/">Apache</a>.</p>

<p>Usar una conexión SSL y un certificado de servidor evita que los datos entre el navegador del usuario y el servidor sean legibles para una tercera parte siendo mayor la seguridad en nuestras aplicaciones o dando mayor confianza al usuario y usando algunos certificados al aparecer en la barra de navegación del navegador en verde el nombre de la entidad detrás de la página evitando problemas de suplantación de identidad.</p>

<h3>Configurar SSL en Tomcat</h3>

<p>Tomcat es uno de los servidores de aplicaciones más usado para desplegar aplicaciones web desarrolladas con el lenguaje Java. La forma que explicaré a continuación sobre como obtener cifrado SSL con este servidor será usando APR (Apache Portable Runtime). Previamente deberemos haber generado un certificado SSL con OpenSSL, una vez dispogamos del nuestro aunque sea autofirmado debemos añadir la siguiente configuración al archivo server.xml:</p>

<div><script src='https://gist.github.com/picodotdev/9275133.js?file=server.xml'></script>
<noscript><pre><code>&lt;Connector port=&quot;8443&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;
    maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;
    clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;
    SSLCertificateFile=&quot;${catalina.home}/conf/localhost.crt&quot;
    SSLCertificateKeyFile=&quot;${catalina.home}/conf/localhost.key&quot;/&gt;</code></pre></noscript></div>


<p>Hay que activar el conector SSL (el anterior xml) y disponer del certificado y su clave privada, ambos archivos se indican en los atributos SSLCertificateFile y SSLCertificateKeyFile. Si queremos usar el puerto estandar del protocolo HTTPS cambiaremos el valor del puerto de 8443 a 443 en el atributo port. La configuración es la misma tanto para Tomcat 7 como para Tomcat 8.</p>

<h3>Configurar SSL en JBoss</h3>

<p>JBoss es otro de los servidores que es ampliamente usado para desplegar aplicaciones Java y que proporciona un perfil completo de las especificaciones EE al contrario que Tomcat que solo proporciona un perfil web. La configuración que hay que indicar en JBoss 7.1 es la siguiente:</p>

<div><script src='https://gist.github.com/picodotdev/9275133.js?file=standalone-jboss.xml'></script>
<noscript><pre><code>&lt;subsystem xmlns=&quot;urn:jboss:domain:web:1.1&quot; default-virtual-server=&quot;default-host&quot; native=&quot;true&quot;&gt;
    &lt;connector name=&quot;http&quot; protocol=&quot;HTTP/1.1&quot; scheme=&quot;http&quot; socket-binding=&quot;http&quot; redirect-port=&quot;8443&quot;/&gt;
    &lt;connector name=&quot;https&quot; protocol=&quot;HTTP/1.1&quot; scheme=&quot;https&quot; socket-binding=&quot;https&quot; secure=&quot;true&quot;&gt;
        &lt;ssl name=&quot;jboss&quot; certificate-key-file=&quot;${jboss.server.config.dir}/localhost.key&quot; certificate-file=&quot;${jboss.server.config.dir}/localhost.crt&quot;/&gt;
    &lt;/connector&gt;
    ...
&lt;/subsystem&gt;</code></pre></noscript></div>


<h3>Configurar SSL en WildFly</h3>

<p>JBoss cambió recientemente el nombre de la versión community de JBoss, esta ha pasado a llamarse WildFly y la comercial con soporte sigue llamandose JBoss. WildFly soporta las especificaciones de EE 7. En WildFly el contenedor web es <a href="http://undertow.io/">undertow</a> en vez de Tomcat y cambia la configuración de SSL. Senecesita crear un keystore JKS que contenga tanto la clave como el certificado.</p>

<div><script src='https://gist.github.com/picodotdev/9275133.js?file=standalone-wildfly.xml'></script>
<noscript><pre><code>&lt;security-realms&gt;
    ...
    &lt;security-realm name=&quot;SecureRealm&quot;&gt;
        &lt;server-identities&gt;
            &lt;ssl&gt;
                &lt;keystore path=&quot;localhost.keystore&quot; relative-to=&quot;jboss.server.config.dir&quot; keystore-password=&quot;wildfly&quot;/&gt;
            &lt;/ssl&gt;
        &lt;/server-identities&gt;
    &lt;/security-realm&gt;
&lt;/security-realms&gt;
...
&lt;subsystem xmlns=&quot;urn:jboss:domain:undertow:1.0&quot;&gt;
    ...
    &lt;server name=&quot;default-server&quot;&gt;
        &lt;http-listener name=&quot;default&quot; socket-binding=&quot;http&quot;/&gt;
        &lt;https-listener name=&quot;https&quot; socket-binding=&quot;https&quot; security-realm=&quot;SecureRealm&quot;/&gt;
        &lt;host name=&quot;default-host&quot; alias=&quot;localhost&quot;&gt;
            &lt;location name=&quot;/&quot; handler=&quot;welcome-content&quot;/&gt;
            &lt;filter-ref name=&quot;server-header&quot;/&gt;
            &lt;filter-ref name=&quot;x-powered-by-header&quot;/&gt;
        &lt;/host&gt;
    &lt;/server&gt;
    ...
&lt;/subsystem&gt;</code></pre></noscript></div>


<h3>Configurar SSL en Lighttpd</h3>

<p>Lighttpd es un servidor web de los denominados ligeros que aunque posiblemente no tiene toda la versatilidad de Apache ofrece un mayor rendimiento. Para activar SSL en lighttpd debemos modificar el archivo de configuración y añadir lo siguiente:</p>

<div><script src='https://gist.github.com/picodotdev/9275133.js?file=lighttpd.conf'></script>
<noscript><pre><code>$SERVER[&quot;socket&quot;] == &quot;:443&quot; {
    ssl.engine = &quot;enable&quot; 
    ssl.pemfile = &quot;localhost.pem&quot; 
}</code></pre></noscript></div>


<p>Quizá debamos cambiar el propietario y permisos con:</p>

<div><script src='https://gist.github.com/picodotdev/9275133.js?file=script-1.sh'></script>
<noscript><pre><code>$ chown root:root /etc/lighttpd/ssl/localhost.pem
$ chmod 400 /etc/lighttpd/ssl/localhost.pem</code></pre></noscript></div>


<p>El archivo localhost.pem contiene la clave y el certificado.</p>

<h3>Configurar SSL en nginx</h3>

<p>El proceso es similar para el servidor web nginx aunque lógicamente se usan las directivas propias de configuración de nginx.</p>

<div><script src='https://gist.github.com/picodotdev/9275133.js?file=nginx.conf'></script>
<noscript><pre><code>http {
   server {
         listen       443;
         server_name  localhost;
 
         ssl                  on;
         ssl_certificate      localhost.pem;
         ssl_certificate_key  localhost.key;
 
         ssl_session_timeout  5m;
 
         ssl_protocols  SSLv2 SSLv3 TLSv1;
         ssl_ciphers  HIGH:!aNULL:!MD5;
         ssl_prefer_server_ciphers   on;
 
         location / {
             root   /usr/share/nginx/html;
             index  index.html index.htm;
         }
     }
}</code></pre></noscript></div>


<h3>Configurar SSL en Apache</h3>

<p>Apache es uno de los servidores web más utilizados para servir sitios web en internet. Para activar SSL en Apache debemos modificar el archivo de configuración, añadiendo la siguiente configuración que activa el soporte de SSL y especifica el archivo de clave y certificado, nada distinto de lo necesario en los servidores anteriores:</p>

<div><script src='https://gist.github.com/picodotdev/9275133.js?file=httpd.conf'></script>
<noscript><pre><code>LoadModule ssl_module modules/mod_ssl.so

Listen 443
&lt;VirtualHost *:443&gt;
    ServerName www.example.com
    SSLEngine on
    SSLCertificateFile localhost.crt
    SSLCertificateKeyFile localhost.key
&lt;/VirtualHost&gt;</code></pre></noscript></div>


<p>Referencia:<br/>
<a href="https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html">Tomcat</a><br/>
<a href="http://docs.jboss.org/jbossweb/7.0.x/ssl-howto.html">JBoss</a><br/>
<a href="https://community.jboss.org/message/824152#824152">WildFly (Undertow)</a><br/>
<a href="http://redmine.lighttpd.net/projects/1/wiki/HowToSimpleSSL">Lighttpd</a><br/>
<a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html">nginx</a><br/>
<a href="http://httpd.apache.org/docs/current/ssl/ssl_howto.html">Apache</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software-libre" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generar y convertir claves y certificados con OpenSSL]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl/"/>
	<published>2014-02-21T17:36:21+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/02/generar-y-convertir-claves-y-certificados-con-openssl</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/openssl.png" class="right" alt="OpenSSL" title="OpenSSL"/>
</div>


<p>Para un uso personal como enviar correos o archivos cifrados o firmados digitalmente usar <a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">GnuPG</a> es una buena opción. En Internet los servidores también se aprovechan del uso de criptografía para realizar comunicaciones seguras entre el usuario y el servidor.</p>

<p>Para hacer uso en un servidor de una comunicación https donde los datos viajan cifrados y sin que otras partes salvo el usuario y el servidor puedan acceder a los datos necesitamos un certificado digital. Un certificado es un archivo que contiene la clave pública sirviéndonos para verificar su autenticidad. Un certificado autofirmado es un certificado firmado con la misma clave privada asociada a la clave pública que contiene el certificado. Un certificado autofirmado es suficiente para un entorno de pruebas pero en un servidor para proporcionar confianza a los usuarios deberemos solicitar que una autoridad de certificados que nos firme con su clave nuestro certificado, si el usuario confía en esa autoridad de certificado puede de esta manera confiar en nuestro certificado y clave pública.</p>

<p>Dependiendo del tipo de certificado que solicitemos y nos entregue la autoridad de certificado el usuario podrá ver que está simplemente accediendo a un servidor con conexión segura, ver los detalles de nuestro certificado y en algunos casos el usuario podrá ver en la barra de direcciones en verde el nombre de la entidad, que puede darle al usuario más confianza y ver que realmente está accediendo al servidor correcto y no a uno que esté intentando suplantar una identidad. En este último caso la barra de direcciones no tendría en verde el nombre de la entidad, esto es algo que como usuarios debemos comprobar al acceder a determinados sitios de forma segura.</p>

<p>En esta entrada voy a explicar como crear una clave pública y privada, posteriormente un certificado autofirmado usando <a href="https://www.openssl.org/">OpenSSL</a> que podremos usar en un servidor de aplicaciones y finalmente como convertir las claves y certificados a otros formatos.</p>

<h3>Crear una clave privada y pública usando OpenSSL</h3>

<p>En OpenSSL el mismo archivo contiene ambas claves de un algoritmo PKI (Public Key Infrastructure), tanto la clave privada como la pública. Una clave RSA puede usarse tanto para cifrar datos como para firmar, una clave DSA solo puede usarse para firmar.</p>

<h4>Crear un par de claves clave</h4>

<p>Podemos generar un par de claves RSA con OpenSSL usando el siguiente comando:</p>

<div><script src='https://gist.github.com/picodotdev/9138093.js?file=script-1.sh'></script>
<noscript><pre><code>$ openssl genrsa -out localhost.key 8192</code></pre></noscript></div>


<h4>Crear un certificado</h4>

<p>Un certificado contiene la firma de una tercera parte que valida nuestra clave pública como auténtica. Para que esa tercera parte pueda firmar nuestra clave deberemos generar una petición de firma de certificado y enviársela a la autoridad de certificado que nos lo devolverá firmado. La petición firma de certificado se crea con el siguiente comando:</p>

<div><script src='https://gist.github.com/picodotdev/9138093.js?file=script-2.sh'></script>
<noscript><pre><code>$ openssl req -new -key localhost.key -out localhost.csr</code></pre></noscript></div>


<p>Si no queremos tratar con una autoridad de certificado, ya que cobran por la firma, podemos crear un certificado autofirmado que puede ser suficiente para un entorno de pruebas. El comando para generar el certificado autofirmado es:</p>

<div><script src='https://gist.github.com/picodotdev/9138093.js?file=script-3.sh'></script>
<noscript><pre><code>$ openssl req -new -x509 -days 1825 -key localhost.key -out localhost.crt</code></pre></noscript></div>


<h3>Convertirlo a otros formatos</h3>

<p>Dependiendo de la autoridad de certificado el certificado puede estar en diferentes formatos, dependiendo del servidor donde tengamos idea de usarlo podemos necesitar convertirlo a otro formato. También podemos usar OpenSSL para hacer las conversiones.</p>

<h4>Convertir un certificado en formato DER (.crt .cer .der) a PEM</h4>

<div><script src='https://gist.github.com/picodotdev/9138093.js?file=script-4.sh'></script>
<noscript><pre><code>$ cat localhost.key localhost.crt &gt; localhost.pem
$ openssl x509 -in localhost.crt -out localhost.pem
$ openssl x509 -inform der -in localhost.cer -out localhost.pem</code></pre></noscript></div>


<h4>Convertir un certificado en formato PEM a DER</h4>

<div><script src='https://gist.github.com/picodotdev/9138093.js?file=script-5.sh'></script>
<noscript><pre><code>$ openssl x509 -outform der -in localhost.pem -out localhost.der
</code></pre></noscript></div>


<h4>Convertir un certificado en formato PEM y una clave privada a PKCS#12 (.pfx .p12)</h4>

<div><script src='https://gist.github.com/picodotdev/9138093.js?file=script-6.sh'></script>
<noscript><pre><code>$ openssl pkcs12 -export -out localhost.p12 -inkey localhost.key -in localhost.crt</code></pre></noscript></div>


<h4>Convertir un archivo en formato PKCS#12 (.pfx .p12) que contiene una clave privada y certificado a PEM</h4>

<div><script src='https://gist.github.com/picodotdev/9138093.js?file=script-7.sh'></script>
<noscript><pre><code>$ openssl pkcs12 -in localhost.p12 -out localhost.pem -nodes</code></pre></noscript></div>


<h4>Convertir PKCS#12 a keystore JKS</h4>

<div><script src='https://gist.github.com/picodotdev/9138093.js?file=script-8.sh'></script>
<noscript><pre><code>$ keytool -importkeystore -destkeystore localhost.keystore -srckeystore localhost.p12 -srcstoretype pkcs12</code></pre></noscript></div>


<p>Una vez que disponemos de un certificado y del formato en el que necesitemos podemos hacer uso de él, por ejemplo, en un servidor de páginas web o aplicaciones para proporcionar acceso mediante el protocolo HTTPS y proporcionar seguridad SSL. Pero eso será tema para la entrada <a href="http://picodotdev.github.io/blog-bitix/2014/02/configurar-ssl-en-un-servidor-tomcat-jboss-wildfly-lighttpd-nginx-apache/">Configurar SSL en un servidor Tomcat, JBoss, WildFly, Lighttpd, nginx o Apache</a>.</p>

<p>Referencia:<br/>
<a href="https://www.openssl.org/">https://www.openssl.org/</a><br/>
<a href="http://www.sslshopper.com/article-most-common-openssl-commands.html">http://www.sslshopper.com/article-most-common-openssl-commands.html</a><br/>
<a href="http://stackoverflow.com/questions/991758/how-to-get-an-openssl-pem-file-from-key-and-crt-files">http://stackoverflow.com/questions/991758/how-to-get-an-openssl-pem-file-from-key-and-crt-files</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software-libre" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Libro sobre desarrollo de aplicaciones con Apache Tapestry]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry/"/>
	<published>2014-02-14T20:10:34+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/02/libro-sobre-desarrollo-de-aplicaciones-con-apache-tapestry</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" class="right" alt="Apache Tapestry" title="Apache Tapestry"/>
</div>


<p>Hace unos meses publiqué el libro PlugIn Tapestry, un libro acerca del desarrollo de aplicaciones y páginas web en el lenguaje Java y con el framework <a href="http://tapestry.apache.org/">Apache Tapestry</a>.</p>

<h2>PlugIn Tapestry</h2>

<p>Apache Tapestry es un framework orientado a componentes para crear aplicaciones web rápidas, dinámicas, robustas y altamente escalables en la plataforma Java. Al basarse en componentes es distinto de los muchos basados en acciones similares en esencia a Struts que podemos encontrar en la plataforma Java como <a href="http://projects.spring.io/spring-framework/">Spring</a>, <a href="http://grails.org/">Grails</a> y <a href="http://www.playframework.com/">Play!</a> y también de los muchos otros en los que la principal diferencia es el lenguaje como <a href="https://www.djangoproject.com/">Django</a> (Python), <a href="http://symfony.com/">Symfony</a> (PHP), <a href="http://www.asp.net/mvc">ASP.NET MVC</a> (C#) o <a href="http://rubyonrails.org/">Ruby On Rails</a> (Ruby).</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry.png" title="Libro sobre Apache Tapestry" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/12/portada-PugInTapestry-thumb.png"/></a>
</div>


<p>Incluyendo la descripción de las características del framework el libro trata la mayoría de aspectos que puede necesitar una aplicación o página web, entre ellos:</p>

<ul>
<li>Introducción, principios y características</li>
<li>Inicio rápido</li>
<li>Páginas y componentes</li>
<li>Contenedor de dependencias (IoC)</li>
<li>Assets (imágenes, estilos, javascript) y módulos RequireJS</li>
<li>Formularios</li>
<li>Internacionalización (i18n) y localización (l10n)</li>
<li>Persistencia web</li>
<li>Persistencia en bases de datos</li>
<li>Ajax</li>
<li>Seguridad (autenticación, autorización, XSS, Inyección SQL)</li>
<li>Librerías de componentes</li>
<li>Pruebas unitarias, de integración y funcionales (<a href="http://junit.org/">JUnit</a>/<a href="http://code.google.com/p/mockito/">Mockito</a>, <a href="http://code.google.com/p/spock/">Spock</a>, <a href="http://www.gebish.org/">Geb</a>)</li>
<li>Y algunas cosas más sin entrar en muchos detalles como envió de correos, generación de informes, gráficas, una API REST y analizadores estáticos de código</li>
</ul>


<p>El libro está basado en la siguiente versión de Tapestry, la 5.4, que actualmente está en estado beta (aunque la mayoría servirá para la versión final y para la versión 5.3 actual). Esta nueva versión tiene como principal novedad la parte cliente de las aplicaciones con la inclusión de RequireJS y la definición de los archivos Javascript mediante módulos. También incorpora una capa de abstracción que permite usar cualquier librería como apoyo a la funcionalidad que necesita proporcionar ya sea Prototype, jQuery o cualquier otra que prefiramos o nueva que se desarrolle en un futuro.</p>

<p>Además del libro he desarrollado una <a href="https://github.com/picodotdev/elblogdepicodev/tree/master/PlugInTapestry">pequeña aplicación con unos pocos ejemplos</a> (disponible en mi repositorio de GitHub) que puedes probar en tu equipo sin necesidad de instalar nada previamente, salvo Git y el JDK. Más de 250 páginas de documentación que permitirán al lector descubrir mucha de la magia que puede ofrecer este framework. Además en <a href="http://picodotdev.github.io/blog-bitix/">mi blog</a> (y <a href="http://elblogdepicodev.blogspot.com.es">elblogdepicodev</a>) puedes encontrar varias entradas sobre muchos de los temas tratados de forma individual y que he utilizado para escribir el libro.</p>

<p>Puedes obtenerlo desde los enlaces que proporciono de forma totalmente libre y al inmejorable precio de 0,00€ impuestos incluidos. Por si fuera poco puedes conseguirlo en el formato electrónico que prefieras ya sea PDF, EPUB o MOBI. Tienes mi permiso (es más, animo a ello) para compartirlo, distribuirlo en redes P2P, subirlo a cualquier página web o «piratearlo» cuantas veces quieras, siempre que respetes la licencia Creative Commons bajo la cual lo he publicado.</p>

<div class="botones">
    <a href="http://goo.gl/dfySZ1" class="btn btn-large btn-success btn-descarga">Descargar el libro (PDF)</a>
    <a href="http://goo.gl/bs7Rtu" class="btn btn-large btn-success btn-descarga">EPUB</a>
    <a href="http://goo.gl/lxOZMT" class="btn btn-large btn-success btn-descarga">MOBI</a>
</div>




<div class="botones">
    <a href="http://goo.gl/Qv1Ym" class="btn btn-large btn-success btn-descarga">Obtener código fuente ejemplos</a>
</div>




<div style="text-align: center; margin-bottom: 20px">
    <h3>¡Y luego compártelo!</h3>

    <span t:type="any" class="st_twitter_vcount" st_title="He descargado el libro sobre desarrollo de apps web con Apache Tapestry. ¡Obtén tu copia! #PlugIn"st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="http://goo.gl/Vx8icI" st_image="prop:getAbsoluteURL('context:img/tapestry5.png')" st_via="picodotdev"></span>
    <span t:type="any" class="st_facebook_vcount" st_title="Libro PlugIn Tapestry" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="http://goo.gl/Vx8icI" st_image="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png"></span>
    <span t:type="any" class="st_googleplus_vcount" st_title="Libro PlugIn Tapestry" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="http://goo.gl/Vx8icI" st_image="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png"></span> <span t:type="any" class="st_linkedin_vcount" st_title="Libro PlugIn Tapestry" st_summary="Desarrollo de aplicaciones y páginas web con Apache Tapestry" st_url="http://goo.gl/Vx8icI" st_image="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png"></span>
</div>


<script type="text/javascript">
    var switchTo5x = true;
</script>


<script type="text/javascript" src="http://picodotdev.github.io/blog-bitix//w.sharethis.com/button/buttons.js"></script>


<script type="text/javascript">
    stLight.options({
        publisher : "ur-523bee64-9c59-af32-9251-6304a1541a47",
        doNotHash : true,
        doNotCopy : true,
        hashAddressBar : false
    });
</script>


<h2>Apache Tapestry</h2>

<p>Algunas características destacadas de Apache Tapestry son:</p>

<h3>Java</h3>

<p>Normalmente se usa el lenguaje Java con lo que el compilador y el asistente de código de tu IDE te ayudarán.</p>

<h3>Políglota</h3>

<p>Si prefieres puedes utilizar Groovy, Scala o cualquier otro lenguaje soportado por la JVM.</p>

<h3>Productivo</h3>

<p>La recarga de clases en caliente evitará que tengas que reiniciar el servidor para ver tus cambios aplicados. Simplemente actualiza el navegador.</p>

<h3>Rápido</h3>

<p>El framework está programado en Java sin hacer uso de reflection. Incorpora varias optimizaciones que harán tu aplicación más eficiente sin trabajo por tu parte como compresión gzip, minificación y agregación css/javascript, cacheo agresivo en el cliente de assets, supresión de espacios en blanco innecesarios, &hellip;</p>

<h3>Basado en componentes</h3>

<p>Los componentes son piezas autónomas y resusables de código. Para usar uno simplemente necesitarás conocer sus parámetros todo lo demás como archivos javascript, hojas de estilo y mensajes localizados son proporcionados por el componente. Los componentes pueden lanzar eventos y diferentes contenedores comportarse de diferente forma ante el mismo evento.</p>

<h3>Informe de error avanzado</h3>

<p>El informe te proporciona mucha más información que simplemente la traza de la excepción, verás que se estaba haciendo, que fué mal y como coregirlo. Con toda esta información solucionar las excepciones será mucho más rápido y fácil. El informe de error también es presentado en caso de errores en las peticiones AJAX.</p>

<h3>Testable</h3>

<p>Puedes probar los componentes de forma unitaria, el html generado o hacer pruebas de integración y funcionales. Los componentes son POJOs que no necesitan heredar ni implementar ninguna clase del framework. Podrás utilizar la herramienta que desees JUnit/Mockito, Spock, Geb, &hellip;</p>

<h3>Extensible, adaptable y modular</h3>

<p>Gracias al contenedor de dependencias y a que los servicios están programados en base a interfaces puedes definir una nueva implementación que modifique el comportamiento del framework. Todo servicio en el contenedor de dependencias puede ser redefinido, la mayoría de las cosas son servicios. Exiten módulos para Hibernate, Apache Shiro, Quartz, &hellip; y si no existe puedes usar cualquier librería como RESTEasy, JasperReports, EHCache, JFreeChart, RestFB&hellip;</p>

<h3>i18n y l10n</h3>

<p>Puedes tener catálogos de mensajes por componente o de manera global en la aplicación. Los assets (imágenes, css, &hellip;) tanbién son localizables y tener una plantilla con un contenido totalmente diferente según el idioma del usuario.</p>

<h3>Convención sobre configuración</h3>

<p>Las convenciones permiten evitar la configuración y los posibles errores que podemos cometer al realizarla. Pero más importante, hace que cualquier programador que conozca las convenciones sepa inmediatamente como están organizadas todas las cosas con lo que el tiempo de aprendizaje se reduce considerablemente.</p>

<h3>Librerías de componentes</h3>

<p>Los componentes comunes a varios proyectos pueden ser agregados en una librería de componentes (no es más que un archivo jar) para ser reutilizados. Nuevamente para usar los componentes solo tendrás que preocuparte de los parámetros, todos los recursos que necesiten serán extraídos de la librería. No necesitarás copiar y pegar archivos de un proyecto a otro, solo agregar una dependencia o jar a tu proyecto.</p>

<p>Según su principal desarrollador (Howard Lewis Ship, que obtuvo el premio Java Champion en 2010 <a href="https://java.net/website/java-champions/bios.html#Ship">[1]</a> y Duke&rsquo;s Choice Award por el framework <a href="https://www.java.net/dukeschoice/2006">[2]</a> en la categoría open source), y modestia aparte, piensa que Tapestry ha sido un líder desde una perspectiva puramente tecnológica. Estas son algunas cosas que cree que hizo primero y todavía piensa que lo hace mejor que nadie:</p>

<ul>
<li>Componentes reusables (2001)</li>
<li>Informe de excepción detallado y útil (2001)</li>
<li>Instrumentación invisible en las plantillas (2002)</li>
<li>Informe de error con precisión de linea (2004)</li>
<li>Metaprogramación y modificación de bytecode (2005)</li>
<li>Recarga de clases en caliente (2006)</li>
<li>Informe de error completo para peticiones Ajax (2012)</li>
<li>Integración con RequireJS, less/sass y CoffeeScript (2013)</li>
</ul>


<p>¿Te ha parecido poco? <a href="http://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/">¡Descubre alguna más en una presentación!</a>.</p>

<p>¡Que lo disfrutéis!, usar el siguiente <a href="http://goo.gl/dfySZ1">enlace para ¡descargarlo!</a></p>

<div class="alert alert-warning">
Inicialmente creé una página específica para alojar el libro con una aplicación de <a href="https://www.appfog.com/">AppFog</a> pero con esta entrada lo haré un mi propio blog ya que en el plan free han reducido considerablemente de 2 GiB a 512 MiB el tamaño de memoria del que disponen las aplicaciones. Hasta tal punto que una aplicación web java con solo jsps no se inicia correctamente.
</div>


<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">Documentación sobre Apache Tapestry</a> (elblogdepicodev)</p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="java" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="tapestry" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Presentación sobre Apache Tapestry]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry/"/>
	<published>2014-02-14T16:05:53+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/02/presentacion-sobre-apache-tapestry</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/tapestry.png" class="right" alt="Apache Tapestry" title="Apache Tapestry"/>
</div>


<p>El 10 de febrero tuve la oportunidad de dar una charla, la primera, sobre <a href="http://tapestry.apache.org/">Apache Tapestry</a> para el equipo de desarrolladores de la empresa en la que trabajo. Que en el equipo de desarrollo tengamos la posibilidad de vez en cuando dedicar un par de horas para juntarnos y compartir conocimiento es una buena iniciativa ya que siendo ya un equipo bastante grande de personas y con un nivel técnico elevado cada uno tiene un conocimiento que los demás pueden estar interesados en conocer al menos a nivel superficial, es motivador tener estas oportunidades.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/11/presentacion-apache-tapestry.jpg" title="Presentación sobre Apache Tapestry" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/11/presentacion-apache-tapestry-thumb.jpg"/></a>
</div>


<p>Fue una charla simplemente como cultura general ya que el framework y el lenguaje que usamos como pila tecnológica es <a href="http://grails.org/">Grails</a> y <a href="http://groovy.codehaus.org/">Groovy</a> y eso es complicado que cambie. Otro motivo fue poder compartir el conocimiento de este framework para el desarrollo de aplicaciones y páginas web que a mi me gusta mucho. Si estás suscrito al <a href="http://feeds.feedburner.com/blog-bitix/">feed de mi blog</a> ya conocerás que de vez en cuando publico alguna entrada comentando algún aspecto sobre él (tengo ya algunas preparadas y otras en mente) y si estás suscrito desde hace unos meses conocerás que escribí un libro. La charla fue para comentar los «porque» alguien podría elegir este framework y no tanto el «como» se hacen las cosas en él, para esto último ya esta el libro <a href="http://goo.gl/Vx8icI">PlugIn Tapestry</a>, <a href="http://elblogdepicodev.blogspot.com.es/2010/05/documentacion-sobre-apache-tapestry.html">otra documentación</a> y la propia <a href="http://tapestry.apache.org/documentation.html">documentación del proyecto</a>.</p>

<p>Probablemente la charla podría haberla explicado mucho mejor, fue lo mejor que fui capaz. También ya después de unas horas me dí cuenta de los detalles menores pero interesantes que se me pasaron comentar, unos cuantos. Pero teniendo en cuenta que es de las primeras charlas técnicas que doy, en general quedé satisfecho y por lo menos me servirá de experiencia para las siguientes. Dar una charla require tanto o mas esfuerzo que crear una entrada en el blog. Requiere crear una presentación, incluir en ella la información relevante que se quiere comentar según el objetivo y tener en cuenta el público al que va dirigida, poner la información de una forma que explique de forma coherente lo importante, tener cierta habilidad comunicativa (que creo no tengo) y ensayar la charla para ajustarla al tiempo del que se dispone y otras tantas cosas como estas. A pesar de que fue una charla de dos horas hay muchos detalles que se quedaron fuera, solo vimos la superficie de todo lo que tiene que ofrecer este framework.</p>

<p>En la charla surgió alguna pregunta interesante como ¿por que teniendo Tapestry ya más de 10 años de vida no es un framework más usado? Algunos de los motivos que dí fueron que Tapestry tiene una curva de aprendizaje mayor que otros frameworks ya que cambia el modelo de desarrollo de los frameworks basados en acciones a uno basado en componentes. El modelo basado en acciones lleva usándose desde Struts y es ampliamente usado en diversos frameworks. Struts fué uno de los frameworks más utilizados en su momento y por tanto usar otro framework basado en acciones en el que en muchos casos lo único que cambia en esencia es el lenguaje de programación, es más rápido y no require adquirir tanto conocimiento nuevo para usar uno que siga los mismos principios. Desde entonces han surgido nuevos frameworks <a href="http://grails.org/">Grails</a>, <a href="http://www.playframework.com/">Play!</a>, <a href="http://symfony.com/">Symfony</a>, <a href="https://www.djangoproject.com/">Django</a>, <a href="http://www.asp.net/mvc">ASP.NET MVC</a>, <a href="http://rubyonrails.org/">Ruby on Rails</a>, &hellip; como digo en esencia en todos ellos el principal cambio es el lenguaje de programación. Otro motivo puede ser que los desarrolladores de Tapestry no tienen detrás a una compañía que les apoya finaciandoles para promover su uso y evangelizar a tiempo completo, aunque de vez en cuando lo hacen, el proyecto está dentro de la <a href="http://www.apache.org/">fundación Apache</a> y los desarrolladores viven de la consultoría o proyectos que realizan. A pesar de tener unas características muy notables (IMHO), que se superan en cada nueva versión siguiendo la tendencia de las aplicaciones e innovando, a veces una buena solución no tiene por que ser la que más éxito tenga o sea la más usada, ¿por que linux no es un sistema operativo más usado en el escritorio? Los motivos serán diferentes en este caso pero el resultado es que lo que unos consideran la mejor opción no no tiene por que ser la más ampliamente usada.</p>

<p>Otra pregunta interesante que surgió fue que parte de lo que comenté sobre Tapestry también puede realizarse con el framework en concreto con el que lo comparamos, Grails aunque podría ser otro. Sí, probablemente estructurando las cosas de cierta forma en Grails se puede conseguir algunas cosas parecidas como reutilización de controladores, acciones y elementos visuales comunes (en el mismo proyecto, página y diferentes proyectos) pero desde luego habría que buscar una solución propia y resolver algunos problemas que ya resuelve Tapestry por nosotros como generación de ids únicos para los elementos visuales (ids de las etiquetas) de forma que no haya conflictos, inclusión de recursos según los componentes de la página, internacionalización (i18n) de assets (imágenes, plantillas), sin lógica en las plantillas y siguiendo el modelo pull en las vistas, reutilización en diferentes proyectos con librerías, configuración distribuida para el contenedor de dependencias, detección de errores de compilación en las plantillas, página de excepción informativa y para peticiones ajax, actualización de zonas de una página con cero javascript, actualización de multiples zonas de una página en una única petición ajax, servicios mutuamente dependientes, instrumentación invisible en las plantillas, integración de RequireJS en el lado del servidor y cliente, eventos y comportamiento diferente según el elemento contenedor ante un mismo evento, escalabilidad &hellip;. Algunas serían posibles, otras quizá no y posiblemente en las posibles tendríamos que implementar nosotros alguna solución propia, no seguirían las indicaciones que se proporcionan en el manual de Grails y quizá las cosas no serían manejables ni quedarían de una forma que quedásemos a gusto con el código. A pesar de todo la herramienta utilizada no es lo más importante, pero si es cierto que utilizar una u otra si puede contribuir a hacer ciertas cosas más de forma más sencilla y cuando las cosas alcanzan un volumen grande sigan siendo manejables (no haya duplicación, no se produzcan muchos errores al hacer cambios, reutilización) que es cuando Tapestry en teoría empieza a mostrar sus virtudes. Lo mismo que se puede hacer con Grails o Tapestry también se puede hacer con servlets y JSP pero probablemente acabaríamos simulando un nuevo Grails o Tapestry, mejor usar el que más nos facilite las tareas y uno que probablemente será mejor que cualquier cosa que podamos hacer nosotros además de no tener que encargarnos de hacerla ni mantenerla. Grails también tienen algunas cosas destacables «built-in» que en Tapestry hay que proporcionarlas con alguna librería, como GORM. Si hay tantos frameworks, librerías, etc ahí fuera probablemente sea porque hay diferentes necesidades, puntos de vista diferentes de como resolverlos, &hellip; en definitiva es cuestión de elegir el que más nos convezca por diferentes motivos y la elección puede ser subjetiva.</p>

<p>Y otra pero no menos interesante pregunta es por que tapestry se llama tapestry o por que el logo de tapestry es un unicornio, anteriormente fue similar a una T en la versión 3, para el nombre no tengo respuesta. Leyendo un <a href="http://mail-archives.apache.org/mod_mbox/tapestry-users/200605.mbox/%3Cop.s9k7abmko3wyor@liigo%3E">hilo en la lista de destribución</a> en la que se discutía el asunto se da algunas ideas pero no me ha quedado una clara.</p>

<p>A continuación la <a href="https://speakerdeck.com/picodotdev/plugin-tapestry">presentación completa de la charla</a> que dí y que contiene de forma más explícita todo lo que está incluido en el libro <a href="http://goo.gl/Vx8icI">PlugIn Tapestry</a>.</p>

<script async class="speakerdeck-embed" data-id="94de4cc06da70131c6665e5071095c76" data-ratio="1.77777777777778" src="http://speakerdeck.com/assets/embed.js"></script>


<p>Un par de gracias, la sensación de haber aportado algo (o al menos haberlo intentado), el ruido que hicimos en twitter con el hastag <a href="https://twitter.com/search?q=tapestry5">#tapestry5</a>, unos pocos seguidores adicionales y algunos retweets incluido el del principal hacedor de Tapestry fue suficiente recompensa.</p>

<p>Un blog desde hace ya 4 años, un libro el año pasado, una charla este ¿que será lo siguiente? «Non gogoa, han zangoa».</p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="java" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="tapestry" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Servidor de aplicaciones JBoss/WildFly]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/02/servidor-de-aplicaciones-jboss-slash-wildfly/"/>
	<published>2014-02-07T22:35:31+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/02/servidor-de-aplicaciones-jboss-slash-wildfly</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/wildfly.png" class="right" alt="WildFly" title="WildFly"/>
</div>


<p>Para una pequeña (o no tan pequeña) aplicación web desarrollada en la plataforma Java un servidor como <a href="http://tomcat.apache.org/">Tomcat</a> o <a href="http://www.eclipse.org/jetty/">Jetty</a> es suficiente. Pero una aplicación grande o un entorno empresarial probablemente empiece a requerir funcionalidades que Tomcat no proporciona de por si. En algunos casos una librería puede suplir esta carencia, este podría ser el caso de <a href="http://hibernate.org/">Hibernate</a> para la persistencia o <a href="http://shiro.apache.org/">Apache Shiro</a> para la seguridad de la aplicación. Sin embargo, cuando sea posible y tenga sentido es buena idea seguir alguna de las especificaciones o <a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition">APIs que proporciona la plataforma JEE</a> ya que de esta manera podremos cambiar de implementación sin necesidad de modificar el código de la aplicación y permite integrar dos sistemas diferentes si ambos siguen una determinada especificación. Un ejemplo podría ser el caso de Hibernate con la especificación JPA que proporciona una funcionalidad equivalente (de hecho esta especificación se basa en Hibernate y se puede usar Hibernate como implementación a través de la API que define JPA) o de integración de sistemas con JMS.</p>

<p>Los servidores de aplicaciones se pueden distinguir por la cantidad de especificaciones que implementan, sus versiones, perfiles y la versión de Java EE que cumplen. Por una parte tendríamos los contenedores de servlets y jsp como podrían ser Apache Tomcat y Jetty, estos cumplen con un perfil web e implementan una parte de las especificación que engloba Java EE. Por otra parte están los servidores que cumplen con toda las especificaciones que define JEE y se les suele denominar «full profile» o perfil completo. Ejemplos de servidores de aplicaciones full profile son:</p>

<ul>
<li><a href="https://glassfish.java.net/">Glashfish</a>: la implementación de referencia de un servidor de aplicaciones.</li>
<li><a href="http://www.oracle.com/us/products/middleware/cloud-app-foundation/weblogic/suite/overview/index.html">Weblogic</a>: el servidor de aplicaciones propietario que adquirió Oracle con la compra de la antigua BEA Systems.</li>
<li><a href="http://geronimo.apache.org/">Apache Geronimo</a>: servidor de aplicaciones proporcionado por la fundación Apache. Las implementaciones de las especificaciones son proporcionadas por muchos de los proyectos de la propia fundación.</li>
<li><a href="https://www.jboss.org/overview/">JBoss</a>/<a href="http://wildfly.org/">WildFly</a>: servidor de aplicaciones que adquirió <a href="http://www.redhat.com/">RedHat</a> de la comunidad JBoss pero al contrario que Oracle y Weblogic con licencia libre de software libre.</li>
</ul>


<p>De la plataforma JEE hay varias versiones que a medida que se van publicando mejoran y amplían las especificaciones que ya estaban disponibles en una versión anterior o se incluyen nuevas especificaciones que han de soportar los servidores de aplicaciones si quieren certificarse como «full profile». La última versión al momento de escribir esta entrada es la JEE 7 publicada en abril de 2013. Las <a href="https://glassfish.java.net/downloads/ri/">especificaciones más importantes que incluye JEE 7</a> son las siguientes aunque hay alguna más aparte de estas:</p>

<ul>
<li>JSF (2.2): para desarrollar aplicaciones web sucesor de los JSP.</li>
<li>Servlets (3.1) y JSPs (2.3): los servlets son la base a partir de la cual desarrollar aplicaciones web dinámicas y los JSP una forma de servlet en el que la mayor parte de el código HTML, similar a PHP.</li>
<li>CDI (1.0): proporciona inyección de dependencias de forma parecida a frameworks como Spring.</li>
<li>EJB (3.2): beans gestionados por un contenedor administrando su ciclo de vida y proporcionales funcionalidades como persistencia y transacciones. Suelen usarse para incluir la lógica de negocio de la aplicación.</li>
<li>Bean Validation (1.1): funcionalidad que mediante anotaciones permite indicar restricciones sobre los valores que pueden contener los beans.</li>
<li>JPA (2.1): especificación que proporciona persistencia en una base de datos.</li>
<li>JTA (1.2): especificación que proporciona transaccionalidad.</li>
<li>JMS (2.0): especificación que permite a las aplicaciones comunicarse mediante mensajes de forma desacoplada.</li>
<li>JAX-RS (2.0): especificación sobre los servicios web basados en el modelo REST sobre el protocolo HTTP.</li>
<li>JAX-WS (1.3): especificación sobre servicios web basados en XML.</li>
<li>JavaMail (1.5): especificación para el envío de mensajes de correo electrónico.</li>
</ul>


<p>De entre los servidores de aplicaciones mencionados anteriormente JBoss o WildFly, la versión para la comunidad, es una muy buena opción, arranca tremendamente rápido (unos 10 segundos, no mucho más que un Tomcat que ofrece muchas menos funcionalidades), tiene una licencia de software libre, ofrece soporte empresarial y detrás está una compañía que claramente apuesta por el software libre en su modelo de negocio. En la última versión de JBoss, la 7.1, y 8 de WildFly ya no se producen los errores de conflictos entre librerías que se producían anteriormente con el «classpath hell», ya que en vez de seguir un modelo jerárquico como antes sigue un modelo OSGi con JBoss Modules. Ahora se basa en módulos y cada war, ear o jar está aislado del resto. Puede administrarse mediante linea de comandos y a través de una consola web evitándose los conflictos. Para diferenciar más claramente la versión comercial de la ofrecida a la comunidad JBoss ha pasado a llamarse WildFly para la versión de la comunidad y la relación con JBoss será similar a la que tienen <a href="http://www.redhat.com/products/enterprise-linux/">RHEL</a> con <a href="https://fedoraproject.org/">Fedora</a> y desde hace poco con <a href="http://www.centos.org/">CentOS</a>.</p>

<p>A continuación unas pocas capturas de pantalla de la página de inicio de WildFly y de la consola de administración:</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/10/wildfly.png" title="Pantalla de bienvenida de WildFly" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/10/wildfly-thumb.png"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/10/wildfly-admin-1.png" title="Consola de administración" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/10/wildfly-admin-1-thumb.png"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/10/wildfly-admin-2.png" title="Consola de administración" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/10/wildfly-admin-2-thumb.png"/></a>
</div>


<p>En las <a href="http://wildfly.org/news/2014/02/11/WildFly8-Final-Released/">notas de publicación de WildFly 8</a> pueden consultarse las numerosas e interesantes funcionalidades añadidas. También en el siguiente <a href="http://wildfly.org/news/2013/11/21/WildFly-8-Webinar/">vídeo</a> se explican muchos de los detalles que incorpora.</p>

<p>En posteriores entradas y siguiendo la serie de entradas de seguridad (<a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">I</a>, <a href="http://elblogdepicodev.blogspot.com.es/2013/11/como-usar-gpg-con-evolution.html">II</a>, <a href="http://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.html">III</a>, <a href="http://localhost:4000/blog-bitix/2013/12/usar-el-dni-electronico-con-firefox-en-linux/">IV</a>, <a href="http://localhost:4000/blog-bitix/2013/12/enviar-correos-electronicos-firmados-con-el-dnie-y-evolution/">V</a> y <a href="http://localhost:4000/blog-bitix/2013/12/firmar-digitalmente-documentos-con-el-dnie-y-sinadura/">VI</a>) comentaré como crear certificados para usarlos con el protocolo seguro SSL y como configurar diferentes servidores web y de aplicaciones Java, entre ellos WildFly, para usar SSL y el protocolo HTTPS.</p>

<p>Referencia:<br/>
<a href="http://wildfly.org/">WildFly</a><br/>
<a href="http://www.jboss.org/jbossas">JBoss</a><br/>
<a href="http://www.jboss.org/overview/">http://www.jboss.org/overview/</a><br/>
<a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition">http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition</a><br/>
<a href="http://www.oracle.com/technetwork/java/javaee/tech/index.html">http://www.oracle.com/technetwork/java/javaee/tech/index.html</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="java" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logging usando marcadores con slf4j y logback]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback/"/>
	<published>2014-01-31T17:10:17+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/01/logging-usando-marcadores-con-slf4j-y-logback</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" class="right" alt="Java" title="Java"/>
</div>


<p>Un sistema de logging en una aplicación es indispensable para saber lo que está sucediendo en la aplicación en el mismo momento o pasado un tiempo. Es de gran utilidad tanto para en el momento de desarrollar la aplicación como para una vez puesta en producción. Con el registro de las trazas podemos obtener información que nos permitirá descubrir un error o averiguar más fácilmente y rápidamente porque sucede algún comportamiento que no es como se espera.</p>

<p>En Java hay varios sistemas de logging entre los más utilizados están <a href="http://logging.apache.org/log4j/1.2/">log4j</a>, <a href="http://logback.qos.ch/">logback</a>, <a href="http://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html">java.util.logging</a> y la capa de abstracción <a href="http://www.slf4j.org/">slf4j</a> sobre varios de estas librerías. En estas librerías de logging las trazas se emiten a través de un logger que normalmente se corresponde con el nombre de la clase en la que se emite la traza. De esta forma las trazas se pueden filtrar por el nivel de importancia de la traza (debug, info, warn, &hellip;) y por el nombre del logger de forma que podemos obtener un registro de las trazas emitidas por los loggers que deseamos.</p>

<p>Sin embargo, el nivel de trazas y nombre de logger no son los más adecuados para determinadas necesidades. En algún caso nos puede interesar solo algunas trazas asociadas a determinada funcionalidad, el resto de trazas podríamos querer filtrarlas, pero únicamente con los filtros por nivel y nombre de logger no podríamos. Además, una funcionalidad puede estar dispersa entre varias clases con lo que si el nombre del logger es el nombre de la clase deberíamos especificar todos los logger que queremos individualmente y aunque los loggers tienen una relación jerárquica no es útil para obtener lo que queremos.</p>

<p>Para obtener las trazas específicas que queremos y que pueden estar dispersas en varias clases podemos usar los <a href="http://logback.qos.ch/manual/filters.html">filtros de logback</a>, una posibilidad es usar los marcadores pero hay otra buena cantidad de posibilidades dependiendo de nuestras necesidades.</p>

<p>Por ejemplo, para la siguientes clases nos podría interesar obtener las trazas asociadas a la funcionalidad de importación pero si indicamos que queremos la trazas del logger Importador y de nivel INFO obtendríamos todas la trazas de la clase incluidas las trazas de persistencia.</p>

<div><script src='https://gist.github.com/picodotdev/8735932.js?file=Main.java'></script>
<noscript><pre><code>package io.github.picodotdev.log.markers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.Marker;
import org.slf4j.MarkerFactory;

public class Main {

    // Loggers
    private static final Logger logger = LoggerFactory.getLogger(Main.class);

    // Marcadores
    public static Marker importacion = MarkerFactory.getMarker(&quot;IMP&quot;);
    public static Marker importacionUtils = MarkerFactory.getMarker(&quot;UTL&quot;);
    public static Marker persistencia = MarkerFactory.getMarker(&quot;PER&quot;);
    
    static {
        // Incluir en un marcador las trazas de otro 
        importacionUtils.add(importacion);
    }

    public static void main(String[] args) {
        logger.info(&quot;Iniciando...&quot;);
        
        logger.info(Main.importacion, &quot;Comenzando importación...&quot;);
        new Importador().importar();
        logger.info(Main.importacion, &quot;Importación finalizada&quot;);
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/picodotdev/8735932.js?file=Importador.java'></script>
<noscript><pre><code>package io.github.picodotdev.log.markers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Importador {

    private static final Logger logger = LoggerFactory.getLogger(Importador.class);
    
    public Importador() {       
    }
    
    public void importar() {
        logger.info(Main.importacion, &quot;Realizando importación...&quot;);

        Utils.importar();
        
        logger.info(Main.persistencia, &quot;Persistiendo algo...&quot;);
        
        Utils.save();
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/picodotdev/8735932.js?file=Utils.java'></script>
<noscript><pre><code>package io.github.picodotdev.log.markers;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Utils {

    private static final Logger logger = LoggerFactory.getLogger(Utils.class);
    
    public static void save() {
        logger.info(&quot;Comenzando persistencia (utils)...&quot;);
        
        // ...
        
        logger.info(Main.persistencia, &quot;Persistido algo (utils)...&quot;);
    }
    
    public static void importar() {
        logger.info(&quot;Comenzando importación (utils)...&quot;);
        
        // ...
        
        logger.info(Main.importacionUtils, &quot;Importado algo (utils)...&quot;);
    }   
}
</code></pre></noscript></div>


<p>Este sería el resultado:</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/9/sin-filtro.png" title="Trazas sin usar filtros" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/9/sin-filtro-thumb.png"/></a>
</div>


<p>Para conseguir solo las trazas de una funcionalidad se pueden utilizar los marcadores («markers») de forma que además de por el nivel del mensaje de traza y el logger podamos filtrar por el marcador asociado a la traza. El marcador de una traza es una etiqueta por la que posteriormente podemos filtrar. Si una funcionalidad estuviese repartida por varias clases podríamos usar el mismo marcador en todas esas trazas de forma que podamos filtrar luego por él. El resultado del ejemplo completo sería el siguiente:</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/9/con-filtro.png" title="Trazas usando un filtro" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/9/con-filtro-thumb.png"/></a>
</div>


<p>En ambos resultados puede verse el nombre del marcador (IMP de importación, PER de persistencia, UTL de utilidad) asociado a la traza, en el segundo solo se muestran las trazas con el marcador IMP de la funcionalidad de importación.</p>

<p>Utilizando la combinación slf4j y logback, la configuración para de logback y usando un filtro para obtener las trazas con el marcador asociado que deseamos es la siguiente:</p>

<div><script src='https://gist.github.com/picodotdev/8735932.js?file=logback.xml'></script>
<noscript><pre><code>&lt;configuration&gt;
    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
        &lt;filter class=&quot;io.github.picodotdev.log.markers.ImportacionFilter&quot;&gt;&lt;/filter&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;%-23d{ISO8601} %-5p %-17marker %-17t %40.40C %-15M %m%n&lt;/pattern&gt;
        &lt;/encoder&gt;
    &lt;/appender&gt;

    &lt;logger name=&quot;io.github.picodotdev.log.markers&quot; level=&quot;INFO&quot;/&gt;

    &lt;root level=&quot;debug&quot;&gt;
        &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;
    &lt;/root&gt;
&lt;/configuration&gt;</code></pre></noscript></div>


<p>Este sería el código del filtro que nos permitiría obtener las trazas de una determinada funcionalidad, en el caso del ejemplo las trazas relativas a la funcionalidad de importación.</p>

<div><script src='https://gist.github.com/picodotdev/8735932.js?file=ImportacionFilter.java'></script>
<noscript><pre><code>package io.github.picodotdev.log.markers;

import org.slf4j.Marker;

import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.core.filter.Filter;
import ch.qos.logback.core.spi.FilterReply;

public class ImportacionFilter extends Filter&lt;ILoggingEvent&gt; {

    @Override
    public FilterReply decide(ILoggingEvent event) {
        Marker marker = event.getMarker();
        if (Main.importacion.equals(marker) || marker.contains(Main.importacion)) {
            return FilterReply.ACCEPT;
        } else {
            return FilterReply.DENY;
        }
    }
}</code></pre></noscript></div>


<p>Puedes obtener el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/MarcadoresSLF4J">código fuente completo del ejemplo</a> de su repositorio de GitHub y probarlo en tu equipo.</p>

<p>¿Conocías y has usado alguna vez esta funcionalidad?</p>

<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2012/04/librerias-de-logging-para-java-slf4j.html">Librerías de logging para Java (slf4j, log4j, java.util.logging, logback, MentaLog</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="java" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ejemplo del patrón de diseño No Operation]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation/"/>
	<published>2014-01-24T16:48:40+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/01/ejemplo-del-patron-de-diseno-no-operation</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/java.png" class="right" alt="Java" title="Java"/>
</div>


<p>Hasta el momento ya he escrito alguna entrada sobre los <a href="http://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.html">patrones de diseño</a> en general, sobre algunos casos particulares como el <a href="http://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html">patrón de diseño Command</a> relacionado con la programación concurrente y sobre el <a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.html">patrón de diseño State</a> para hacer máquinas de estados. En esta entrada hablaré sobre otro patrón de diseño, el patrón No Operation y de que forma podemos aprovecharlo para resolver algún problema y hacer nuestro código más simple.</p>

<p>En un programa que emplea un lenguaje de programación orientado a objetos estos están constantemente relacionándose entre si a través de llamadas a métodos y a través de las referencias que un objeto posee de otros. Sin embargo, es habitual que un determinado método devuelva un null en vez de una referencia a un objeto. Esta referencia null puede ser un problema ya que nos obliga en el código hacer una comprobación antes de poder llamarlo. Si un método devuelve un null puede dar como resultado un <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/NullPointerException.html">NullPointerException</a> en otra parte de la aplicación en donde se intente usar esa referencia y no se haga la comprobación.</p>

<p>Para tratar de evitar llenar nuestro código java de sentencias if con la comprobación de null podemos utilizar el patrón de diseño No Operation. La idea de este patrón es que en vez de devolver un null como resultado de la llamada a un método devolvamos un objeto que no haga nada en las llamadas a los métodos en los que se use. Por ejemplo, supongamos que tenemos un método que en base a un enum se encarga de devolver un objeto que sigue el <a href="http://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html">patrón Command</a>. Y ahora supongamos que para cierto valor del enum no hay objeto command que se pueda devolver, podríamos devolver null en cuyo caso nos veríamos obligados a realizar la comprobación por null o empleando la idea del patrón No Operation devolver un objeto que implemente la interfaz command en cuestión pero que no haga nada o haga una operación inocua. Si vemos que en un programa estamos llenándolo de sentencias if (objeto == null) tal vez podamos aplicar este patrón. Lo importante para poder eliminar esos if es determinar que es una operación inocua, si se trata de un objeto puede ser que el método no haga nada, si se trata de un número que se utiliza para sumar o multiplicar se puede devolver 0 o 1 respectivamente en vez de null, depende del caso y la operación a simular.</p>

<p>Esta patrón puede usarse también para evitar la excepción NullPointerException pero no es tanto la misión del patrón la misión como evitar preocuparnos por si las referencias son null o no y eliminar ifs, es cierto que empleándolo no dará la excepción pero si la aplicación continua puede producir otra excepción o un comportamiento no deseado más complicado de resolver y de averiguar su causa en otra parte del código.</p>

<p>Veámoslo con el ejemplo de una factoría que para determinados enumerados se devuelve un objeto que sigue el patrón command pero para ciertos valores del enumerado no hay command válido y en vez de devolver null devolvemos un command no operation, este es el caso de llamar a la factoría con un enumerado null. Para el enumerado Operacion.MENSAJE se develve un command que emite un mensaje, para Operacion.NO_MENSAJE y null se devuelve un command que no hace nada.</p>

<div><script src='https://gist.github.com/picodotdev/8600530.js?file=OperacionCommandFactory.java'></script>
<noscript><pre><code>package io.github.picodotdev.pattern.nooperation;

public class OperacionCommandFactory {

    public enum Operacion {
        MENSAJE, NO_MENSAJE
    }
    
    public OperacionCommand buildCommand(Operacion operacion) {
        if (operacion == null) {
            return new NoOperacionCommand();
        }
        switch (operacion) {
            case MENSAJE:
                return new MensajeCommand();
            case NO_MENSAJE:
                return new NoOperacionCommand();
            default:
                throw new IllegalArgumentException();
        }
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/picodotdev/8600530.js?file=OperacionCommand.java'></script>
<noscript><pre><code>package io.github.picodotdev.pattern.nooperation;

public interface OperacionCommand {

    void operacion();
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/picodotdev/8600530.js?file=NoOperacionCommand.java'></script>
<noscript><pre><code>package io.github.picodotdev.pattern.nooperation;

public class NoOperacionCommand implements OperacionCommand {

    @Override
    public void operacion() {
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/picodotdev/8600530.js?file=MensajeCommand.java'></script>
<noscript><pre><code>package io.github.picodotdev.pattern.nooperation;

public class MensajeCommand implements OperacionCommand {

    @Override
    public void operacion() {
        System.out.println(&quot;Hola mundo!&quot;);
    }
}</code></pre></noscript></div>


<p>Y finalmente el caso de prueba donde puede verse que no hay ningún if ya que no se devuelve en ningún caso un null:</p>

<div><script src='https://gist.github.com/picodotdev/8600530.js?file=OperacionCommandFactorySpec.groovy'></script>
<noscript><pre><code>package io.github.picodotdev.pattern.nooperation

import io.github.picodotdev.pattern.nooperation.OperacionCommand
import io.github.picodotdev.pattern.nooperation.OperacionCommandFactory
import io.github.picodotdev.pattern.nooperation.OperacionCommandFactory.Operacion

import spock.lang.Specification

public class OperacionCommandFactorySpec extends Specification {

    private OperacionCommandFactory factory = null
    
    void setup() {
        factory = new OperacionCommandFactory()
    }
    
    void test1() {
        setup:
        OperacionCommand operacion = factory.buildCommand(Operacion.MENSAJE)
    
        when:
        operacion.operacion()
        
        then:
        1 == 1
    }
    
    void test2() {
        setup:
        OperacionCommand operacion = factory.buildCommand(Operacion.NO_MENSAJE)
    
        when:
        operacion.operacion()
        
        then:
        1 == 1
    }
    
    void test3() {
        setup:
        OperacionCommand operacion = factory.buildCommand(null)
    
        when:
        operacion.operacion()
        
        then:
        1 == 1
    }
}</code></pre></noscript></div>


<p>Puedes obtener el <a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PatronNoOperation">código fuente completo del ejemplo</a> de su repositorio de GitHub.</p>

<p>Referencia:<br>
<a href="https://github.com/picodotdev/blog-ejemplos/tree/master/PatronNoOperation">Código fuente del ejemplo del patrón de diseño No Operation</a><br>
<a href="http://elblogdepicodev.blogspot.com.es/2012/03/patrones-de-diseno-en-la-programacion.html">Patrones de diseño en la programación orientada a objetos</a><br>
<a href="http://elblogdepicodev.blogspot.com.es/2012/04/ejemplo-del-patron-de-diseno-command-y.html">Ejemplo del patrón de diseño Command y programación concurrente en Java</a><br>
<a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.html">Ejemplo del patrón de diseño State</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="java" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="programacion" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi experiencia y consejos para un blog]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/01/mi-experiencia-y-consejos-para-un-blog/"/>
	<published>2014-01-17T15:44:23+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/01/mi-experiencia-y-consejos-para-un-blog</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/octopress.png" class="right" alt="Octopress" title="Octopress"/>
</div>


<p>Al momento de escribir esta entrada el blog ya tiene más de 3 años, ya más cerca de 4. En esta entrada en vez de algo relacionado con la tecnología quiero comentar por que empecé un blog, que supone tener un blog, como ha evolucionado durante este tiempo, como lo hago y por que hago algunas cosas como las hago por si mi modesta experiencia le sirve de utilidad a algún otro blogger.</p>

<h3>Por que empecé un blog</h3>

<p>Empecemos por el por que inicie un blog. Trabajo como ingeniero de software y cree un blog principalmente porque tristemente en pocos momentos de mi vida profesional y con la que me gano mi sueldo a fin de mes puedo trabajar y usar las herramientas con las que realmente me gustaría trabajar. Probablemente sea consecuencia de estar en un equipo de desarrolladores en el que son otras personas las que deciden que tecnologías usar y como hacer las cosas con su propia visión, el conocido <a href="http://es.wikipedia.org/wiki/Peopleware">«peopleware»</a>, o en otras ocasiones es el propio cliente el que marca las tecnologías a usar. En el blog no tengo ninguna limitación, puedo aprender y usar aunque sea en pequeños ejemplos las herramientas que quiera y como quiera, solo dependo de mi y no de otras personas. También inicié el blog ya que de esta forma me obligaba a aprender aquello de lo que escribía aparte de compartir el conocimiento que he ido aprendiendo y sigo aprendiendo en los ya más de 10 años de experiencia profesional, lo que explica el libro <a href="http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X">«The Pragmatic Programmer»</a> como «Your Knowledge Portfolio». Cuando surge la oportunidad de usar alguna de estas herramientas en el trabajo estoy preparado para usarla y con una mejor idea de saber cual es la opción más adecuada para cada caso. La tecnología a usar no es lo más importante sino lo que se hace con ella pero usar la herramienta adecuada puede evitar muchos problemas en el desarrollo de un proyecto y facilitarlo enormemente.</p>

<p>Aunque no inicié el blog por lo siguiente, pasado un tiempo y junto con <a href="https://twitter.com/picodotdev/">twitter</a> publicando los enlaces de las entradas en él me di cuenta que es una buena combinación para «spamear» a la gente de mi entorno (espero que con spam del bueno ;) y quizá de esta manera tener más probabilidad de algún día usar profesionalmente algunas de las herramientas de las que hablo en el blog y con las que me gustaría trabajar. No se si otro de los motivos de por que tengo un blog es porque aprendo o aprendo porque tengo un blog.</p>

<p>También el blog me parece una herramienta muy útil en el caso de la búsqueda de empleo ya que es una demostración de conocimientos que en un curriculum vitae no se refleja, así que desde que empecé el blog en mi CV incluyo un enlace al blog ya que mi blog y mi profesión están relacionados. Me parece un elemento muy interesante a incluir en el CV y en las pocas ocasiones que por el momento he tenido oportunidad de aprovecharlo en una oferta de trabajo me ha dado muy buenos resultados.</p>

<h3>Que supone tener un blog</h3>

<p>El blog es una de las cosas que más me divierte, pero quien quiera tener un blog ha de saber que requiere mucho esfuerzo, dedicación y sobre todo constancia, aunque dependerá del tipo del blog y de cada uno esto probablemente sea así. A veces el blog se lleva un tiempo que podría dedicarlo a andar en bici, leer un libro, simplemente dar un paseo, ver una película o cualquier otra cosa. Elaborar cada entrada de este blog supone varias horas de dedicación, no todas seguidas sino en diferentes días, trabajo que luego se ve recompensado con las visitas que recibe, algún retweet, algún comentario y la sensación de haber aportado algo a otra gente y a mi mismo. Si alguien esta pensando en crear un blog le diría que si no va a ser constante en el compromiso de publicar contenido (medido en semanas, meses, semestres, &hellip;) y en la dedicación al blog no lo empiece para dejarlo al cabo de unos pocos meses o unas pocas entradas (aunque por supuesto cada uno tiene todo el derecho de hacer con su blog lo que quiera).</p>

<h3>Como ha evolucionado</h3>

<p>Aún después de estos casi 4 años el blog tiene solamente unas 600 páginas vistas y unas 400 visitas diarias. Poco a poco van aumentando pero han sido necesarios 4 años para llegar estos números y no son muy grandes, quizá podrían ser mejores si usase alguno de los <a href="http://www.marketingguerrilla.es/">consejos que se dan por internet</a>. En la gráfica de analytics desde que empecé el blog se ve que hay una leve tendencia ascendente. Comento esto para que si alguien empieza un blog no tenga falsas expectativas del número de visitas y pierda interés al recibir pocas, si un blog quiere llegar a esos 4 años de vida el interés de seguir manteniéndolo con vida no debe depender del número de visitas que recibe, la motivación debe estar en otra parte, en mi caso es la satisfacción personal y los momentos de diversión que me dá aprendiendo y compartiendo.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/7/evolucion-analytics.png" title="Evolución vistas según Analytics" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/7/evolucion-analytics.png"/></a>
</div>


<h3>Publicidad</h3>

<p>En el blog incluyo unos bloques de publicidad adsense, han sido necesarios casi 3 años para superar los 70 € que exige Google para realizar la transferencia a mi cuenta, en el principio los ingresos mensuales eran de unos pocos céntimos y en estos momentos los ingresos suelen ser de entre 4 y 6 euros algún mes llegan a los 10 euros con unos 40 clics mensuales en los anuncios. También van aumentando mes a mes pero no dan para mucho más que para pagar un dominio propio si lo tuviese y para unas cervezas pagadas a crédito.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/7/evolucion-adsense.png" title="Evolución publicidad según AdSense" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/7/evolucion-adsense.png"/></a>
</div>


<h3>Como lo hago</h3>

<p>Para hacer el blog normalmente voy apuntando los temas sobre los que me interesa escribir. Las ideas pueden surgir en cualquier momento mientras voy en el metro, al irme a la cama, al leer un tweet, leer otros blogs, un libro, &hellip;. Por eso la forma de apuntarlos depende del momento, en el móvil, en un correo en borrador, en un bloc de notas de papel que casi siempre llevo conmigo, en archivos del disco duro, lo importante es que cuando se me ocurra una idea sobre la que escribir no se me olvide para ello lo mejor es apuntarla a no mucho tardar, olvidar una idea que nos ha pasado por la mente deja una mala sensación por ello ten siempre algo a mano en lo que apuntarlo. Sobre unas llego a escribir, otras pasan meses hasta que escribo sobre ellas y otras las descarto. Aunque aún no me ha pasado, si en algún momento me quedo sin ideas sobre las que escribir y como en mi caso escribo sorbre temas relacionados con la programación, software libre o linux una buena oportunidad está revisando un libro del que una vez leído explicar lo mismo que se explica en él de forma resumida las partes importantes, con un ejemplo propio y con nuestras propias palabras. Un libro y un tema técnico puede darnos para escribir una serie de entradas relacionadas dependiendo del grado de profundidad al que queramos llegar o de nuestro interés.</p>

<p>Los días que más visitas recibe el blog es el lunes, martes o miércoles pero normalmente publico el viernes, esto aparte de ser el día en que tengo más tiempo para dar los últimos retoques a la entrada que voy a publicar, por el tipo de entradas que escribo me parece el momento más adecuado. Suelo escribir sobre cosas técnicas y con un ejemplo de código fuente, publicando el viernes intento que el que quiera leerla la entrada tenga también tiempo y pueda leerla y tal vez probar el ejemplo más tranquilamente durante el fin de semana que un día entre semana.</p>

<p>Si estás a punto de iniciar un blog personal deberás encontrar tu ritmo de publicación. Mi ritmo de publicación por ahora es una entrada por semana, es el ritmo que me he marcado para escribir, para darme tiempo de escribir algo que considero suficientemente bueno aportando algo, para no saturar de información al que esté suscrito a mi blog pueda asimilar la información y para tener suficiente tiempo para que se me vayan ocurriendo nuevas ideas sobre las que escribir. Tal vez podría escribir cada menos tiempo pero me exigiría mucho más de mi tiempo de ocio y tal vez me quedaría sin temas sobre los que escribir (ese miedo que todo blogger puede tener). Pero lo importante no es cada cuento publico sino la constancia, si en una semana no me diese tiempo a escribir una entrada optaría por una cada dos semanas, si aún así no fuese suficiente optaría una cada mes. El tener un ritmo de publicación regular hace que los lectores sepan cuando se va a publicar algo y estén esperándolo de forma que la entrada sea más visitada. Además, da la sensación de que el blog sigue vivo, yo por lo menos no tengo interés es añadir a mi lector de feeds un blog en el que creo que no se vaya a publicar nada nuevo aunque sea cada unos meses, me limito a ver si tiene algo interesante y lo leo pero no lo añado a mi lector de feeds.</p>

<p>A lo largo de varios años hay épocas en los que surgen más ideas sobre las que escribir y momentos sobre los que uno tiene más ganas de escribir y otros momentos en los que menos. Para evitar no publicar nada cuando no tengo ganas de dedicarle tiempo al blog o para cuando quiero tomarme una semana de descanso suelo tener varias entradas escritas y casi preparadas para publicar, es decir, cada semana no escribo y lo publico inmediatamente. La semana que no publico la compenso con otras semanas en las que escribo varias entradas. Lo que publico normalmente lo he tenido esperando a publicarse unas cuantas semanas, como no publico sobre temas de noticias de actualidad no tengo el problema de que la entrada se quede obsoleta.</p>

<p>Y esto son algunos detalles de mi experiencia como blogger que tal vez le sirvan a alguien más. ¡Feliz blogging!</p>

<p>Referencia:<br/>
<a href="http://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/">Hola nuevo mundo</a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2014/03/guia-para-la-creacion-de-un-blog-con-octopress/">Guía de creación de blog con Octopress</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="blog" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iniciar la Raspberry Pi desde un disco o memoria USB]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/01/iniciar-la-raspberry-pi-desde-un-disco-o-memoria-usb/"/>
	<published>2014-01-10T12:41:33+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/01/iniciar-la-raspberry-pi-desde-un-disco-o-memoria-usb</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/raspberrypi.jpg" class="right" alt="Raspberry Pi" title="Raspberry Pi"/>
</div>


<p>Por defecto la Raspberry Pi se instala en una tarjeta SD y se inicia desde ella, sin embargo, la tarjeta SD es muy lenta tanto en la lectura como en la escritura de datos y cuando tiene que hacerlo de forma intensiva el sistema queda sin responder y aparentemente atascado. Para aumentar muy notablemente el rendimiento de la Raspberry Pi podemos instalar la partición del sistema en una memoria USB o disco duro externo.</p>

<p>En la guía de <a href="http://elblogdepicodev.blogspot.com.es/2012/06/guia-instalacion-raspberry-pi-con-arch.html">Instalación de la Raspberry Pi</a> expliqué como instalar la distribución <a href="http://archlinuxarm.org/">Arch Linux ARM</a> en una tarjeta SD, esa guía será el punto de partida para esta entrada. La Raspberry Pi inicia el sistema desde la tarjeta SD por lo que aunque instalemos el sistema en un dispositivo USB seguiremos necesitando la tarjeta SD para que contenga al menos la partición de arranque (boot).</p>

<p>Teniendo instalado en la tarjeta SD tanto la partición de arranque como la partición del sistema donde está realmente la distribución que hayamos instalado necesitaremos mover la partición del sistema a una dispositivo USB. Para ello podemos utilizar el comando dd, deberemos conocer el dispositivo asignado a la tarjeta SD cuando la introduzcamos en el ordenador, para ello podemos usar el comando lsblk:</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/6/lsbk.png" title="Dispositivos del sistema" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/6/lsbk-thumb.png"/></a>
</div>




<div><script src='https://gist.github.com/picodotdev/8350659.js?file=leer-particion.sh'></script>
<noscript><pre><code># dd if=/dev/mmcblk0p2 of=mmcblk0p2.img bs=4096 conv=notrunc
</code></pre></noscript></div>


<p>El comando dd creará un archivo en nuestro ordenador con la imagen de la partición del sistema de la Raspberry Pi. A continuación deberemos escribir esa imagen de la partición en el dispositivo USB también usando el comando dd. Hay que tener en cuenta que al escribir la imagen perderemos todos los datos que tengamos en el dispositivo destino. En el ejemplo, el dispositivo /dev/sdb1 se corresponde con la partición del dispositivo USB en el que copiaremos la partición del sistema de la Raspberry Pi.</p>

<div><script src='https://gist.github.com/picodotdev/8350659.js?file=escribir-particion.sh'></script>
<noscript><pre><code># dd if=mmcblk0p2.img of=/dev/sdb1 bs=4096 conv=notrunc
</code></pre></noscript></div>


<p>Una vez escrita la imagen muy probablemente deberemos redimensionar la partición para aprovechar todo el espacio de almacenamiento del dispositivo. Con <a href="http://gparted.org/">GParted</a> podemos hacerlo de forma muy sencilla. Seleccionamos /dev/sdb1, desmontamos la partición y redimensionamos el espacio para la partición, finalmente pulsamos en la opción «Editar > Aplicar operaciones».</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/6/gparted.png" title="Redimiensionado de patición con GParted" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/6/gparted-thumb.png"/></a>
</div>


<p>El paso final que deberemos hacer es cambiar en la partición de arranque que sigue estando en la tarjeta SD un archivo para indicar que la partición del sistema ahora está en un dispositivo USB. Probablemente la partición del sistema que deberemos indicar sea /dev/sda1, con este valor modificamos el archivo cmdline.txt y lo asignamos al parámetro root, deberemos tener algo como como lo siguiente:</p>

<div><script src='https://gist.github.com/picodotdev/8350659.js?file=cmdline.txt'></script>
<noscript><pre><code>smsc95xx.turbo_mode=N dwc_otg.lpm_enable=0 console=ttyAMA0,115200 kgdboc=ttyAMA0,115200 console=tty1 root=/dev/sda1 rootfstype=ext4 elevator=noop rootwait</code></pre></noscript></div>


<p>A partir de este punto con la tarjeta SD insertada en la Raspberry Pi y el dispositivo USB conectado a uno de los puertos se iniciará la Pi desde la partición del sistema del dispositivo USB en vez de la tarjeta SD. Enseguida se nota un aumento de rendimiento considerable en el tiempo de inicio y las perdidas de respuesta porque se está leyendo o escribiendo serán mucho menores o nulos con la mayor tasa de transferencia de los dispositivos USB.</p>

<p>Aunque la tarjeta SD es suficiente para usarla como <a href="http://picodotdev.github.io/blog-bitix/2014/01/raspberry-pi-como-media-center-con-geexbox/">Media Center en la Raspberry Pi</a> al navegar por los menús notaremos que se atasca y el tiempo de arranque es notable. Con la partición del sistema instalada en una memoria o disco duro externo siguiendo el método descrito en esta entrada notaremos un menor tiempo de arranque de <a href="http://www.geexbox.org/">GeeXboX</a> y evitaremos los atascos en los menus de <a href="http://xbmc.org/">XBMC</a>.</p>

<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2012/06/guia-instalacion-raspberry-pi-con-arch.html">Guía instalación Raspberry Pi con Arch Linux ARM (Parte I, instalación base)</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2012/06/guia-instalacion-raspberry-pi-con-arch_22.html">Guía instalación Raspberry Pi con Arch Linux ARM (Parte II, programas) </a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2014/01/raspberry-pi-como-media-center-con-geexbox/">Raspberry Pi como Media Center con GeeXboX</a><br/>
<a href="http://www.diverteka.com/?p=580">RaspBerry en USB</a><br/>
<a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=29&amp;t=44177">HOWTO: Move the filesystem to a USB stick</a><br/>
<a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?f=91&amp;t=9117">Using usb hard drive as default boot and storage?</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="hardware" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software-libre" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi como Media Center con GeeXboX]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2014/01/raspberry-pi-como-media-center-con-geexbox/"/>
	<published>2014-01-03T20:00:00+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2014/01/raspberry-pi-como-media-center-con-geexbox</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right; text-align: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/geexbox.png" class="right" alt="GeeXboX" title="GeeXboX"/><br/>
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/raspberrypi.jpg" class="right" alt="Raspberry Pi" title="Raspberry Pi"/>
</div>


<p>La Raspberry Pi es un computador del tamaño de una tarjeta de crédito que se puede usar para diferentes propósitos. Hasta hace no mucho a mi me servía para descargar películas mediante torrent, sin embargo, puede usarse perfectamente para otros propósitos muy interesantes como usarla como Media Center en una televisión que no es una Smart TV o como Media Center con más opciones.</p>

<p>Dada la popularidad que tiene la Raspberry Pi disponemos de varias distribuciones con soporte para usar la Raspberry Pi como centro multimedia de nuestro salón. Las principales son:</p>

<ul>
<li><a href="http://www.geexbox.org/">GeeXboX</a></li>
<li><a href="http://www.raspbmc.com/">RaspBMC</a></li>
<li><a href="http://openelec.tv/">OpenELEC</a></li>
</ul>


<p>Las tres opciones tienen la similitud que son muy fácilmente instalables (también para alguien sin muchos conocimientos técnicos) y que se basan en el programa <a href="http://xbmc.org/">XBMC</a> para ofrecer la funcionalidad de Media Center. La mayor diferencia entre las tres opciones están en los dispositivos soportados, Raspberry Pi al ser muy popular es soportada perfectamente en las tres opciones, RaspMBC está destinada especificamente para la Pi y GeeXboX y OpenELEC soportan algunos otros dispositivos como sistemas i386, x64_86, Cubox 1 / 2 / Pro, Utilite, Cubiboard o incluso Apple TV. Otras diferencias es que RaspBMC está basado en la distribución <a href="http://www.debian.org/">Debian</a> mientras que OpenELEC y GeeXboX no se basan en ninguna y están desarrolladas específicamente para actuar como Media Center. GeeXboX tiene algunas características adicionales como un servidor HTTP, un servidor FTP, SSH, un cliente torrent con una interfaz accesible con el navegador, compatible con NFS, Samba, UPnP y DLNA.</p>

<p>XBMC permite reproducir música, vídeo, películas, ofrece soporte para subtítulos, series, fotos incluso ver y grabar en directo la televisión con <a href="http://www.mythtv.org/">MythTV</a> además puede ser controlado conectándonos vía HTTP o <a href="http://www.geexbox.org/geexbox-daily-usage-iphone-and-android-remote-control/">con nuestro teléfono inteligente</a> ya sea <a href="http://www.android.com/">Android</a> o iPhone aunque la Raspberry Pi al no disponer de WiFi de por sí deberemos tenerla conectada a la red de nuestra casa con un cable ethernet.</p>

<p>En esta entrada explicaré como instalar GeeXboX en la Raspberry Pi y de esta manera dotar a nuestra televisión de características que quizá no tenga. El proceso no es nada complicado y en muy poco tiempo podremos empezar a usar la Raspberry Pi como centro multimedia si nuestra televisión dispone de una entrada para cable HDMI. El material que necesitaremos para esta guía es:</p>

<ul>
<li>Una Rasbpberry Pi y su adaptador de energía.</li>
<li>Una tarjeta SD de unos 8 GiB o más.</li>
<li>Un cable HDMI (por el se transmitirá el sonido y la imagen).</li>
<li>Una televisión con entrada HDMI.</li>
</ul>


<p>Lo primero que haremos es <a href="http://www.geexbox.org/download/">descargar la última versión de GeeXboX</a> para la Raspberry Pi y el <a href="http://www.geexbox.org/geexbox-for-embedded-devices-creating-a-bootable-sd-card/">script para nuestro dispositivo</a> que hará todo el proceso de instalación, en este caso para la Pi. Antes de grabar la imagen en la tarjeta SD deberemos conocer el nombre del dispositivo de la tarjeta SD, para ello ejecutamos los comandos lsblk y blkid en modo superusuario antes y después de introducir la tarjeta SD. Anotamos el nombre y lo usamos para ejecutar el siguiente comando sustituyendo el dispositivo anotado por el de este comando si es distinto que copiará la imagen del sistema a la tarjeta SD.</p>

<div><script src='https://gist.github.com/picodotdev/8242390.js?file=instalacion-geexbox.sh'></script>
<noscript><pre><code>sudo ./make-sdcard /dev/mmcblk0 geexbox-3.1.raspberrypi.tar.bz2</code></pre></noscript></div>


<p>Este comando tardará un poco de tiempo dada la lentitud de las tarjetas SD. Una vez termine quizá debamos expandir la partición del sistema para aprovechar todo el espacio de la tarjeta SD. Para expandir la partición del sistema podemos usar <a href="http://gparted.org/">GParted</a>. Y esto es lo mínimo imprescindible para instalar GeeXboX en una tarjeta SD para la Pi. GeeXboX tiene el siguiente aspecto.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-inicio.jpg" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-inicio-thumb.jpg"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-ajustes.jpg" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-ajustes-thumb.jpg"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-ajustes-video.jpg" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-ajustes-video-thumb.jpg"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-apariencia-ajustes.jpg" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-apariencia-ajustes-thumb.jpg"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-servicios.jpg" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-servicios-thumb.jpg"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-reproduccion.jpg" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/5/geexbox-reproduccion-thumb.jpg"/></a>
</div>


<p>Como apunte a tener en cuenta es que para reproducir películas en formato imagen de DVD (iso) <em>intuyo</em> que se necesita adquirir la licencia MPEG-2 en la <a href="http://www.raspberrypi.com/license-keys/">tienda de la propia página de Raspberry Pi</a>. Para otros formatos como DivX (avi) o Matroska (mkv) no tendremos ningún problema en reproducir las películas y van totalmente fluídas. Otras opciones son bastante más potentes pero Pi ya tiene capacidad suficiente para reproducir películas a 1080p.</p>

<p>A pesar de lo interesante de la Raspberry Pi esta tiene algunas incomodidades. Una incomodidad es que la tarjeta SD es muy lenta comparada con un disco duro conectado por el puerto USB. La tasa de transferrencia de la tarjeta SD es suficiente para reproducir películas sin ningún problema pero al navegar entre los menús de  XBMC notaremos ciertos atascos mientas se accede a la tarjeta SD. Una tarjeta SD de 32 GB tiene espacio suficiente para almacenar varias películas y los archivos de GeeXboX.</p>

<p>Usando la <a href="http://picodotdev.github.io/blog-bitix/2014/01/iniciar-la-raspberry-pi-desde-un-disco-o-memoria-usb/">Raspberry Pi con un disco duro externo o memoria USB</a> hará que GeeXboX se inicie mucho más rápido, evitaremos los atascos en la navegación de los menús y el copiar las películas al disco USB nos llevará menos tiempo que copiarlas a la tarjeta SD. Pero tampoco es una solución exenta de sus pequeños inconvenientes ya que los puertos USB de la Raspberry Pi son incapaces de proporcionar suficiente energía a un disco duro externo de 2.5&#8221; para hacerlo funcionar por lo que necesitaremos un concentrador de puertos USB alimentado, son unos cuantos cables más que necesitaremos si pretendemos tener las películas almacenadas de esta forma. Si queremos usar la Raspberry Pi usando un disco duro externo USB podemos seguir las instrucciones de otra entrada que escribiré sobre como Usar la Raspberry Pi con un disco duro externo USB.</p>

<p>Otro inconveniente de la Raspberry Pi es que no dispone de WiFi y algunas funcionalidades de GeeXboX se proporcionan cuando la Pi está conectada a internet con lo que perderemos esas funcionalidades o deberemos tener la suerte de tener el router cerca para conectar el cable ethernet, también útil si pretendemos controlar XMBC con nuestro teléfono en vez de con un ratón. Aunque esas opciones proporcionadas al estar conectados a internet tampoco son indispensables. ¡A disfrutar!</p>

<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2012/06/guia-instalacion-raspberry-pi-con-arch.html">Guía instalación Raspberry Pi con Arch Linux</a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2014/01/iniciar-la-raspberry-pi-desde-un-disco-o-memoria-usb/">Iniciar la Raspberry Pi desde un disco o memoria USB</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="hardware" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software-libre" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hemeroteca #4]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2013/12/hemeroteca-4/"/>
	<published>2013-12-24T18:28:48+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2013/12/hemeroteca-4</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/octopress.png" class="right" alt="Octopress" title="Octopress"/>
</div>


<p>El 2013 toca a su fin, el 2014 está llamando a la puerta y como cada medio año en el blog toca hacer una recapitulación con las entradas que he escrito durante estos meses. Durante este año he cumplido con el objetivo de escribir y publicar una entrada por semana, en total han sido 52, casi todas publicadas en <a href="http://elblogdepicodev.blogspot.com.es/">elblogdepicodev</a> y las del último més del año publicadas en <a href="http://picodotdev.github.io/blog-bitix/">Blog Bitix</a>. Esta entrada es un buen momento para leer alguna que te perdiste o releer alguna que te gustó.</p>

<p>Durante estos 6 meses y este año a destacar ha sido el <a href="http://elblogdepicodev.blogspot.com.es/2013/07/libro-sobre-desarrollo-de-aplicaciones.html">libro que publiqué sobre Apache Tapestry</a>, un framework para el desarrollo de aplicaciones en Java, del que dentro de no mucho tiempo se publicará la versión 5.4 final. El libro tiene más de 250 páginas escritas en español, un precio de 0.00 € y puedes <a href="http://muko.eu01.aws.af.cm/plugin/">descargarlo en diferentes formatos</a> entre los que se encuentran los formatos EPUB y MOBI más adecuados para leerlos en un libro electrónico pero también puede descargarse en formato PDF para leer en el ordenador. La página del libro desde la que puede descargarse es <a href="http://muko.eu01.aws.af.cm/plugin/">PlugIn Tapestry</a>. Una buena cantidad de páginas en las que no solo se trata los principales aspectos relacionados con este framework sino que cubre varios aspectos que en muchas aplicaciones deben abordar como seguridad, relaciones jerárquicas en base de datos, doble envío de formularios, DAO genérico, convenciones para archivos i10n, i18n en entidades de dominio, logging, layout de páginas, &hellip;  y a resolver independientemente del framework que se utilice aunque en el libro se aporta la solución desde el punto de vista de Tapestry.</p>

<p>También he escrito otras cuantas entradas sobre Tapestry que me han servido para posteriormente incluirlo como contenido en el libro.</p>

<ul>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/07/libro-sobre-desarrollo-de-aplicaciones.html">Libro sobre desarrollo de aplicaciones con Apache Tapestry</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/07/dao-generico-para-jpa-orm.html">DAO genérico para JPA (ORM)</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/07/personalizar-la-pagina-de-informe-de-error.html">Personalizar la página de informe de error en Apache Tapestry</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/07/redefinicion-de-paginas-de-error-404.html">Personalizar las páginas de error (404, 500, &hellip;) en Apache Tapestry</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/10/solucion-al-problema-de-seguridad-csrf.html">Solución al problema de seguridad CSRF en Apache Tapestry</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/10/solucion-al-doble-envio-de-peticiones.html">Solución al doble envío de peticiones en aplicaciones web</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/11/integracion-y-transacciones-con-spring.html">Integración y transacciones con Spring en Apache Tapestry</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/11/transacciones-en-apache-tapestry.html">Transacciones en Apache Tapestry</a></li>
</ul>


<p>También a destacar ha sido el cambio de plataforma de blogging que he realizado de <a href="http://www.blogger.com">Blogger</a> a <a href="http://octopress.org/">Octopress</a> con la que me será más cómodo escribir y publicar contenido en el blog que en este mes ya estoy notando. Además, Octopress tiene la ventaja de que el html final es más semántico, tiene un diseño «responsive» con lo que la experiencia de lectura con un dispositivo móvil será más agradable entre otras series de ventajas que comentaba en la <a href="http://http://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/">primera entrada del nuevo blog</a>. Empezar el nuevo blog va a ser como empezar desde cero, hasta que alcance el número de visitas que tiene ahora <a href="http://elblogdepicodev.blogspot.com.es">elblogdepicodev</a> van a pasar muchos meses pero poco a poco con constancia cada semana con una entrada de nuevo contenido el número de visitas irán aumentando paulatinamente.</p>

<ul>
<li><a href="http://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/">¡Hola nuevo mundo!</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/12/adios-viejo-mundo.html">¡Adios viejo mundo!</a></li>
</ul>


<p>El resto de entradas han sido sobre diversos temas no relacionados como varias sobre programación en Java (algún patrón de diseño, pruebas unitarias, hibernate, &hellip;), la <a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">serie de entradas sobre seguridad, criptografía, GPG y DNI electrónico</a> de la que todavía me quedan un par de artículos más enfocados a los servidores de aplicaciones y como usar certificados digitales para proporcionar conexiones sobre el protocolo https con SSL, una pequeña continuación con la <a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">lista de tareas pero implementada con Marionette</a> de la serie de entradas con javascript que empecé en la primera mitad del 2013 con la <a href="http://elblogdepicodev.blogspot.com.es/2013/03/introduccion-y-ejemplo-de-requirejs.html">Introducción y ejemplo de RequireJS</a>.</p>

<ul>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">Introducción a la criptografía e inicio con GPG</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.html">Instalar un lector de tarjetas inteligentes y usar el DNIe en Arch Linux </a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/11/como-usar-gpg-con-evolution.html">Como usar GPG con Evolution </a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/10/relaciones-jerarquicas-en-bases-de-datos-relacionales.html">Relaciones jerárquicas en bases de datos relacionales</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/10/archivo-de-log-de-sentencias-sql-en-mysql-mariadb.html">Archivo de log de sentencias SQL en MySQL o MariaDB</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/09/trazas-en-un-gsp-de-grails.html">Trazas en un gsp de Grails</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/09/archivos-properties-con-codificacion-utf8.html">Archivos properties con codificación UTF-8</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/09/guia-basica-del-reproductor-de-musica-cmus.html">Guía básica del reproductor de música cmus</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/09/como-optimizar-modulos-de-requirejs-y-archivos-javascript-II.html">Como optimizar módulos de RequireJS y archivos Javascript (II)</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-lista-de-tareas-con-marionette.html">Ejemplo lista de tareas con Marionette</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/08/ejemplo-del-patron-de-diseno-state.html">Ejemplo del patrón de diseño State</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/08/pruebas-unitarias-de-codigo-que-accede-a-base-de-datos.html">Pruebas unitarias de código que accede a base de datos</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/08/busquedas-de-texto-completo-en-objetos-de-dominio.html">Búsquedas de texto completo en objetos de dominio</a></li>
<li><a href="http://elblogdepicodev.blogspot.com.es/2013/08/acceso-base-de-datos-con-hibernate-y-jpa.html">Acceso a base de datos con Hibernate y JPA</a></li>
</ul>


<p>El 2014 continuaré en la misma linea que he seguido hasta ahora con el blog, tengo apuntados algunos temas interesantes que en las próximas semanas y meses iré publicando. ¡Feliz navidad!</p>

<div class="imagenes-post" style="text-align: center;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/4/christmastux2013.jpg" alt="Christmastux 2013" title="Christmastux 2013"/>
</div>


<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/06/hemeroteca-3.html">Hemeroteca #3</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2012/12/el-blog-de-picodev-te-desea-un-2013.html">Hemeroteca #2</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2012/06/hemeroteca-1.html">Hemeroteca #1</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2011/12/feliz-navidad-y-prospero-2012.html">Hemeroteca #0</a><br/>
<a href="http://www.klowner.com/wallpaper/">Christmas Tux</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="blog" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="hemeroteca" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Firmar digitalmente documentos con el DNIe y Sinadura]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2013/12/firmar-digitalmente-documentos-con-el-dnie-y-sinadura/"/>
	<published>2013-12-21T11:34:55+01:00</published>
    <updated></updated>
    <id>http://picodotdev.github.io/blog-bitix/2013/12/firmar-digitalmente-documentos-con-el-dnie-y-sinadura</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right; text-align: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/dnie.jpg" class="right" alt="DNIe" title="DNIe"/><br/>
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/sinadura.png" class="right" alt="Sinadura" title="Sinadura"/>
</div>


<p>Ya he comentado <a href="http://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.html">como instalar un lector de tarjetas inteligentes en linux para usar el DNI electrónico</a> y que una vez instalado como podemos darle algún uso útil como por ejemplo <a href="http://picodotdev.github.io/blog-bitix/2013/12/usar-el-dni-electronico-con-firefox-en-linux/">autenticarnos con en DNI</a> en las páginas que lo soporten como medio de autenticación y el navegador Firefox. También he comentado <a href="http://picodotdev.github.io/blog-bitix/2013/12/enviar-correos-electronicos-firmados-con-el-dnie-y-evolution/">como usar el DNI con el cliente de correo Evolution para enviar correos firmados digitalmente</a>.</p>

<p>En esta entrada voy a comentar como firmar digitalmente documentos en cualquier formato electrónico con la aplicación de software libre <a href="http://www.sinadura.net/es/">Sinadura</a>. La firma que hagamos con el DNIe sobre estos documentos puede tener la misma validez legal que la firma manuscrita.</p>

<p>Primeramente deberemos descargar la última versión de <a href="http://www.sinadura.net/es/">Sinadura</a> según la arquitectura de nuestro procesador, de 32 bits o de 64 bits y la plataforma linux o windows. El archivo descargado es un instalador que deberemos ejecutarlo, como es un programa Java deberemos tener instalado previamente un entorno de ejecución de Java como el <a href="http://openjdk.java.net/">OpenJDK</a>. Lo ejecutamos con:</p>

<div><script src='https://gist.github.com/picodotdev/8067882.js?file=instalar-sunadura.sh'></script>
<noscript><pre><code>$ java -jar sinaduraDesktop-3.3.3-unix64-installer.jar</code></pre></noscript></div>




<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/instalador-sinadura.png" title="Instalador Sinadura" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/instalador-sinadura-thumb.png" alt="Instalador Sinadura" title="Instalador Sinadura"/></a>
</div>


<p>Una vez instalado sinadura y también teniendo instalado el lector de tarjetas inteligentes para el DNI y funcionando deberemos conectarlo al ordenador e introducir el DNI. Iniciaremos sinadura con que se encuentra dentro del directorio de instalación de Sinadura:</p>

<div><script src='https://gist.github.com/picodotdev/8067882.js?file=iniciar-sinadura.sh'></script>
<noscript><pre><code>$ ./sinadura.sh</code></pre></noscript></div>


<p>Inicialmente veremos una pantalla como la siguiente con una lista de archivos vacíos y una serie de botones para realizar varias acciones.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/sinadura.png" title="Sinadura" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/sinadura-thumb.png" alt="Sinadura" title="Sinadura"/></a>
</div>


<p>Con Sinadura y el DNI podemos firmar digitalmente cualquier tipo de archivo pero entre los archivos de tipo pdf y el resto hay diferencias. En el caso de los pdf la firma se incrusta en el propio documento y en resto se crea un nuevo archivo con la firma y el documento original, el archivo nuevo creado tiene la extensión .sar. Para firmar un documento deberemos añadirlo a la vista con el botón «Añadir documento» y posteriormente firmarlo con el botón «Firmar». Para realizar la firma se nos pedirá que introduzcamos el PIN secreto que nos proporcionaron al emitirnos el DNI en la oficina de expedición.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/pin.png" title="Preferencias de Sinadura" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/pin-thumb.png" alt="Administrador de dispositivos (1)" title="Preferencias de Sinadura"/></a>
</div>


<p>En el caso de los archivos pdf Sinadura por defecto incrusta además de la firma una marca de agua en la primera página aunque se pueden cambiar algunas preferencias en «Archivo > Preferencias»:</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/preferencias-sinadura.png" title="Preferencias de Sinadura" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/preferencias-sinadura-thumb.png" alt="Preferencias de Sinadura" title="Preferencias de Sinadura"/></a>
</div>


<p>Los archivos .sar creados para archivos que no son pdf tienen el siguiente contenido, además del archivo original una serie de archivos .xml que contendrán la firma (son archivos zip con extensión .sar):</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/sinadura-documento-firmado.png" title="Documento firmado con Sinadura" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/3/sinadura-documento-firmado-thumb.png" alt="Documento firmado con Sinadura" title="Documento firmado con Sinadura"/></a>
</div>


<p>Una vez firmados los archivos podemos enviarlos por correo electrónico y la persona que los reciba podrá validarlos también con Sinadura. Para ello se debe añadir el archivo y pulsar el botón «Validar».</p>

<p>Si queremos firmar muchos archivos a la vez usar la interfaz gráfica nos va a resultar lento y un trabajo repetitivo. En caso de querer hacer firmas masivas de archivos es mejor usar la linea de comandos o un proceso sh que nos haga la tarea. Sinadura también proporciona una utilidad basada en la linea de comandos que debemos usar de la siguiente forma:</p>

<div><script src='https://gist.github.com/picodotdev/8067882.js?file=sinadura-console-pdf.sh'></script>
<noscript><pre><code>./sinadura-console.sh --sign --pdf
  --input /home/picodotdev/Software/personal/PlugInTapestry/PlugInTapestry.pdf
  --output /home/picodotdev/Software/personal/PlugInTapestry/PlugInTapestry-signed.pdf
  --preferences /home/picodotdev/.sinadura/preferences/preferences-console.properties
</code></pre></noscript></div>




<div><script src='https://gist.github.com/picodotdev/8067882.js?file=sinadura-console-xades.sh'></script>
<noscript><pre><code>./sinadura-console.sh --sign --xades
  --input /home/picodotdev/Software/personal/PlugInTapestry/PlugInTapestry.pdf.zip
  --output /home/picodotdev/Software/personal/PlugInTapestry/PlugInTapestry-signed.zip
  --preferences /home/picodotdev/.sinadura/preferences/preferences-console.properties</code></pre></noscript></div>


<p>Con el siguiente archivo de preferencias:</p>

<div><script src='https://gist.github.com/picodotdev/8067882.js?file=preferences-console.properties'></script>
<noscript><pre><code>preferencias.radioCertType.active=1
hardware.dispositive=/usr/lib64/opensc-pkcs11.so

pdf.stamp.enable=false
pdf.stamp.height=122
pdf.stamp.path=/home/picodotdev/.sinadura/preferences/sinadura150.png
pdf.stamp.y=17
pdf.stamp.x=17
pdf.stamp.width=122
pdf.visible=false
pdf.location=Bilbao
pdf.reason=powered by zylk.net
pdf.certified=1

ks.cache=/home/picodotdev/.sinadura/preferences/cache.jks
ks.trusted=/home/picodotdev/.sinadura/preferences/trusted.jks
ks.cache.pass=sinadura
ks.trusted.pass=sinadura

callback.handler=net.esle.sinadura.core.password.ConsoleCallbackHandler
certificate.password= </code></pre></noscript></div>


<p>La linea de comandos producirá el mismo resultado que el uso con la interfaz gráfica. Realmente los ejemplos de firma por consola no me han funcionado, en ambos casos me da una excepción NullPointerException que no es muy aclarativa de lo que está sucediendo, probablemente sea que falta algo en el archivo de preferencias.</p>

<p>En definitiva, la firma digital de documentos es otro uso que le podemos dar al DNI electrónico y con Sinadura realizarlo es bastante sencillo.</p>

<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">Crear una par de claves GPG</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/11/como-usar-gpg-con-evolution.html">Como firmar correos electrónicos con GPG</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.html">Instalar un lector de tarjetas inteligentes y usar el DNIe en Arch Linux </a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2013/12/usar-el-dni-electronico-con-firefox-en-linux/">Usar el DNI electrónico con Firefox en Linux</a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2013/12/enviar-correos-electronicos-firmados-con-el-dnie-y-evolution/">Enviar correos electrónicos firmados con el DNIe y Evolution</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="hardware" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software-libre" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enviar correos electrónicos firmados con el DNIe y Evolution]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2013/12/enviar-correos-electronicos-firmados-con-el-dnie-y-evolution/"/>
	<published>2013-12-13T16:39:07+01:00</published>
    <updated>2013-12-21T12:00:00+01:00</updated>
    <id>http://picodotdev.github.io/blog-bitix/2013/12/enviar-correos-electronicos-firmados-con-el-dnie-y-evolution</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right; text-align: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/archlinux.png" class="right" alt="Arch Linux" title="Arch Linux"/><br/>
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/dnie.jpg" class="right" alt="DNIe" title="DNIe"/><br/>
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/evolution.png" class="right" alt="Evolution" title="Evolution"/>
</div>


<p>Otra forma de la que podemos sacar partido al DNI electrónico además de para <a href="http://picodotdev.github.io/blog-bitix/2013/12/usar-el-dni-electronico-con-firefox-en-linux/">identificarnos en sitios web</a> que lo soporten como medio de autenticación es usarlo para firmar digitalmente los correos electrónicos que enviamos. Ya he comentado <a href="http://elblogdepicodev.blogspot.com.es/2013/11/como-usar-gpg-con-evolution.html">como firmar correos electrónicos con GPG</a> pero hacerlo con el DNI electrónico tiene la ventaja de que no necesitaremos <a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">crear una par de claves GPG</a> sino que con tener el DNI e <a href="http://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.html">instalar un lector de tarjetas inteligentes</a> será suficiente.</p>

<p>En esta entrada explicaré como usar el DNI electrónico para firmar digitalmente correos usando el cliente de correo <a href="https://projects.gnome.org/evolution/">Evolution</a>. Primeramente necesitaremos hacer una configuración adicional a la que hemos necesitado para poder usar el lector de tarjetas inteligentes y el DNIe en Linux. Y es usar el siguiente comando tal y como está comentado en <a href="https://forja.cenatic.es/plugins/mediawiki/wiki/opendnie/index.php/Documentacion_Aplicaciones_Evolution#Configuraci.C3.B3n_del_DNIe_en_el_cliente_de_correo_Evolution">esta página</a> cambiando el directorio home del usuario por el que corresponda:</p>

<div><script src='https://gist.github.com/picodotdev/7946347.js?file=comando-opensc-dnie.sh'></script>
<noscript><pre><code>modutil -add &quot;OpenSC-OpenDNIe&quot; -libfile /usr/lib/opensc-pkcs11.so -dbdir sql:/home/picodotdev/.pki/nssdb</code></pre></noscript></div>


<p>A continuación, el proceso es similar a como se configura la firma con claves GPG, con el lector de tarjetas inteligentes conectado al equipo y el DNI electrónico introducido accedemos a las propiedades de la cuenta, a la sección seguridad y en el apartado MIME seguro (S/MIME) seleccionamos nuestro certificado. Si queremos que nuestros mensajes se firmen automaticamente debemos marcar la opción «Firmar siempre los mensajes salientes cuando se use esta cuenta». Habiendo ejecutado el comando modutil cuando pulsemos el botón seleccionar en el apartado S/MIME se nos solicitará el PIN secreto de nuestro DNIe.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/pin.png" title="Diálogo de solicitud de PIN con el DNIe" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/pin-thumb.png" alt="Diálogo de solicitud de PIN con el DNIe" title="Diálogo de solicitud de PIN con el DNIe"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/seleccion-certificado.png" title="Selección de certificado digital con el DNIe" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/seleccion-certificado-thumb.png" alt="Selección de certificado digital con el DNIe" title="Selección de certificado digital con el DNIe"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/seguridad-evolution.png" title="Diálogo de preferencias de seguridad de Evolution para el DNIe" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/seguridad-evolution-thumb.png" alt="Diálogo de preferencias de seguridad de Evolution para el DNIe" title="Diálogo de preferencias de seguridad de Evolution para el DNIe"/></a>
</div>


<p>Una vez con las propiedades de la cuenta configurada para que Evolution use nuestro DNI electrónico, si no hemos marcado la opción «Firmar siempre los mensajes&hellip;» podemos realizarlo al escribir el propio correo marcando la opción «Opciones > Firmar con S/MIME». Al enviar un correo electrónico firmado se añadirá automáticamente un adjunto con la firma de nombre «smime.sp7». Al contrario que GPG la firma está en un formato binario y es dificilmente legible con un lector de texto plano.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/confimacion-firma.png" title="Confirmación de firma digital con el DNIe" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/confimacion-firma-thumb.png" alt="Confirmación de firma digital con el DNIe" title="Confirmación de firma digital con el DNIe"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/mensaje-firmado-dnie.png" title="Mensaje firmado con el DNIe" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/2/mensaje-firmado-dnie-thumb.png" alt="Mensaje firmado con el DNIe" title="Mensaje firmado con el DNIe"/></a>
</div>


<p>Referencia:<br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">Crear una par de claves GPG</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/11/como-usar-gpg-con-evolution.html">Como firmar correos electrónicos con GPG</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.html">Instalar un lector de tarjetas inteligentes y usar el DNIe en Arch Linux </a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2013/12/usar-el-dni-electronico-con-firefox-en-linux/">Usar el DNI electrónico con Firefox en Linux</a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2013/12/firmar-digitalmente-documentos-con-el-dnie-y-sinadura/">Firmar digitalmente documentos con el DNIe y Sinadura</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="hardware" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software-libre" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Usar el DNI electrónico con Firefox en Linux]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2013/12/usar-el-dni-electronico-con-firefox-en-linux/"/>
	<published>2013-12-06T14:07:58+01:00</published>
    <updated>2013-12-21T12:00:00+01:00</updated>
    <id>http://picodotdev.github.io/blog-bitix/2013/12/usar-el-dni-electronico-con-firefox-en-linux</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right; text-align: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/archlinux.png" class="right" alt="Arch Linux" title="Arch Linux"/><br/>
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/dnie.jpg" class="right" alt="DNIe" title="DNIe"/>
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/firefox.png" class="right" alt="Firefox" title="Firefox"/>
</div>


<p>Una vez hemos conseguido <a href="http://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.html">instalar el DNIe en Linux</a> correctamente podemos empezar a darle alguna utilidad más allá de cuando se nos require para acreditar nuestra identidad. Como veremos en esta entrada podemos usar el DNI electrónico para hacer varios trámites administrativos y consultas con la administración pública, empresas o entidades que en su web soporten el DNIe como medio de autenticación.</p>

<p>En esta entrada explicaré como usar el DNIe electrónico con la combinación del navegador <a href="http://www.mozilla.org/es-ES/">Firefox</a> y <a href="http://www.linux.com/">Linux</a>. Para ello primeramente debemos hacer que Firefox detecte el lector de tarjetas inteligentes, desde el menú de Firefox vamos a «Preferencias > Avanzado > Certificados > Dispositivos de seguridad».</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/preferencias-firefox.png" title="Preferencias de Firefox" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/preferencias-firefox-thumb.png" alt="Preferencias de Firefox" title="Preferencias de Firefox"/>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/administrador-dispositivos-1.png" title="Administrador de dispositivos (1)" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/administrador-dispositivos-1-thumb.png" alt="Administrador de dispositivos (1)" title="Administrador de dispositivos (1)"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/administrador-dispositivos-2.png" title="Administrador de dispositivos (2)" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/administrador-dispositivos-2-thumb.png" alt="Administrador de dispositivos (2)" title="Administrador de dispositivos (2)"/></a>
</div>


<p>En esta pantalla pulsamos el botón «Cargar» e introducimos los siguientes datos:</p>

<ul>
<li>Nombre del módulo: podemos poner cualquier cosa que nos sirva para identificar el lector de tarjetas inteligentes como «Smart Card», «Lector de tarjetas inteligentes» o «PKCS#11» como le he puesto y se ve en la imagen.</li>
<li>Archivo del módulo: en el caso de Arch Linux debemos poner «/usr/lib/opensc-pkcs11.so», en otras distribuciones será algo similar si no es lo mismo.</li>
</ul>


<p>Pulsamos «Aceptar», salimos del diálogo «Dispositivos de seguridad» y reiniciamos Firefox. Para que Firefox reconoza el lector junto con el DNIe este debe estar introducido al iniciarlo sino no se nos aparecerá el diálogo solicitando el PIN del DNIe en el momento de la autenticación y no podremos usarlo, esto es así posiblemente por algún tipo de circunstancia que impide detectar el DNIe en el momento de introducirlo en Firefox, sabiéndolo no supone mayor problema. Por lo demás, esa es toda la configuración adicional necesaria para usar el DNIe con Firefox.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/lector-dnie.jpg" title="Lector de tarjetas inteligentes y DNIe" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/lector-dnie-thumb.jpg" alt="Lector de tarjetas inteligentes y DNIe" title="Lector de tarjetas inteligentes y DNIe"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/dnie.jpg" title="DNI electrónico" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/dnie-thumb.jpg" alt="DNI electrónico" title="DNI electrónico"/></a>
</div>


<p>Para probar que tenemos instalado el DNIe crrectamente y que Firefox es capaz de utilizarlo podemos usar la <a href="http://www.dnielectronico.es/como_utilizar_el_dnie/verificar.html">página preparada para probar el DNI</a>. Al final de la misma hay un enlace «Comprobación de certificados» que deberemos pulsar, se nos pedirá el PIN y si todo es correcto veremos una página con diversa información de nuestro DNI.</p>

<p>Con el DNI electrónico preparado podemos hacer distintos tipos de trámites o consultas, por ejemplo, muchos bancos ofrecen medios para acceder de forma electrónica, online y mediante un navegador la consulta del saldo de nuestras cuentas y operaciones que se han realizado o para hacer transferencias. Alguno de los que he visto que soportan el DNIe como medio de autenticación son <a href="https://portal.bbk.es">BBK</a>, <a href="https://www.bancosantander.es">Santander</a> y el infame <a href="http://www.bankia.com/es/">Bankia</a>, seguro que hay unos cuantos más. También otro tipo de consulta que podemos hacer es consultar los puntos de carnet de conducir que poseemos.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/bbk-dnie.png" title="Autenticación BBK con DNIe" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/bbk-dnie-thumb.png" alt="Autenticación BBK con DNIe" title="Autenticación BBK con DNIe"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/dgt-puntos-carnet.jpg" title="Consultar puntos cárnet DGT" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/dgt-puntos-carnet-thumb.jpg" alt="Consultar puntos cárnet DGT" title="Consultar puntos cárnet DGT"/></a>
</div>


<p>Independientemente del trámite que hagamos el proceso es el mismo si se permite la autenticación mediante DNIe, conectamos el lector de tarjetas inteligentes por USB a nuestro ordenador, introducimos el DNIe, iniciamos Firefox y accedemos con él a la página donde se ofrece hacer la consulta o trámite. Hay que tener en cuenta que deberemos tener iniciado el servicio o demonio pcscd, manualmente o con el inicio del sistema (<a href="http://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.html">consultar la guía de instalación del DNIe en Linux</a>).</p>

<p>En algún momento en el proceso de autenticación se nos pedirá el PIN secreto que posibilita usar el DNIe, apareciéndonos una ventana similar a la siguiente para introducirlo.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/pin.png" title="Diálogo de solicitud de PIN con el DNIe" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/pin-thumb.png" alt="Diálogo de solicitud de PIN con el DNIe" title="Diálogo de solicitud de PIN con el DNIe"/></a>
</div>


<p>El PIN secreto de nuestro DNI se facilita en el momento de solicitar o renovar el documento nacional de identidad, es proporcionado en un documento como el siguiente.</p>

<div class="imagenes-post" style="text-align: center;">
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/documento-pin-dnie-1.jpg" title="Documento con el PIN del DNIe (1)" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/documento-pin-dnie-1-thumb.jpg" alt="Documento con el PIN del DNIe (1)" title="Documento con el PIN del DNIe (1)"/></a>
    <a href="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/documento-pin-dnie-2.jpg" title="Documento con el PIN del DNIe (2)" data-gallery><img src="http://picodotdev.github.io/blog-bitix/images/custom/posts/1/documento-pin-dnie-2-thumb.jpg" alt="Documento con el PIN del DNIe (2)" title="Documento con el PIN del DNIe (2)"/></a>
</div>


<p>Al introducir el PIN hay que poner cuidado y atención, suelen ser unos cuantos números, letras y caracteres especiales que hay que teclear correctamente. Disponemos varios intentos para introducirlos correctamente, al tercero fallido el DNIe se bloqueará y tendremos que acudir a la oficina de expedición de nuestra ciudad para desbloquearlo, también podremos acudir a él para cambiar el PIN. Una vez introducido correctamente podremos continuar con nuestra consulta o trámite.</p>

<p>En definitiva, el DNIe puede evitarnos algún viaje a alguna ventanilla y podemos hacer el trámite las 24 horas sin hacer colas.</p>

<p>Referencia:<br/>
<a href="http://web.cenatic.es/dnie/index.php?option=com_content&amp;view=article&amp;id=104&amp;Itemid=139">Configuración del DNI electrónico en Mozilla / Firefox</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/11/instalar-un-lector-de-tarjetas-inteligentes-en-arch-linux.html">Instalar un lector de tarjetas inteligentes y usar el DNIe en Arch Linux</a><br/>
<a href="http://picodotdev.github.io/blog-bitix/2013/12/enviar-correos-electronicos-firmados-con-el-dnie-y-evolution/">Enviar correos electrónicos firmados con el DNIe y Evolution</a>
<a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">Crear una par de claves GPG</a><br/>
<a href="http://elblogdepicodev.blogspot.com.es/2013/11/como-usar-gpg-con-evolution.html">Como firmar correos electrónicos con GPG</a></p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="hardware" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="software-libre" />
    
  </entry>
  
  <entry>
    <title type="html"><![CDATA[¡Hola nuevo mundo!]]></title>
    <link href="http://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo/"/>
	<published>2013-12-02T13:00:00+01:00</published>
    <updated>2013-12-09T19:00:00+01:00</updated>
    <id>http://picodotdev.github.io/blog-bitix/2013/12/hola-nuevo-mundo</id>
    <content type="html"><![CDATA[<div class="logotipos-post" style="float: right;">
    <img src="http://picodotdev.github.io/blog-bitix/images/custom/logotipos/octopress.png" class="right" alt="Octopress" title="Octopress"/>
</div>


<p>Esta es la última entrada que publicaré en el <a href="http://elblogdepicodev.blogspot.com.es">elblogdepicodev.blogspot.com.es</a> o la primera de <a href="http://picodotdev.github.io/blog-bitix">picodotdev.github.io/blog-bitix</a> dependiendo del blog al que hayas accedido, es decir, seguiré teniendo un blog y escribiendo sobre la temática alrededor de la tecnología como hasta ahora pero a partir de este momento todo el nuevo contenido que publique lo haré en el nuevo blog <a href="http://picodotdev.github.io/blog-bitix">picodotdev.github.io/blog-bitix</a>, por lo que si estás suscrito al feed de elblogdepicodev te recomiendo que te suscribas al <a href="http://feeds.feedburner.com/blog-bitix/">feed de bitix</a> para no perderte ninguna de las nuevas entradas que publique.</p>

<h2>Que está por venir en Bitix</h2>

<p>Tengo bastante cotenido por publicar en el futuro más o menos inmediato empezando por continuar con la <a href="http://elblogdepicodev.blogspot.com.es/2013/11/introduccion-la-criptografia-e-inicio-con-gpg.html">serie de artículos sobre criptografía, GPG y DNI electrónico</a>, instalar la <a href="http://www.raspberrypi.org/">Raspberry Pi</a> en una memoria USB o disco duro externo para ganar velocidad en vez de en la tarjeta SD como he explicado en la <a href="http://elblogdepicodev.blogspot.com.es/2012/06/guia-instalacion-raspberry-pi-con-arch.html">guía de instalación con Arch Linux para la RPi</a>, como usar la Raspberry Pi como «media center» con <a href="http://www.geexbox.org/">GeeXboX</a>, explicar como usar <a href="http://octopress.org/">Octopress</a> y <a href="http://pages.github.com/">GitHub Pages</a> para bloggear y como personalizarlo, programas para «scrapear» webs, mi experiencia y consejos como blogger, el patrón de diseño no operation, usar marcadores con herramientas de logging como <a href="http://www.slf4j.org/">SLF4J</a>, el servidor de aplicaciones <a href="http://www.jboss.org/jbossas">JBoss</a> y <a href="http://www.wildfly.org/">Wildfly</a> y muchas otras cosas que tengo apuntadas o que se me vayan ocurriendo según publico estas. Desde luego tengo contenido para seguir escribiendo en el nuevo blog que al ritmo de una entrada por semana continuaré publicando.</p>

<h2>¿Por que este cambio?</h2>

<p>Por varias razones, <a href="http://www.blogger.com">blogger</a> es una plataforma estupenda y a mi durante todo este tiempo me ha servidor perfectamente, es sencillo usarla y en muy poco tiempo se puede tener un blog listo para empezar a escribir en él sin necesidad de muchos conocimientos. Pero tambien tiene varias desventajas, algunas de ellas son:</p>

<ul>
<li>Las entradas han de ser escritas con su <a href="http://es.wikipedia.org/wiki/WYSIWYG">editor wysiwyg</a> y como muchos editores en los que ves es lo que obtienes a veces para dejar las cosas como uno quiere hay que acceder al código html que genera y modificarlo directamente, esto consume tiempo que podría dedicarse a escribir contenido en el blog y no en la publicación. Yo suelo escribir las entradas en un bloc de notas (con gedit) en texto plano, el pasarlo a blogger y formatearlo posteriormente con su editor me consume también bastante tiempo, tanto o más que en escribir una primera versión de la entrada.</li>
<li>La edición de la entrada con el editor de blogger requiere conexión a internet, si no estamos conectados a internet no podemos editar o nos obliga a usar un bloc de notas y posteriormente cuando dispongamos de conexión a internet transpasarlo al editor y darle formato.</li>
<li>Las imágenes hay que subirlas usando la propia herramienta de blogger en el momento de publicación de la entrada y conectado a internet. La gestión de las mismas no es muy cómoda, para borrar una imagen una vez subida hay que ir a los álbumes de picasa y cuando se tienen muchas imágenes ya subidas al blog encontrar una en toda la lista se vuelve complicado y lento.</li>
<li>Ajustar el diseño de blogger no es muy complicado pero para personalizarlo de forma avanzada requiere editar el HTML de la plantilla. Esta edición no es nada amigable para un usuario con pocos conocimientos y para algunas cosas hay que hacerlo, como por ejemplo, <a href="http://elblogdepicodev.blogspot.com.es/2012/03/karmacracy-y-como-integrarlo-en-blogger.html">integrar Karmacracy en blogger</a>.</li>
<li>Parece que blogger no es una de las herramientas que Google cuide (al igual que otras varias), las actualizaciones son escasas y con el tiempo van surgiendo herramientas mejores que blogger.</li>
<li>Los ejemplos de código los añado a cada entrada utilizando <a href="https://gist.github.com/">Gist</a> e introducir la referencias adecuadas en cada entrada implica editar e introducir código en la vista html. Además en la vista del editor wysiwyg los gist no se visualizan y si no se tiene cuidado se pueden borrar sin querer con lo que hay que volver a introducirlos. Nuevamente incluir las referencias de los gist me consume tiempo.</li>
</ul>


<h2>¿Que herramienta de blogging he elegido?</h2>

<p>La plataforma de blogging que he elegido ha sido <a href="http://octopress.org/">Octopress</a>, una plataforma de blogging que en mi caso solventa casi todos los problemas o molestias  que actualmente me ocasiona blogger descritos en los anteriores puntos. Es una plataforma basada en <a href="https://www.ruby-lang.org">Ruby</a> y <a href="http://jekyllrb.com/">Jekyll</a>, uno de los precursores de una nueva generación de plataforma para blogear y es la plataforma de referencia para escribir en blogs y alojarlos en <a href="http://pages.github.com/">GitHub Pages</a>. Aún asi hay alternativas parecidas en otros lenguajes de programación como en Python con <a href="http://docs.getpelican.com">Pelican</a>. La verdad es que usar Pelican en un principio me atraía más porque con ello quizá aprendiese algo de Python pero el hecho de que Jekyll sea la plataforma de referencia de GitHub es un punto a su favor.</p>

<p>En las siguientes entradas (<a href="http://arunrocks.com/moving-blogs-to-pelican/">1</a>), (<a href="http://blog.parkermoore.de/2012/12/18/the-immediate-future-of-jekyll/">2</a>) hay algunos comentarios interesantes sobre <a href="http://docs.getpelican.com">Pelican</a> y <a href="http://jekyllrb.com/">Jekyll</a>. Jekyll por lo visto ha estado abandonado durante un tiempo y Octopress no ha avanzado durante un buen tiempo aunque el desarrollo parece haberse retomado, desde luego por lo que he leído (<a href="http://sasheldon.com/blog/2013/07/07/waiting-for-octopress-2-successor/">3</a>) de Octopress es que llevan bastante tiempo con la intención de publicar una nueva versión pero hasta el momento no se ha producido.</p>

<p>Lo principal que buscaba en cualquiera de estas plataformas eran las siguientes ventajas sobre blogger:</p>

<ul>
<li><a href="http://es.wikipedia.org/wiki/Markdown">Markdown</a> (<a href="http://daringfireball.net/projects/markdown/">4</a>): este es un formato en texto plano que puede ser transformado a html con ciertos estilos. Como edito con gedit en texto plano usando markdown me va a evitar tener que transformar el contenido de la entrada a html usando el editor wysiwyg de blogger. Además, el html resultante será mejor gracias por una parte a las plantillas de Octopress y por otro a Markdown.</li>
<li>Edición fuera de linea o desconectado: como el editor puede ser cualquier editor de texto no hace falta estar conectado a internet para escribir o transformar lo escrito al editor de bogger, para las imágenes tampoco hace falta usar la herramienta de blogger sino que su administración es tan simple como gestionar archivos con el navegador de archivos de nuestro sistema operativo. El sitio puede previsualizarse en local.</li>
<li>Diseño adaptable («responsive»): blogger posee plantillas que puede visualizarse más o menos correctamente tanto en el navegador como en un dispositivo móvil con una resolución y pantalla más pequeña pero no se adaptan al tamaño de pantalla o ventana del navegador que esté usando el usuario. Por el contrario, las plantillas por defecto de Octopress son adaptables o «responsivas» lo que mejora la experiencia del usuario al leer el blog, los elementos cambian de posición y de tamaño según el tamaño de ventana para el navegador. Esto se consigue mediante las nuevas características de CSS3 con las que se pueden aplicar unos estilos u otros en función del espacio disponible para los elementos en el navegador del usuario.</li>
<li><a href="http://git-scm.com/">Git</a>: todo el código del blog lo tenemos en local y podemos regenerar su contenido en cualquier momento. Al usar git tenemos un histórico de todos los cambios que hemos hecho a los archivos y podemos recuperar algo si nos es necesario, en blogger solo tenemos la última versión. Si en blogger perdiesemos el acceso a nuestro blog regenerar uno nuevo nos sería complicado, tendríamos que tener una copia de seguridad del contenido y esto no nos serviría para recuperar la plantilla si la hemos personalizado.</li>
<li><a href="https://gist.github.com/">Gist</a>: el soporte que ofrece Octopress para incluir trozos de código de los gist es más simple, basta indicar el número y el nombre del archivo del gist.</li>
<li>Cualquier servidor web como hospedaje: si disponemos de una cuenta de GitHub podemos crear un repositorio para servir el contenido del blog con lo que no necesitaremos contratar ningún servidor de hosting pero si disponemos de un servidor web podemos emplearlo para servir el contenido del blog ya que todo es contenido estático.</li>
<li>Y otras ventajas como la posibilidad de <a href="https://github.com/mojombo/jekyll/pull/369">hacer referencia a otras entradas del blog</a> sin usar la URL completa.</li>
</ul>


<p>Octopress también es fácilmente integrable con todos los elementos de terceras partes que buscaba como <a href="http://www.sharethis.com">Share This</a> y <a href="http://www.karmacracy.com/">Karmacracy</a> para compartir contenido, <a href="http://disqus.com/">Disqus</a> para los comentarios, <a href="http://www.google.com/adsense">AdSense</a> para la publicidad, <a href="http://feedburner.google.com">Feedburner</a> para los feeds y <a href="https://gist.github.com/">Gist</a> para los ejemplos de código.</p>

<p>Así que dicho todo esto solo me queda añadir, suscríbete al <a href="http://feeds.feedburner.com/blog-bitix/">nuevo feed</a> y&hellip; ¡Hola nuevo mundo!</p>
]]></content>
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="blog" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-arch-linux" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-codigo" />
    
    <category scheme="http://picodotdev.github.io/blog-bitix/categories/" term="planeta-linux" />
    
  </entry>
  
</feed>
